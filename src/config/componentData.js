module.exports = [{"name":"Autocomplete","description":"This component integrates the TextField and Droplist components.\r\nThe value of TextField filters the list in Droplist.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"textfieldProps":{"type":{"name":"shape","value":{"id":{"name":"string","required":false},"type":{"name":"string","required":false},"name":{"name":"string","required":false},"label":{"name":"string","required":false},"placeholder":{"name":"string","required":false},"selectOnFocus":{"name":"bool","required":false},"clear":{"name":"bool","required":false},"iconName":{"name":"string","required":false},"theme":{"name":"string","required":false},"valueProp":{"name":"string","required":false},"className":{"name":"string","required":false},"inputClassName":{"name":"string","required":false},"disabled":{"name":"bool","required":false}}},"required":false,"description":"Object with the props for the TextField component. Check their descriptions in the TextField docs.","defaultValue":{"value":"{}","computed":false}},"droplistProps":{"type":{"name":"shape","value":{"items":{"name":"array","required":false},"itemIdKey":{"name":"string","required":false},"itemTextKey":{"name":"string","required":false},"itemTextRightKey":{"name":"string","required":false},"groups":{"name":"bool","required":false},"groupIdKey":{"name":"string","required":false},"groupNameKey":{"name":"string","required":false},"groupItemsKey":{"name":"string","required":false},"className":{"name":"string","required":false},"filter":{"name":"bool","required":false}}},"required":false,"description":"Object with the props for the Droplist component. Check their descriptions in the Droplist docs.","defaultValue":{"value":"{}","computed":false}},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call on change (TextField)."},"onKeyUp":{"type":{"name":"func"},"required":false,"description":"Function to call on key up (TextField)."},"onFocus":{"type":{"name":"func"},"required":false,"description":"Function to call on focus (TextField)."},"onBlur":{"type":{"name":"func"},"required":false,"description":"Function to call on blur (TextField)."},"onClear":{"type":{"name":"func"},"required":false,"description":"Function to call on clear (TextField)."},"onMouseDown":{"type":{"name":"func"},"required":false,"description":"Function to call on mouse down (Droplist item)."},"onRef":{"type":{"name":"func"},"required":false,"description":""},"disableAutoComplete":{"type":{"name":"bool"},"required":false,"description":"Disables native autoComplete on browsers.","defaultValue":{"value":"false","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport autobind from 'class-autobind';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport idx from 'idx';\r\n\r\nimport TextField from '../TextField';\r\nimport Droplist from '../Droplist';\r\n\r\n/**\r\n* This component integrates the TextField and Droplist components.\r\n* The value of TextField filters the list in Droplist.\r\n*/\r\nclass Autocomplete extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        autobind(this);\r\n        this.state = {\r\n            value: idx(props, _ => _.textfieldProps.valueProp) || '',\r\n            focus: false,\r\n            labels: []\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        let { onRef } = this.props;\r\n        if (onRef) onRef(this);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        if (idx(props, _ => _.textfieldProps.valueProp) !== idx(this.props, _ => _.textfieldProps.valueProp)) {\r\n            this.setState({ value: props.textfieldProps.valueProp });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        let { onRef } = this.props;\r\n        if (onRef) onRef(undefined);\r\n    }\r\n\r\n    onChange(value) {\r\n        const { onChange } = this.props;\r\n        this.setState({ value, focus: true });\r\n        if (onChange) onChange(value);\r\n    }\r\n\r\n    onFocus() {\r\n        const { onFocus } = this.props;\r\n        this.setState({ focus: true });\r\n        if (onFocus) onFocus();\r\n    }\r\n\r\n    onBlur() {\r\n        const { onBlur } = this.props;\r\n        this.setState({ focus: false });\r\n        if (onBlur) onBlur();\r\n    }\r\n\r\n    onKeyUp(key) {\r\n        const { onKeyUp } = this.props;\r\n        if (onKeyUp) onKeyUp(key);\r\n    }\r\n\r\n    onClear() {\r\n        const { onClear } = this.props;\r\n        this.setState({ value: '' });\r\n        if (onClear) onClear();\r\n    }\r\n\r\n    onMouseDown(item) {\r\n        const { onMouseDown, onChange, droplistProps } = this.props;\r\n        this.setState({\r\n            value: item[droplistProps.itemTextKey], focus: false\r\n        });\r\n        if (onChange) onChange(item[droplistProps.itemTextKey]);\r\n        if (onMouseDown) onMouseDown(item);\r\n    }\r\n\r\n    onEnter(item) {\r\n        const { onEnter, onChange, droplistProps } = this.props;\r\n        this.setState({\r\n            value: item[droplistProps.itemTextKey], focus: false\r\n        });\r\n        if (onChange) onChange(item[droplistProps.itemTextKey]);\r\n        if (onEnter) onEnter(item);\r\n    }\r\n\r\n    forceValue(value) {\r\n        this.setState({value});\r\n    }\r\n\r\n    setRef(input) {\r\n        if (input) this.input = input;\r\n    }\r\n\r\n    render() {\r\n        const { value, focus } = this.state;\r\n        const { classes, id, textfieldProps, droplistProps, className, style } = this.props;\r\n        return (\r\n            <div className={`${classes.autoComplete}${className ? ` ${className}` : ''}`} id={id} style={style} ref = {ref => { this.autocomplete = ref; }}>\r\n                <TextField\r\n                    {...textfieldProps}\r\n                    onRef={this.setRef}\r\n                    onChange={this.onChange}\r\n                    onFocus={this.onFocus}\r\n                    onBlur={this.onBlur}\r\n                    onKeyUp={this.onKeyUp}\r\n                    onClear={this.onClear}\r\n                    valueProp={value}\r\n                />\r\n                {(value && focus && droplistProps.items) ? (\r\n                    <Droplist\r\n                        {...droplistProps}\r\n                        items={cloneDeep(droplistProps.items)}\r\n                        term={value}\r\n                        onMouseDown={this.onMouseDown}\r\n                        onEnter={this.onEnter}\r\n                        isOnFocus\r\n                        className={`${classes.droplist}${droplistProps.className ? ` ${droplistProps.className}` : ''}`} />\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAutocomplete.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Object with the props for the TextField component. Check their descriptions in the TextField docs. */\r\n    textfieldProps: PropTypes.shape({\r\n        id: PropTypes.string,\r\n        type: PropTypes.string,\r\n        name: PropTypes.string,\r\n        label: PropTypes.string,\r\n        placeholder: PropTypes.string,\r\n        selectOnFocus: PropTypes.bool,\r\n        clear: PropTypes.bool,\r\n        iconName: PropTypes.string,\r\n        theme: PropTypes.string,\r\n        valueProp: PropTypes.string,\r\n        className: PropTypes.string,\r\n        inputClassName: PropTypes.string,\r\n        disabled: PropTypes.bool\r\n    }).isRequired,\r\n    /** Object with the props for the Droplist component. Check their descriptions in the Droplist docs. */\r\n    droplistProps: PropTypes.shape({\r\n        items: PropTypes.array,\r\n        itemIdKey: PropTypes.string,\r\n        itemTextKey: PropTypes.string,\r\n        itemTextRightKey: PropTypes.string,\r\n        groups: PropTypes.bool,\r\n        groupIdKey: PropTypes.string,\r\n        groupNameKey: PropTypes.string,\r\n        groupItemsKey: PropTypes.string,\r\n        className: PropTypes.string,\r\n        filter: PropTypes.bool\r\n    }).isRequired,\r\n    /** Function to call on change (TextField). */\r\n    onChange: PropTypes.func,\r\n    /** Function to call on key up (TextField). */\r\n    onKeyUp: PropTypes.func,\r\n    /** Function to call on focus (TextField). */\r\n    onFocus: PropTypes.func,\r\n    /** Function to call on blur (TextField). */\r\n    onBlur: PropTypes.func,\r\n    /** Function to call on clear (TextField). */\r\n    onClear: PropTypes.func,\r\n    /** Function to call on mouse down (Droplist item). */\r\n    onMouseDown: PropTypes.func,\r\n    onRef: PropTypes.func,\r\n    /**  Disables native autoComplete on browsers. */\r\n    disableAutoComplete: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nAutocomplete.defaultProps = {\r\n    textfieldProps: {},\r\n    droplistProps: {},\r\n    disableAutoComplete: false\r\n};\r\n\r\nexport default Autocomplete;\r\n","examples":[{"name":"Example1","description":"","code":"/* Return the value on change */\r\nimport React from 'react';\r\nimport { Autocomplete } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const items = [\r\n        { name: 'Item 1', secondary: '(10)' },\r\n        { name: 'Item 2', secondary: '(5)' },\r\n        { name: 'Item 3', secondary: '(30)' }\r\n    ];\r\n    return (\r\n        <Autocomplete\r\n            droplistProps={{\r\n                items:items,\r\n                itemIdKey:\"name\",\r\n                itemTextKey:\"name\",\r\n                itemTextRightKey:\"secondary\"\r\n            }}\r\n            textfieldProps={{\r\n                label:\"Label\",\r\n                placeholder:\"Placeholder\",\r\n                valueProp:\"Item\"\r\n            }}\r\n            onChange={(value) => {console.log(value);}}\r\n        />\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Return the item on mouse down */\r\nimport React from 'react';\r\nimport { Autocomplete } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    const items = [\r\n        { name: 'Item 1', secondary: '(10)' },\r\n        { name: 'Item 2', secondary: '(5)' },\r\n        { name: 'Item 3', secondary: '(30)' }\r\n    ];\r\n    return (\r\n        <Autocomplete\r\n            droplistProps={{\r\n                items:items,\r\n                itemIdKey:\"name\",\r\n                itemTextKey:\"name\",\r\n                itemTextRightKey:\"secondary\"\r\n            }}\r\n            textfieldProps={{\r\n                label:\"Label\",\r\n                placeholder:\"Placeholder\",\r\n                valueProp:\"Item\"\r\n            }}\r\n            onMouseDown={(item) => console.log(item)}\r\n        />\r\n    );\r\n}\r\n"},{"name":"Example3","description":"","code":"/* Return the item on Enter */\r\nimport React from 'react';\r\nimport { Autocomplete } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    const items = [\r\n        { text: 'Países', id:'1',\r\n            items: [\r\n                { text: 'México', textRight: '(3405)', key: 'MX', type: 'CO', id:'1.1' }\r\n            ]\r\n        },\r\n        { text: 'Estados', id:'2',\r\n            items: [\r\n                { text: 'Querétaro', textRight: '(222)', key: 'QRO', type: 'ST', id:'2.1' },\r\n                { text: 'Estado de México', textRight: '(225)', key: 'EMX', type: 'ST', id:'2.2' }\r\n            ]\r\n        },\r\n        { text: 'Ciudades', id:'3',\r\n            items: [\r\n                { text: 'Santiago de Querétaro', textRight: '(102)', key: 'QRO2', type: 'CY', id:'3.1' }\r\n            ]\r\n        }\r\n    ];\r\n    return (\r\n        <Autocomplete\r\n            droplistProps={{\r\n                items,\r\n                itemIdKey: 'key',\r\n                itemTextKey: 'text',\r\n                itemTextRightKey: 'textRight',\r\n                groups: true,\r\n                groupIdKey: 'id',\r\n                groupNameKey: 'text',\r\n                groupItemsKey: 'items'\r\n            }}\r\n            textfieldProps={{\r\n                label: 'Label',\r\n                placeholder: 'Placeholder'\r\n            }}\r\n            onEnter={item => console.log(item)}\r\n        />\r\n    );\r\n}\r\n"},{"name":"Example4","description":"","code":"/* Return the item on Enter */\r\nimport React from 'react';\r\nimport { Autocomplete } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    const items = [\r\n        { text: 'Países', id:'1',\r\n            items: [\r\n                { text: 'México', textRight: '(3405)', key: 'MX', type: 'CO', id:'1.1' }\r\n            ]\r\n        },\r\n        { text: 'Estados', id:'2',\r\n            items: [\r\n                { text: 'Querétaro', textRight: '(222)', key: 'QRO', type: 'ST', id:'2.1' },\r\n                { text: 'Estado de México', textRight: '(225)', key: 'EMX', type: 'ST', id:'2.2' }\r\n            ]\r\n        },\r\n        { text: 'Ciudades', id:'3',\r\n            items: [\r\n                { text: 'Santiago de Querétaro', textRight: '(102)', key: 'QRO2', type: 'CY', id:'3.1' }\r\n            ]\r\n        }\r\n    ];\r\n    return (\r\n        <Autocomplete\r\n            droplistProps={{\r\n                items:items,\r\n                itemIdKey:\"key\",\r\n                itemTextKey:\"text\",\r\n                itemTextRightKey:\"textRight\",\r\n                groups: true,\r\n                groupIdKey:\"id\",\r\n                groupNameKey:\"text\",\r\n                groupItemsKey:\"items\",\r\n                // filter: false\r\n            }}\r\n            inputProps={{\r\n                label:\"Label\",\r\n                placeholder:\"Placeholder\"\r\n            }}\r\n            selectOnEnter\r\n            onChange={(value) => {console.log(value);}}\r\n        />\r\n    );\r\n}\r\n"}]},{"name":"Avatar","description":"The Avatar component shows a rounded avatar with a profile picture, a gender icon or the first two capital letters of a name.\r\nYou can use more than one property as a fallback in case one of the props is empty or wrong.","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"photo":{"type":{"name":"string"},"required":false,"description":"A url to show a photo as the avatar."},"gender":{"type":{"name":"enum","value":[{"value":"'f'","computed":false},{"value":"'m'","computed":false}]},"required":false,"description":"Use the values 'm' or 'f' to show a default avatar with an icon representing the gender."},"name":{"type":{"name":"string"},"required":false,"description":"Pass a name to show two initials."},"size":{"type":{"name":"number"},"required":false,"description":"The size of the avatar.","defaultValue":{"value":"70","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AvatarContent from './AvatarContent';\r\n\r\n/**\r\n* The Avatar component shows a rounded avatar with a profile picture, a gender icon or the first two capital letters of a name.\r\n* You can use more than one property as a fallback in case one of the props is empty or wrong.\r\n*/\r\nclass Avatar extends React.Component {\r\n\r\n    render() {\r\n        const { classes, photo, gender, name, size, id, className, style } = this.props;\r\n        return (\r\n            <div id={id} className={`${classes.circle}${className ? ` ${className}` : ''}`} style={style}>\r\n                <AvatarContent photo={photo} gender={gender} name={name} size={size} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAvatar.defaultProps = {\r\n    size: 70\r\n};\r\n\r\nAvatar.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    /** A url to show a photo as the avatar. */\r\n    photo: PropTypes.string,\r\n    /** Use the values 'm' or 'f' to show a default avatar with an icon representing the gender. */\r\n    gender: PropTypes.oneOf([\r\n        'f', 'm'\r\n    ]),\r\n    /** Pass a name to show two initials. */\r\n    name: PropTypes.string,\r\n    /** The size of the avatar. */\r\n    size: PropTypes.number,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","examples":[{"name":"Example1","description":"","code":"/* Avatar with photo */\r\nimport React from 'react';\r\nimport { Avatar } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Avatar photo=\"http://placehold.it/70x70\" />\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Avatar with gender icon */\r\nimport React from 'react';\r\nimport { Avatar } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Avatar gender=\"f\" />\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Avatar with capital letters */\r\nimport React from 'react';\r\nimport { Avatar } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Avatar name=\"John Doe\" />\r\n    );\r\n}"},{"name":"Example4","description":"","code":"/* Avatar with custom size */\r\nimport React from 'react';\r\nimport { Avatar } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <Avatar name=\"John Doe\" size={40} />\r\n    );\r\n}"}]},{"name":"Button","description":"A flexible button component, with four pre-stablished themes.\r\nThe Buton can behave like any button with an onClick function, or like an anchor with href and target.\r\nThere are 3 sizes available: small, medium and large.","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"children":{"type":{"name":"string"},"required":false,"description":""},"theme":{"type":{"name":"enum","value":[{"value":"'primary'","computed":false},{"value":"'secondary'","computed":false},{"value":"'tertiary'","computed":false},{"value":"'tertiaryWhite'","computed":false},{"value":"'ghostPink'","computed":false},{"value":"'ghostGrey'","computed":false},{"value":"'ghostWhite'","computed":false}]},"required":false,"description":"There are four themes available: main, secondary, white, blue, flat.","defaultValue":{"value":"'primary'","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'sm'","computed":false},{"value":"'md'","computed":false},{"value":"'lg'","computed":false}]},"required":false,"description":"The button has three different sizes: sm, md, lg.","defaultValue":{"value":"'sm'","computed":false}},"block":{"type":{"name":"bool"},"required":false,"description":"The block property lets the button expand to ocupy the whole width of its parent.","defaultValue":{"value":"false","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"It disables the button and shows it with the proper theme.","defaultValue":{"value":"false","computed":false}},"icon":{"type":{"name":"string"},"required":false,"description":"Use the name of any of the icons available in the library."},"iconRight":{"type":{"name":"string"},"required":false,"description":"Use the name of any of the icons available in the library. The icon will be rendered on the right side of the button."},"loading":{"type":{"name":"bool"},"required":false,"description":"The loading property disables the button and shows a loading icon spinning."},"onClick":{"type":{"name":"func"},"required":false,"description":"The function to call when the button is clicked."},"href":{"type":{"name":"string"},"required":false,"description":"Optionally, you can set the href property and use it like a link."},"target":{"type":{"name":"string"},"required":false,"description":"If you use the href property, you can also define the target."},"rel":{"type":{"name":"string"},"required":false,"description":"If you use the href property, you can also define the rel attribute."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n* A flexible button component, with four pre-stablished themes.\r\n* The Buton can behave like any button with an onClick function, or like an anchor with href and target.\r\n* There are 3 sizes available: small, medium and large.\r\n*/\r\nclass Button extends React.Component {\r\n\r\n    render() {\r\n        const { classes, className, children, id, href, target, rel, onClick, theme, size, block, disabled, icon, iconRight, style, loading } = this.props;\r\n        let classNames=classes.btn;\r\n        if (theme) classNames += ` ${classes[theme]}`;\r\n        if (loading) classNames += ` ${classes.loading}`;\r\n        if (disabled) classNames += ` ${classes.disabled}`;\r\n        if (size == \"md\" || size == \"lg\") classNames += ` ${classes[size]}`;\r\n        if (block) classNames += ` ${classes.block}`;\r\n        if (className) classNames += ` ${className}`;\r\n        if (!children && icon) classNames += ` ${classes.iconOnly}`;\r\n        const content = (\r\n            <span className={classes.cont}>\r\n                {icon ? <i className={classes.icon} /> : ''}\r\n                {children}\r\n                {iconRight ? <i className={classes.iconRight} /> : ''}\r\n            </span>\r\n        );\r\n        const loadingLayer = loading ? (\r\n            <span className={classes.loadCont}>\r\n                <i className={classes.loadIcon} />\r\n            </span>\r\n        ) : null;\r\n        if (href) {\r\n            return (\r\n                <a\r\n                    className={classNames}\r\n                    href={!disabled ? href : ''}\r\n                    target={target}\r\n                    rel={rel}\r\n                    onClick={!disabled ? onClick : null}\r\n                    id={id}\r\n                    style={style}>\r\n                    {content}\r\n                    {loadingLayer}\r\n                </a>\r\n            );\r\n        } else {\r\n            return (\r\n                <button\r\n                    className={classNames}\r\n                    onClick={!disabled ? onClick : null}\r\n                    id={id}\r\n                    style={style}>\r\n                    {content}\r\n                    {loadingLayer}\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nButton.defaultProps = {\r\n    theme: 'primary',\r\n    size: 'sm',\r\n    block: false,\r\n    disabled: false\r\n};\r\n\r\nButton.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    children: PropTypes.string,\r\n    /** There are four themes available: main, secondary, white, blue, flat. */\r\n    theme: PropTypes.oneOf([\r\n        'primary', 'secondary', 'tertiary', 'tertiaryWhite', 'ghostPink', 'ghostGrey', 'ghostWhite'\r\n    ]),\r\n    /** The button has three different sizes: sm, md, lg. */\r\n    size: PropTypes.oneOf([\r\n        'sm', 'md', 'lg'\r\n    ]),\r\n    /** The block property lets the button expand to ocupy the whole width of its parent. */\r\n    block: PropTypes.bool,\r\n    /** It disables the button and shows it with the proper theme. */\r\n    disabled: PropTypes.bool,\r\n    /** Use the name of any of the icons available in the library. */\r\n    icon: PropTypes.string,\r\n    /** Use the name of any of the icons available in the library. The icon will be rendered on the right side of the button. */\r\n    iconRight: PropTypes.string,\r\n    /** The loading property disables the button and shows a loading icon spinning. */\r\n    loading: PropTypes.bool,\r\n    /** The function to call when the button is clicked. */\r\n    onClick: PropTypes.func,\r\n    /** Optionally, you can set the href property and use it like a link. */\r\n    href: PropTypes.string,\r\n    /** If you use the href property, you can also define the target. */\r\n    target: PropTypes.string,\r\n    /** If you use the href property, you can also define the rel attribute. */\r\n    rel: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Button;\r\n","examples":[{"name":"Example1","description":"","code":"/* Themes */\r\nimport React from 'react';\r\nimport { Button, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Button theme=\"primary\">Primary</Button>\r\n            <Button theme=\"secondary\">Secondary</Button>\r\n            <Button theme=\"tertiary\">Tertiary</Button>\r\n            <div style={{background:colors.prim, marginTop:'15px', padding:'10px', display:'inline-block'}}>\r\n                <Button theme=\"tertiaryWhite\">Tertiary White</Button>\r\n            </div>\r\n            <Button theme=\"ghostPink\">Ghost Pink</Button>\r\n            <Button theme=\"ghostGrey\">Ghost Grey</Button>\r\n            <div style={{background:colors.prim, marginTop:'15px', padding:'10px', display:'inline-block'}}>\r\n                <Button theme=\"ghostWhite\">Ghost White</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Sizes */\r\nimport React from 'react';\r\nimport { Button } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div>\r\n            <Button size=\"sm\">Small</Button>\r\n            <Button size=\"md\">Medium</Button>\r\n            <Button size=\"lg\">Large</Button>\r\n        </div>\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Block */\r\nimport React from 'react';\r\nimport { Button } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Button block>Block</Button>\r\n    );\r\n}"},{"name":"Example4","description":"","code":"/* Button with an icon */\r\nimport React from 'react';\r\nimport { Button } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <Button icon=\"search\">Icon</Button>\r\n    );\r\n}"},{"name":"Example5","description":"","code":"/* Button loading */\r\nimport React from 'react';\r\nimport { Button } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example5() {\r\n    return (\r\n        <Button loading>Loading</Button>\r\n    );\r\n}"},{"name":"Example6","description":"","code":"/* Button disabled */\r\nimport React from 'react';\r\nimport { Button } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example6() {\r\n    return (\r\n        <Button disabled>Disabled</Button>\r\n    );\r\n}"}]},{"name":"ButtonAlign","description":"The Input component and the Button component have different sizes. That's why they wouldn't be aligned with each other when putting them side to side. Use this component to align the Button correctly with the Input.\r\nTo align it correctly, use the same size value used on the Button.\r\nRight below there are two examples, one aligned and one that is not.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"object"},"required":false,"description":""},"size":{"type":{"name":"string"},"required":false,"description":"Use the same size used in the button.","defaultValue":{"value":"'sm'","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n* The Input component and the Button component have different sizes. That's why they wouldn't be aligned with each other when putting them side to side. Use this component to align the Button correctly with the Input.\r\n* To align it correctly, use the same size value used on the Button.\r\n* Right below there are two examples, one aligned and one that is not.\r\n*/\r\nclass ButtonAlign extends React.Component {\r\n\r\n    componentDidMount() {\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.warn('DEPRECATED: The ButtonAlign component will be removed soon. Please look for another solution.');\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { classes, children, size } = this.props;\r\n        return (\r\n            <div className={size ? classes[size] : classes.sm}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nButtonAlign.defaultProps = {\r\n    size: 'sm'\r\n};\r\n\r\nButtonAlign.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.object,\r\n    /** Use the same size used in the button. */\r\n    size: PropTypes.string\r\n};\r\n\r\nexport default ButtonAlign;\r\n","examples":[{"name":"Example1","description":"","code":"/* Button aligned with an input */\r\nimport React from 'react';\r\nimport { ButtonAlign, Button, Input, Flexbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Flexbox display=\"flex\">\r\n            <Input label=\"Input\" />\r\n            <ButtonAlign size=\"sm\">\r\n                <Button size=\"sm\">Aligned button</Button>\r\n            </ButtonAlign>\r\n        </Flexbox>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Button not aligned with an input */\r\nimport React from 'react';\r\nimport { Button, Input, Flexbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Flexbox display=\"flex\">\r\n            <Input label=\"Input\" />\r\n                <Button size=\"sm\">Not aligned button</Button>\r\n        </Flexbox>\r\n    );\r\n}"}]},{"name":"Card","description":"Container component with a card style","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"rest":{"type":{"name":"bool"},"required":false,"description":"The rest property cancels the elevation of the card."},"raised":{"type":{"name":"bool"},"required":false,"description":"The raised property gives a higher elevation to the card."},"raisable":{"type":{"name":"bool"},"required":false,"description":"The raisable property gives a higher elevation to the card on hover."},"noPadding":{"type":{"name":"bool"},"required":false,"description":"The card has by default a padding. Use this property if you need to remove it."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Container component with a card style */\r\nconst Card = ({ classes, children, rest, raised, raisable, noPadding, className, style, id }) => {\r\n\r\n    const getElevation = () => {\r\n        let classNames;\r\n        const elevations = [{rest}, {raised}];\r\n        const filtered = filter(elevations);\r\n        if (filtered.length) classNames = classes[Object.keys(filtered[0])[0]];\r\n        else classNames = classes.flat;\r\n        if (raisable && !raised)\r\n            classNames += ` ${classes.raisable}`;\r\n        return classNames;\r\n    };\r\n\r\n    const filter = array => {\r\n        return array.filter((item) => {\r\n            const key = Object.keys(item)[0];\r\n            if (item[key]) return key;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div id={id} className={`${!noPadding ? classes.card : classes.cardNoPadding} ${getElevation()}${className ? ` ${className}` : ''}`} style={style}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nCard.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    children: PropTypes.node,\r\n    /** The rest property cancels the elevation of the card. */\r\n    rest: PropTypes.bool,\r\n    /** The raised property gives a higher elevation to the card. */\r\n    raised: PropTypes.bool,\r\n    /** The raisable property gives a higher elevation to the card on hover. */\r\n    raisable: PropTypes.bool,\r\n    /** The card has by default a padding. Use this property if you need to remove it. */\r\n    noPadding: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Card;\r\n","examples":[{"name":"Example1","description":"","code":"/* Elevations of card */\r\nimport React from 'react';\r\nimport { Card, Text, spacing } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Card rest style={{ marginBottom: spacing.base }}>\r\n                <Text>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut pretium pretium tempor.</Text>\r\n            </Card>\r\n            <Card style={{ marginBottom: spacing.base }}>\r\n                <Text>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut pretium pretium tempor.</Text>\r\n            </Card>\r\n            <Card raised style={{ marginBottom: spacing.base }}>\r\n                <Text>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut pretium pretium tempor.</Text>\r\n            </Card>\r\n        </div>\r\n\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Card with no padding */\r\nimport React from 'react';\r\nimport { Card, Text } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Card noPadding>\r\n            <Text>Card content</Text>\r\n        </Card>\r\n    );\r\n}\r\n"},{"name":"Example3","description":"","code":"/* Raisable card on hover */\r\nimport React from 'react';\r\nimport { Card, Text } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Card raisable>\r\n            <Text>Card content</Text>\r\n        </Card>\r\n    );\r\n}\r\n"}]},{"name":"Check","description":"Checkbox component.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"input":{"type":{"name":"object"},"required":false,"description":"This is the object that redux-form passes to the component."},"value":{"type":{"name":"bool"},"required":false,"description":"Default value for the checkbox."},"onChange":{"type":{"name":"func"},"required":false,"description":"The function to call when the value of the checkbox changes."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable the checkbox."},"label":{"type":{"name":"node"},"required":false,"description":"Text to display next to the checkbox."},"right":{"type":{"name":"string"},"required":false,"description":"Aditional text to display floating to the right."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Checkbox component. */\r\nclass Check extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: props.input ? props.input.value : props.value\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.warn('DEPRECATED: The Check component will be removed soon. Use the Checkbox component instead.');\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        const { input, value } = props;\r\n        if (input && input.value != this.state.value)\r\n            this.setState({ value: input.value });\r\n        else if (value && this.state.value != value)\r\n            this.setState({ value });\r\n        else if(value != this.state.value)\r\n            this.setState({ value });\r\n    }\r\n\r\n    toggle() {\r\n        const { input, onChange, id, disabled } = this.props;\r\n        if (!disabled) {\r\n            let value = !this.state.value;\r\n            this.setState({ value });\r\n            if (input) input.onBlur(value);\r\n            if (onChange) onChange(value, id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { value } = this.state;\r\n        const { classes, input, label, right, disabled, id, className, style } = this.props;\r\n        let state = input && input.value ? input.value : value;\r\n        return (\r\n            <div\r\n                id={id}\r\n                className={`${classes.cont}${state ? ` ${classes.active}` : ''}${disabled ? ` ${classes.disabled}` : ''}${className ? ` ${className}` : ''}`}\r\n                tabIndex={0}\r\n                onClick={this.toggle}\r\n                style={style}>\r\n                <div className={classes.check} />\r\n                {label && <span className={classes.label}>{label}</span>}\r\n                {right && <span className={classes.right}>{right}</span>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCheck.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** This is the object that redux-form passes to the component. */\r\n    input: PropTypes.object,\r\n    /** Default value for the checkbox. */\r\n    value: PropTypes.bool,\r\n    /** The function to call when the value of the checkbox changes. */\r\n    onChange: PropTypes.func,\r\n    /** Disable the checkbox. */\r\n    disabled: PropTypes.bool,\r\n    /** Text to display next to the checkbox.  */\r\n    label: PropTypes.node,\r\n    /** Aditional text to display floating to the right. */\r\n    right: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Check;\r\n","examples":[{"name":"Example1","description":"","code":"/* Checkbox with default value */\r\nimport React from 'react';\r\nimport { Check } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div style={{display:'inline-block'}}>\r\n            <Check value />\r\n        </div>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Checkbox with label and text on the right */\r\nimport React from 'react';\r\nimport { Check } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div style={{display:'inline-block', width:300}}>\r\n            <Check label=\"Label\" right=\"Right text\" />\r\n        </div>\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Disabled checkbox */\r\nimport React from 'react';\r\nimport { Check } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <div style={{display:'inline-block'}}>\r\n            <Check label=\"Disabled\" disabled />\r\n        </div>\r\n    );\r\n}"}]},{"name":"Checkbox","description":"","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"value":{"type":{"name":"bool"},"required":false,"description":"Default value for the checkbox."},"undetermined":{"type":{"name":"bool"},"required":false,"description":"Used for partial check or when is unable to retrieve the value as absolute."},"onChange":{"type":{"name":"func"},"required":false,"description":"The function to call when the value of the checkbox changes."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable the checkbox."},"label":{"type":{"name":"node"},"required":false,"description":"Text to display next to the checkbox."},"right":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"Text to show on the right."},"textOverflow":{"type":{"name":"bool"},"required":false,"description":"Use this prop to overflow the text of the label, adding '...' and the end."},"trk":{"type":{"name":"string"},"required":false,"description":"Id for catching selected element for tracking."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Text from '../Text';\r\n\r\nclass Checkbox extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: props.value,\r\n            undetermined: props.undetermined\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        const { value } = props;\r\n        if (this.state.value != value)\r\n            this.setState({ value });\r\n    }\r\n\r\n    toggle() {\r\n        const { onChange, id, disabled } = this.props;\r\n        if (!disabled) {\r\n            let value = !this.state.value;\r\n            this.setState({ value, undetermined: false });\r\n            if (onChange) onChange(value, id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { value, undetermined } = this.state;\r\n        const { classes, label, right, disabled, textOverflow, id, className, style, trk } = this.props;\r\n        let iconClass = undetermined ? ` ${classes.undetermined}`: (value ? ` ${classes.active}` : '');\r\n        return (\r\n            <div\r\n                id={id}\r\n                className={`${classes.cont}${iconClass}${disabled ? ` ${classes.disabled}` : ''}${className ? ` ${className}` : ''}`}\r\n                onClick={this.toggle}\r\n                style={style}>\r\n                <div className={classes.check} id={trk}/>\r\n                {label && <Text tag=\"label\" className={`${classes.label}${textOverflow ? ` ${classes.overflow}` : ''}`}>{label}</Text>}\r\n                {right && <Text tag=\"label\" mid className={classes.right}>{right}</Text>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCheckbox.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    /** Default value for the checkbox. */\r\n    value: PropTypes.bool,\r\n    /** Used for partial check or when is unable to retrieve the value as absolute. */\r\n    undetermined: PropTypes.bool,\r\n    /** The function to call when the value of the checkbox changes. */\r\n    onChange: PropTypes.func,\r\n    /** Disable the checkbox. */\r\n    disabled: PropTypes.bool,\r\n    /** Text to display next to the checkbox.  */\r\n    label: PropTypes.node,\r\n    /** Text to show on the right. */\r\n    right: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    /** Use this prop to overflow the text of the label, adding '...' and the end. */\r\n    textOverflow: PropTypes.bool,\r\n    /** Id for catching selected element for tracking. */\r\n    trk: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Checkbox;\r\n","examples":[{"name":"Example1","description":"","code":"/* Checkbox with default value */\r\nimport React from 'react';\r\nimport { Checkbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div style={{display:'inline-block'}}>\r\n            <Checkbox label=\"Selected\" value />\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Disabled checkbox */\r\nimport React from 'react';\r\nimport { Checkbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div style={{display:'inline-block'}}>\r\n            <Checkbox label=\"Disabled\" disabled />\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example3","description":"","code":"/* Checkbox with text on the right */\r\nimport React from 'react';\r\nimport { Checkbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Checkbox label=\"Checkbox\" right=\"Right\" />\r\n    );\r\n}\r\n"},{"name":"Example4","description":"","code":"/* Text overflow */\r\nimport React from 'react';\r\nimport { Checkbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <div style={{display:'block'}}>\r\n            <Checkbox label=\"Bacon ipsum dolor amet landjaeger kevin tri-tip strip steak tenderloin, jerky brisket boudin fatback corned beef ball tip buffalo. Meatball rump boudin flank doner pancetta. Venison turkey capicola fatback alcatra. Jowl pork belly brisket pastrami turkey bresaola. Doner pork chicken biltong tail.\" textOverflow />\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example5","description":"","code":"/* Undetermined checkbox */\r\nimport React from 'react';\r\nimport { Checkbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example5() {\r\n    return (\r\n        <div style={{display:'inline-block'}}>\r\n            <Checkbox label=\"Undetermined\" undetermined />\r\n        </div>\r\n    );\r\n}\r\n"}]},{"name":"Column","description":"The Container component can receive different specifications for any of the breakpoint sizes. It needs to receive an object for the required size, and this object can specify a value for col (column), offset, push and pull.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"xs":{"type":{"name":"object"},"required":false,"description":"Specifications for a extra small window size."},"sm":{"type":{"name":"object"},"required":false,"description":"Specifications for a small window size."},"md":{"type":{"name":"object"},"required":false,"description":"Specifications for a medium window size."},"lg":{"type":{"name":"object"},"required":false,"description":"Specifications for a large window size."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst getClasses = function(size, data, classes) {\r\n    let string = '';\r\n    if (data.col) string+=' '+classes[`${size}${data.col}`];\r\n    if (data.offset) string+=' '+classes[`offset-${size}${data.offset}`];\r\n    if (data.push) string+=' '+classes[`push-${size}${data.push}`];\r\n    if (data.pull) string+=' '+classes[`pull-${size}${data.pull}`];\r\n    return string;\r\n};\r\n\r\n/** The Container component can receive different specifications for any of the breakpoint sizes. It needs to receive an object for the required size, and this object can specify a value for col (column), offset, push and pull. */\r\nconst Column = ({ classes, children, xs, sm, md, lg, id, className, style }) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        console.warn('DEPRECATED: The Column component will be removed soon. Use the Grid.Col subcomponent instead.');\r\n    }\r\n    return (\r\n        <div\r\n            className={`${classes.col}${xs ? getClasses('xs', xs, classes) : ''}${sm ? getClasses('sm', sm, classes) : ''}${md ? getClasses('md', md, classes) : ''}${lg ? getClasses('lg', lg, classes) : ''}${className ? ` ${className}` : ''}`}\r\n            id={id}\r\n            style={style}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nColumn.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Specifications for a extra small window size. */\r\n    xs: PropTypes.object,\r\n    /** Specifications for a small window size. */\r\n    sm: PropTypes.object,\r\n    /** Specifications for a medium window size. */\r\n    md: PropTypes.object,\r\n    /** Specifications for a large window size. */\r\n    lg: PropTypes.object,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Column;\r\n","examples":[{"name":"Example1","description":"","code":"/* Columns */\r\nimport React from 'react';\r\nimport { Container, Row, Column, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Container fluid style={{background:colors.grey3}}>\r\n            Container\r\n            <Row style={{background:colors.grey4}}>\r\n                Row\r\n            </Row>\r\n            <Row style={{background:colors.grey4}}>\r\n                <Column xs={{col:6}} style={{background:colors.grey5}}>Column</Column>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Different breakpoints */\r\nimport React from 'react';\r\nimport { Container, Row, Column, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Container fluid style={{background:colors.grey3}}>\r\n            Container\r\n            <Row style={{background:colors.grey4}}>\r\n                Row\r\n            </Row>\r\n            <Row style={{background:colors.grey4}}>\r\n                <Column xs={{col:12}} sm={{col:9}} md={{col:6}} lg={{col:4}} style={{background:colors.grey5}}>Column</Column>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Push, pull & offset */\r\nimport React from 'react';\r\nimport { Container, Row, Column, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Container fluid style={{background:colors.grey3}}>\r\n            Container\r\n            <Row style={{background:colors.grey4}}>\r\n                Row\r\n            </Row>\r\n            <Row style={{background:colors.grey4}}>\r\n                <Column xs={{col:3, offset:1}} style={{background:colors.grey5}}>Offset</Column>\r\n                <Column xs={{col:3, pull:1}} style={{background:colors.grey5}}>Pull</Column>\r\n                <Column xs={{col:3, push:1}} style={{background:colors.grey5}}>Push</Column>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}"}]},{"name":"Container","description":"The container should be used as the main content container. You can't use a container inside of another container, it will brake your grid.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"fluid":{"type":{"name":"bool"},"required":false,"description":"By default, the Container component has a specified width for any screen size. The fluid property allows the Container to extend to a 100% width."},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call on click. This is not the best practice, but is an option if you need to use it."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** The container should be used as the main content container. You can't use a container inside of another container, it will brake your grid. */\r\nconst Container = ({ classes, children, fluid, onClick, className, id, style }) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        console.warn('DEPRECATED: The Container component will be removed soon. Use the Grid component instead.');\r\n    }\r\n    return (\r\n        <div className={`${fluid ? classes.conFluid : classes.con}${className ? ` ${className}` : ''}`} style={style} id={id} onClick={onClick}>{children}</div>\r\n    );\r\n};\r\n\r\nContainer.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** By default, the Container component has a specified width for any screen size. The fluid property allows the Container to extend to a 100% width. */\r\n    fluid: PropTypes.bool,\r\n    /** Function to call on click. This is not the best practice, but is an option if you need to use it. */\r\n    onClick: PropTypes.func,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Container;\r\n","examples":[{"name":"Example1","description":"","code":"/* Container fluid */\r\nimport React from 'react';\r\nimport { Container, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Container fluid style={{background:colors.grey3}}>Container</Container>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Container with onClick */\r\nimport React from 'react';\r\nimport { Container, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Container style={{background:colors.grey3}} onClick={() => {console.log('Clicked!');}}>Container</Container>\r\n    );\r\n}"}]},{"name":"Droplist","description":"The Droplist component displays a list and filters it with the prop 'term'.\r\nThe value of 'term' es highlighted in every item that matches.\r\nThe array of objects needed to display the items needs a text and an id, and can contain a text that floats on the right. If you're going to group your items by category, you first need to set an array of groups, and each group must contain an array with the items.","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"items":{"type":{"name":"array"},"required":false,"description":"Array of objects with all the items to display."},"term":{"type":{"name":"string"},"required":false,"description":"Term to filter the items of the Droplist.","defaultValue":{"value":"''","computed":false}},"itemTextKey":{"type":{"name":"string"},"required":false,"description":"Key to find in the object, to use as the text.","defaultValue":{"value":"'text'","computed":false}},"itemTextRightKey":{"type":{"name":"string"},"required":false,"description":"Key to find in the object, to use as the text that floats on the right.","defaultValue":{"value":"'textRight'","computed":false}},"itemIdKey":{"type":{"name":"string"},"required":false,"description":"Key to find in the object, to use as the id.","defaultValue":{"value":"'id'","computed":false}},"groups":{"type":{"name":"bool"},"required":false,"description":"Use this if the items are grouped in different categories.","defaultValue":{"value":"false","computed":false}},"groupNameKey":{"type":{"name":"string"},"required":false,"description":"Key to find in the object to use as the name of the group.","defaultValue":{"value":"'text'","computed":false}},"groupIdKey":{"type":{"name":"string"},"required":false,"description":"Key to find in the object to use as the id of the group.","defaultValue":{"value":"'id'","computed":false}},"groupItemsKey":{"type":{"name":"string"},"required":false,"description":"Key to find in the object where you can find the array of items.","defaultValue":{"value":"'items'","computed":false}},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call when an item is clicked."},"onMouseDown":{"type":{"name":"func"},"required":false,"description":"Function to call when mouse is pressed down on an item."},"onMouseUp":{"type":{"name":"func"},"required":false,"description":"Function to call when mouse is pressed up on an item."},"onEnter":{"type":{"name":"func"},"required":false,"description":"Function to call when the Enter key is pressed down."},"filter":{"type":{"name":"bool"},"required":false,"description":"Filters given items if they match with the term.","defaultValue":{"value":"true","computed":false}},"isOnFocus":{"type":{"name":"bool"},"required":false,"description":"With this parameter the Droplist will have navigation with up and down keys."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport autobind from 'class-autobind';\r\nimport isEqual from 'lodash/isEqual';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n\r\nimport Text from '../Text';\r\n\r\nimport { compareText, separateText } from './functions';\r\n\r\nconst arrowDown = 40;\r\nconst arrowUp = 38;\r\nconst enter = 13;\r\n\r\n/**\r\n* The Droplist component displays a list and filters it with the prop 'term'.\r\n* The value of 'term' es highlighted in every item that matches.\r\n* The array of objects needed to display the items needs a text and an id, and can contain a text that floats on the right. If you're going to group your items by category, you first need to set an array of groups, and each group must contain an array with the items.\r\n*/\r\nclass Droplist extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        autobind(this);\r\n        this.state = {\r\n            currentItem: -1,\r\n            currentGroup: -1,\r\n            items: props.items\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { items, filter, term } = this.props;\r\n        window.addEventListener('keydown', this.onKeyDown);\r\n        if (filter) this.filterItems(items, term);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        if (props.term !== this.props.term || !isEqual(props.items, this.props.items)) {\r\n            this.setState({ currentItem: -1 });\r\n            if (props.filter) this.filterItems(props.items, props.term);\r\n            else this.setState({ items: props.items });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.onKeyDown);\r\n    }\r\n\r\n    onKeyDown(e) {\r\n        const { items } = this.state;\r\n        const { isOnFocus, groups } = this.props;\r\n        if (isOnFocus) {\r\n                if (e.which === arrowUp || e.which === arrowDown) {\r\n                    e.preventDefault();\r\n                    if (groups) {\r\n                        if (e.which === arrowDown) {\r\n                            this.moveGroupDown();\r\n                        } else {\r\n                            this.moveGroupUp();\r\n                        }\r\n                    } else {\r\n                        if (e.which === arrowDown) {\r\n                            this.moveDown(items);\r\n                        } else {\r\n                            this.moveUp(items);\r\n                        }\r\n                    }\r\n                }\r\n            if (e.which === enter) {\r\n                this.onEnter();\r\n            }\r\n        }\r\n    }\r\n\r\n    onEnter() {\r\n        const { currentItem, currentGroup, items } = this.state;\r\n        const { onEnter, groups, groupItemsKey } = this.props;\r\n        if (currentItem > -1) {\r\n            if (groups) {\r\n                const selectedGroup = items.find((group, i) => i === currentGroup);\r\n                const selectedItem = selectedGroup[groupItemsKey].find((item, i) => i === currentItem);\r\n                this.setState({ currentGroup: -1, currentItem: -1 });\r\n                if (onEnter) onEnter(selectedItem);\r\n            } else {\r\n                const selectedItem = items.find((item, i) => i === currentItem);\r\n                this.setState({ currentItem: -1 });\r\n                if (onEnter) onEnter(selectedItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    moveGroupDown() {\r\n        const { currentItem, currentGroup, items } = this.state;\r\n        const { groupItemsKey } = this.props;\r\n        if (currentGroup === -1) {\r\n            this.moveToNextGroup();\r\n        } else {\r\n            const groupItems = items[currentGroup][groupItemsKey];\r\n            if (currentItem === groupItems.length-1) {\r\n                this.moveToNextGroup();\r\n            } else {\r\n                this.moveDown(groupItems);\r\n            }\r\n        }\r\n    }\r\n\r\n    moveGroupUp() {\r\n        const { currentItem, currentGroup, items} = this.state;\r\n        const { groupItemsKey } = this.props;\r\n        if (currentGroup === -1) {\r\n            this.moveToPreviousGroup();\r\n        } else {\r\n            const groupItems = items[currentGroup][groupItemsKey];\r\n            if (currentItem === 0) {\r\n                this.moveToPreviousGroup();\r\n            } else {\r\n                this.moveUp(groupItems);\r\n            }\r\n        }\r\n    }\r\n\r\n    moveToNextGroup() {\r\n        const { currentGroup, items } = this.state;\r\n        const { groupItemsKey } = this.props;\r\n        if (currentGroup === items.length-1) {\r\n            this.setState({ currentGroup: -1, currentItem: -1 });\r\n        } else {\r\n            this.setState({ currentGroup: currentGroup+1 }, () => {\r\n                const { currentGroup } = this.state;\r\n                if (items[currentGroup][groupItemsKey] && items[currentGroup][groupItemsKey].length) {\r\n                    this.setState({ currentItem: 0 });\r\n                } else {\r\n                    this.moveToNextGroup();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    moveToPreviousGroup() {\r\n        const { currentGroup, items } = this.state;\r\n        const { groupItemsKey } = this.props;\r\n        if (currentGroup === -1) {\r\n            this.setState({ currentGroup: items.length-1 }, () => {\r\n                const { currentGroup } = this.state;\r\n                if (items[currentGroup][groupItemsKey] && items[currentGroup][groupItemsKey].length) {\r\n                    this.setState({ currentItem: items[currentGroup][groupItemsKey].length-1 });\r\n                } else {\r\n                    this.moveToPreviousGroup();\r\n                }\r\n            });\r\n        } else if (currentGroup === 0) {\r\n            this.setState({ currentGroup: -1, currentItem: -1 });\r\n        } else {\r\n            this.setState({ currentGroup: currentGroup-1 }, () => {\r\n                const { currentGroup } = this.state;\r\n                if (items[currentGroup][groupItemsKey] && items[currentGroup][groupItemsKey].length) {\r\n                    this.setState({ currentItem: items[currentGroup][groupItemsKey].length-1 });\r\n                } else {\r\n                    this.moveToPreviousGroup();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    moveDown(items) {\r\n        const { currentItem } = this.state;\r\n        if (currentItem === items.length-1) {\r\n            this.setState({ currentItem: -1 });\r\n        } else {\r\n            this.setState({ currentItem: currentItem+1 });\r\n        }\r\n    }\r\n\r\n    moveUp() {\r\n        const { currentItem, items } = this.state;\r\n        if (currentItem === -1) {\r\n            this.setState({ currentItem: items.length-1 });\r\n        } else {\r\n            this.setState({ currentItem: currentItem-1 });\r\n        }\r\n    }\r\n\r\n    onClick(item, e) {\r\n        const { onClick } = this.props;\r\n        e.stopPropagation();\r\n        this.setState({ currentGroup: -1, currentItem: -1 });\r\n        if (onClick) onClick(item);\r\n    }\r\n\r\n    onMouseDown(item, e) {\r\n        const { onMouseDown } = this.props;\r\n        e.stopPropagation();\r\n        this.setState({ currentGroup: -1, currentItem: -1 });\r\n        if (onMouseDown) onMouseDown(item);\r\n    }\r\n\r\n    onMouseUp(item, e) {\r\n        const { onMouseUp } = this.props;\r\n        e.stopPropagation();\r\n        this.setState({ currentGroup: -1, currentItem: -1 });\r\n        if (onMouseUp) onMouseUp(item);\r\n    }\r\n\r\n    filterItems(items, term) {\r\n        const { itemTextKey, groupItemsKey, groups } = this.props;\r\n        if (groups) {\r\n            let newItems = cloneDeep(items);\r\n            newItems = items.map(group => {\r\n                group[groupItemsKey] = group[groupItemsKey].filter(item => (\r\n                    compareText(item[itemTextKey], term) >= 0\r\n                ));\r\n                return group;\r\n            });\r\n            newItems = newItems.filter(group =>\r\n                group[groupItemsKey].length > 0\r\n            );\r\n            this.setState({ items: newItems });\r\n        } else {\r\n            const newItems = items.filter(item => (\r\n                compareText(item[itemTextKey], term) >= 0\r\n            ));\r\n            this.setState({ items: newItems });\r\n        }\r\n    }\r\n\r\n    renderList(items, selectedGroup) {\r\n        const { currentItem } = this.state;\r\n        const { classes, itemIdKey, itemTextKey, itemTextRightKey, term } = this.props;\r\n        const itemsDOM = items.map((item, i) => {\r\n            let index = compareText(item[itemTextKey], term);\r\n            if (index >= 0) {\r\n                let text = separateText(item[itemTextKey], index, term);\r\n                return (\r\n                    <div\r\n                        key={item[itemIdKey]}\r\n                        onClick={(e) => this.onClick(item, e)}\r\n                        onMouseDown={(e) => this.onMouseDown(item, e)}\r\n                        onMouseUp={(e) => this.onMouseUp(item, e)}\r\n                        className={`${classes.item}${selectedGroup && currentItem === i ? ` ${classes.onFocus}` : ''}`}>\r\n                        <Text>\r\n                            {text[0].length ? text[0] : ''}\r\n                            <Text tag=\"b\" strong>{text[1].length ? text[1] : ''}</Text>\r\n                            {text[2].length ? text[2] : ''}\r\n                        </Text>\r\n                        {item[itemTextRightKey] && <span className={classes.right}><Text tag=\"span\" low>{item[itemTextRightKey]}</Text></span>}\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div\r\n                        key={item[itemIdKey]}\r\n                        onClick={(e) => this.onClick(item, e)}\r\n                        onMouseDown={(e) => this.onMouseDown(item, e)}\r\n                        onMouseUp={(e) => this.onMouseUp(item, e)}\r\n                        className={`${classes.item}${selectedGroup && currentItem === i ? ` ${classes.onFocus}` : ''}`}>\r\n                        <Text>{item[itemTextKey]}</Text>\r\n                        {item[itemTextRightKey] && <span className={classes.right}><Text tag=\"span\" low>{item[itemTextRightKey]}</Text></span>}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n        });\r\n        return itemsDOM;\r\n    }\r\n\r\n    render() {\r\n        const { items, currentGroup } = this.state;\r\n        const { classes, className, style, id, groups, groupNameKey, groupIdKey, groupItemsKey } = this.props;\r\n        return (\r\n            <div className={`${classes.block}${className ? ` ${className}` : ''}`} id={id} style={style}>\r\n                {\r\n                    groups ? (\r\n                        items.map((group, index) => {\r\n                            return (\r\n                                <div key={group[groupIdKey]}>\r\n                                    <Text small mid className={classes.group}>{group[groupNameKey].toUpperCase()}</Text>\r\n                                    {\r\n                                        this.renderList(group[groupItemsKey], currentGroup === index)\r\n                                    }\r\n                                </div>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        this.renderList(items, true)\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDroplist.defaultProps = {\r\n    groups: false,\r\n    groupNameKey:'text',\r\n    groupIdKey:'id',\r\n    groupItemsKey:'items',\r\n    itemTextKey:'text',\r\n    itemTextRightKey:'textRight',\r\n    itemIdKey:'id',\r\n    term:'',\r\n    filter: true\r\n};\r\n\r\nDroplist.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    /** Array of objects with all the items to display. */\r\n    items: PropTypes.array,\r\n    /** Term to filter the items of the Droplist. */\r\n    term: PropTypes.string,\r\n    /** Key to find in the object, to use as the text. */\r\n    itemTextKey: PropTypes.string,\r\n    /** Key to find in the object, to use as the text that floats on the right. */\r\n    itemTextRightKey: PropTypes.string,\r\n    /** Key to find in the object, to use as the id. */\r\n    itemIdKey: PropTypes.string,\r\n    /** Use this if the items are grouped in different categories. */\r\n    groups: PropTypes.bool,\r\n    /** Key to find in the object to use as the name of the group. */\r\n    groupNameKey: PropTypes.string,\r\n    /** Key to find in the object to use as the id of the group. */\r\n    groupIdKey: PropTypes.string,\r\n    /** Key to find in the object where you can find the array of items. */\r\n    groupItemsKey: PropTypes.string,\r\n    /** Function to call when an item is clicked. */\r\n    onClick: PropTypes.func,\r\n    /** Function to call when mouse is pressed down on an item. */\r\n    onMouseDown: PropTypes.func,\r\n    /** Function to call when mouse is pressed up on an item. */\r\n    onMouseUp: PropTypes.func,\r\n    /** Function to call when the Enter key is pressed down. */\r\n    onEnter: PropTypes.func,\r\n    /** Filters given items if they match with the term. */\r\n    filter: PropTypes.bool,\r\n    /** With this parameter the Droplist will have navigation with up and down keys. */\r\n    isOnFocus: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n};\r\n\r\nexport default Droplist;\r\n","examples":[{"name":"Example1","description":"","code":"/* List items */\r\nimport React from 'react';\r\nimport { Droplist } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const items = [\r\n        { name: 'Item 1', secondary: '(10)' },\r\n        { name: 'Item 2', secondary: '(5)' },\r\n        { name: 'Item 3', secondary: '(30)' }\r\n    ];\r\n    return (\r\n        <Droplist\r\n            items={items}\r\n            itemIdKey=\"name\"\r\n            itemTextKey=\"name\"\r\n            itemTextRightKey=\"secondary\"\r\n        />\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* List groups */\r\nimport React from 'react';\r\nimport { Droplist } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const items = [\r\n        {\r\n            group:'Group 1',\r\n            items: [\r\n                { name: 'Item 1', secondary: '(10)' },\r\n                { name: 'Item 2', secondary: '(5)' },\r\n                { name: 'Item 3', secondary: '(30)' }\r\n            ]\r\n        },\r\n        {\r\n            group:'Group 2',\r\n            items: [\r\n                { name: 'Item 4', secondary: '(25)' }\r\n            ]\r\n        }\r\n    ];\r\n    return (\r\n        <Droplist\r\n            items={items}\r\n            groups\r\n            groupIdKey=\"group\"\r\n            groupNameKey=\"group\"\r\n            groupItemsKey=\"items\"\r\n            itemIdKey=\"name\"\r\n            itemTextKey=\"name\"\r\n            itemTextRightKey=\"secondary\"\r\n            term=\"2\"\r\n        />\r\n    );\r\n}\r\n"},{"name":"Example3","description":"","code":"/* Return object to console on click */\r\nimport React from 'react';\r\nimport { Droplist } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    const items = [\r\n        { name: 'Item 1', secondary: '(10)', someData:'1234567890' },\r\n    ];\r\n    return (\r\n        <Droplist\r\n            items={items}\r\n            itemIdKey=\"name\"\r\n            itemTextKey=\"name\"\r\n            itemTextRightKey=\"secondary\"\r\n            onClick={(item) => {console.log(item);}}\r\n        />\r\n    );\r\n}"}]},{"name":"Flatter","description":"","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""},"htmlText":{"type":{"name":"string"},"required":true,"description":"Text of the Flatter. Must be a valid HTML Code"}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport getComponents from './helper';\r\n\r\n/* Flatter translates plain html code to occ-atomic components, also performs the code cleansing & removes unallowed html tags */\r\nconst Flatter = ({ id, className, style, htmlText }) => (\r\n    <div id={id} className={className} style={style}>\r\n        {getComponents(htmlText)}\r\n    </div>\r\n);\r\n\r\nFlatter.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n    /** Text of the Flatter. Must be a valid HTML Code */\r\n    htmlText: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Flatter;\r\n","examples":[{"name":"Example1","description":"","code":"/* Flatter with clean html and all allowed tags */\r\nimport React from 'react';\r\nimport { Flatter } from '@occmundial/occ-atomic';\r\n\r\nconst htmlTextExample =\r\n`<h4>H4 tag text</h4>\r\n<p>P tag text</p>\r\n<p><strong>STRONG tag text</strong></p>\r\n<p><em>EM tag text</em></p>\r\n<p><strong><em>EM tag inside a strong tag text</em></strong></p>\r\n<ul>\r\n<li>LI tag # 1</li>\r\n<li>LI tag # 2</li>\r\n<li>LI tag # 3 <strong><em>EM tag inside a strong tag text</em></strong></li>\r\n<li>LI tag # 4 <em>EM tag text</em> <strong>STRONG tag text</strong></li>\r\n<li>LI tag # 5 <p>Text inside p</p></li>\r\n<li>LI tag # 6 <p>Text before BR<br> Text after BR</p> inside LI</li>\r\n<li>\r\n<ul>\r\n<li>LI tag # 8 hierarchy 2 inside another li tag</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p>Text before BR<br>Text after BR</p>`;\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Flatter htmlText={htmlTextExample} />\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Flatter tags with class */\r\nimport React from 'react';\r\nimport { Flatter } from '@occmundial/occ-atomic';\r\n\r\nconst htmlTextExample = `<p class=\"ql-align-center\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. <strong>Donec sed scelerisque risus, ut efficitur ante.</strong></p>`;\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div>\r\n            <Flatter htmlText={htmlTextExample} />\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example3","description":"","code":"/* Flatter tags with inline style */\r\nimport React from 'react';\r\nimport { Flatter } from '@occmundial/occ-atomic';\r\n\r\nconst htmlTextExample = `<p style=\"text-align: justify;margin: 0 0 15px;\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. <strong>Donec sed scelerisque risus, ut efficitur ante.</strong></p>`;;\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <div>\r\n            <Flatter htmlText={htmlTextExample} />\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example4","description":"","code":"/* Flatter tags with src & href */\r\nimport React from 'react';\r\nimport { Flatter } from '@occmundial/occ-atomic';\r\n\r\nconst htmlTextExample =\r\n`<img src=\"smiley.gif\" alt=\"Smiley face\" height=\"42\" width=\"42\"><p style=\"text-align: justify;margin: 0 0 15px;\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. <strong>Donec sed scelerisque risus, ut efficitur ante.</strong></p>`;;\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <div>\r\n            <Flatter htmlText={htmlTextExample} />\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example5","description":"","code":"/* Flatter unallowed tags */\r\nimport React from 'react';\r\nimport { Flatter } from '@occmundial/occ-atomic';\r\n\r\nconst htmlTextExample =\r\n`<!--comment--><table><tr><td><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit. </code></td></tr></table><strong><a href=\"https://www.occ.com.mx/\">Donec sed scelerisque risus, ut efficitur ante.</a></strong>`;\r\n\r\nexport default function Example5() {\r\n    return (\r\n        <div>\r\n            <Flatter htmlText={htmlTextExample} />\r\n        </div>\r\n    );\r\n}\r\n"}]},{"name":"Flexbox","description":"The Flexbox component uses the grid system of flexbox.","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"display":{"type":{"name":"enum","value":[{"value":"'flex'","computed":false},{"value":"'inline-flex'","computed":false}]},"required":false,"description":"Use the value 'flex' or 'inline-flex' to give your container the flex properties. If you're using the Flexbox component just as a child of another Flexbox, then don't specify any value here."},"direction":{"type":{"name":"enum","value":[{"value":"'col'","computed":false},{"value":"'row'","computed":false},{"value":"'colR'","computed":false},{"value":"'rowR'","computed":false}]},"required":false,"description":"The direction property specifies in which direction the items will be aligned. The options are 'col' (column), 'row', 'colR' (column reverse) and 'rowR' (row reverse)."},"wrap":{"type":{"name":"enum","value":[{"value":"'wrap'","computed":false},{"value":"'noWrap'","computed":false},{"value":"'wrapR'","computed":false}]},"required":false,"description":"The wrap property specifies if the content will cut to a new line or not. The options are 'wrap', 'noWrap' and 'wrapR' (wrap reverse)."},"justifyContent":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'end'","computed":false},{"value":"'center'","computed":false},{"value":"'between'","computed":false},{"value":"'around'","computed":false},{"value":"'evenly'","computed":false}]},"required":false,"description":"justifyContent is the way the items are going to be aligned in the column or row (according to the value given in 'direction'). The options are 'start' (flex-start), 'end' (flex-end), 'center', 'between' (space-between), 'around' (space-around) and 'evenly' (space-evenly)."},"alignItems":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'end'","computed":false},{"value":"'center'","computed":false},{"value":"'base'","computed":false},{"value":"'stretch'","computed":false}]},"required":false,"description":"alignItems determines how the items will be aligned in the specified direction axis. The options are 'start' (flex-start), 'end' (flex-end), 'center', 'baseline' and 'stretch'."},"alignContent":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'end'","computed":false},{"value":"'center'","computed":false},{"value":"'between'","computed":false},{"value":"'around'","computed":false},{"value":"'stretch'","computed":false}]},"required":false,"description":"This property has effect when there's more than one line of items. It determines how this items are going to be aligned."},"flex":{"type":{"name":"string"},"required":false,"description":"Use this property if your Flexbox is a child of another Flexbox and you want to specify its flex properties (flex-grow, flex-shrink and flex-basis)."},"order":{"type":{"name":"number"},"required":false,"description":"Use the order property for a Flexbox inside of another Flexbox to specify its order."},"alignSelf":{"type":{"name":"enum","value":[{"value":"'auto'","computed":false},{"value":"'start'","computed":false},{"value":"'end'","computed":false},{"value":"'center'","computed":false},{"value":"'base'","computed":false},{"value":"'stretch'","computed":false}]},"required":false,"description":"Use it in the same case as flex and order. The alignSelf property allows you to override the value of alignItems."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** The Flexbox component uses the grid system of flexbox. */\r\nclass Flexbox extends React.Component {\r\n\r\n    render() {\r\n        const { classes, children, display, direction, wrap, justifyContent, alignItems, alignContent, order, flex, alignSelf, id, className } = this.props;\r\n        let { style } = this.props;\r\n        let displayClass = display ? display == 'inline-flex' ? classes.iFlex : classes.flex : '';\r\n        if (!style)\r\n            style = {};\r\n        if (order)\r\n            style.order = order;\r\n        if (flex)\r\n            style.flex = flex;\r\n        return (\r\n            <div\r\n                className={`${displayClass}${(display && direction) ? ` ${classes[direction]}` : ''}${(display && wrap) ? ` ${classes[wrap]}` : ''}${(display && justifyContent) ? ` ${classes[`j${justifyContent}`]}` : ''}${(display && alignItems) ? ` ${classes[`a${alignItems}`]}` : ''}${(display && alignContent) ? ` ${classes[`c${alignContent}`]}` : ''}${(alignSelf) ? ` ${classes[`s${alignSelf}`]}` : ''}${className ? ` ${className}` : ''}`}\r\n                id={id}\r\n                style={style}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFlexbox.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    children: PropTypes.node,\r\n    /** Use the value 'flex' or 'inline-flex' to give your container the flex properties. If you're using the Flexbox component just as a child of another Flexbox, then don't specify any value here. */\r\n    display: PropTypes.oneOf([\r\n        'flex', 'inline-flex'\r\n    ]),\r\n    /** The direction property specifies in which direction the items will be aligned. The options are 'col' (column), 'row', 'colR' (column reverse) and 'rowR' (row reverse). */\r\n    direction: PropTypes.oneOf([\r\n        'col', 'row', 'colR', 'rowR'\r\n    ]),\r\n    /** The wrap property specifies if the content will cut to a new line or not. The options are 'wrap', 'noWrap' and 'wrapR' (wrap reverse). */\r\n    wrap: PropTypes.oneOf([\r\n        'wrap', 'noWrap', 'wrapR'\r\n    ]),\r\n    /** justifyContent is the way the items are going to be aligned in the column or row (according to the value given in 'direction'). The options are 'start' (flex-start), 'end' (flex-end), 'center', 'between' (space-between), 'around' (space-around) and 'evenly' (space-evenly). */\r\n    justifyContent: PropTypes.oneOf([\r\n        'start', 'end', 'center', 'between', 'around', 'evenly'\r\n    ]),\r\n    /** alignItems determines how the items will be aligned in the specified direction axis. The options are 'start' (flex-start), 'end' (flex-end), 'center', 'baseline' and 'stretch'. */\r\n    alignItems: PropTypes.oneOf([\r\n        'start', 'end', 'center', 'base', 'stretch'\r\n    ]),\r\n    /** This property has effect when there's more than one line of items. It determines how this items are going to be aligned. */\r\n    alignContent: PropTypes.oneOf([\r\n        'start', 'end', 'center', 'between', 'around', 'stretch'\r\n    ]),\r\n    /** Use this property if your Flexbox is a child of another Flexbox and you want to specify its flex properties (flex-grow, flex-shrink and flex-basis). */\r\n    flex: PropTypes.string,\r\n    /** Use the order property for a Flexbox inside of another Flexbox to specify its order. */\r\n    order: PropTypes.number,\r\n    /** Use it in the same case as flex and order. The alignSelf property allows you to override the value of alignItems. */\r\n    alignSelf: PropTypes.oneOf([\r\n        'auto', 'start', 'end', 'center', 'base', 'stretch'\r\n    ]),\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Flexbox;\r\n","examples":[{"name":"Example1","description":"","code":"/* Row and Column */\r\nimport React from 'react';\r\nimport { Flexbox, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Flexbox display=\"inline-flex\" direction=\"row\" style={{background:colors.grey3, width:200, height:100}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n            <Flexbox display=\"inline-flex\" direction=\"col\" style={{background:colors.grey3, width:100, height:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Wrap */\r\nimport React from 'react';\r\nimport { Flexbox, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div>\r\n            <Flexbox display=\"inline-flex\" wrap=\"wrap\" style={{background:colors.grey3, width:200, height:100, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n            <Flexbox display=\"inline-flex\" wrap=\"noWrap\" style={{background:colors.grey3, width:200, height:100, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Justify content */\r\nimport React from 'react';\r\nimport { Flexbox, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <div>\r\n            <Flexbox display=\"flex\" justifyContent=\"start\" style={{background:colors.grey3, width:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" justifyContent=\"end\" style={{background:colors.grey3, width:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" justifyContent=\"center\" style={{background:colors.grey3, width:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" justifyContent=\"between\" style={{background:colors.grey3, width:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" justifyContent=\"around\" style={{background:colors.grey3, width:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" justifyContent=\"evenly\" style={{background:colors.grey3, width:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n}"},{"name":"Example4","description":"","code":"/* Align items */\r\nimport React from 'react';\r\nimport { Flexbox, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <div>\r\n            <Flexbox display=\"flex\" alignItems=\"start\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" alignItems=\"end\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" alignItems=\"center\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" alignItems=\"stretch\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" alignItems=\"base\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n}"},{"name":"Example5","description":"","code":"/* Align content */\r\nimport React from 'react';\r\nimport { Flexbox, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example5() {\r\n    return (\r\n        <div>\r\n            <Flexbox display=\"flex\" wrap=\"wrap\" alignContent=\"start\" style={{background:colors.grey3, width:125, height:125, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" wrap=\"wrap\" alignContent=\"end\" style={{background:colors.grey3, width:125, height:125, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" wrap=\"wrap\" alignContent=\"center\" style={{background:colors.grey3, width:125, height:125, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" wrap=\"wrap\" alignContent=\"between\" style={{background:colors.grey3, width:125, height:125, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" wrap=\"wrap\" alignContent=\"around\" style={{background:colors.grey3, width:125, height:125, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n}"},{"name":"Example6","description":"","code":"/* Child Flexbox */\r\nimport React from 'react';\r\nimport { Flexbox, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example6() {\r\n    return (\r\n        <div>\r\n            <Flexbox display=\"flex\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <Flexbox order={2} style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</Flexbox>\r\n                <Flexbox order={3} style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</Flexbox>\r\n                <Flexbox order={1} style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</Flexbox>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <Flexbox flex=\"1\" style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</Flexbox>\r\n                <Flexbox style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</Flexbox>\r\n                <Flexbox style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</Flexbox>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" alignItems=\"center\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <Flexbox alignSelf=\"end\" style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</Flexbox>\r\n                <Flexbox style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</Flexbox>\r\n                <Flexbox style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</Flexbox>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n}"}]},{"name":"Footer","description":"Customisable footer component. This component can receive an array of columns. Those columns can contain an array of lists, and those lists can contain a title and and array of items. The items are objects that must define a type (one of 'link,', 'icon' or 'cursom').\r\n    It can also receive a copy string, to show the copyright data, and an array of links to show above it.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"winWidth":{"type":{"name":"number"},"required":false,"description":"This prop is sended by the WindowSize HOC. You can't use it."},"columns":{"type":{"name":"custom","raw":"columnPropTypes"},"required":false,"description":"Array of the columns to render. Each column will render an array of lists. Those lists are arrays of objects that must define a type ('link', 'icon, 'custom) and properties related to that type of element.","defaultValue":{"value":"[]","computed":false}},"bottomLinks":{"type":{"name":"array"},"required":false,"description":"Array of links to render at the bottom.","defaultValue":{"value":"[]","computed":false}},"customBottom":{"type":{"name":"node"},"required":false,"description":"Custom component to render on the bottom left."},"copyText":{"type":{"name":"union","value":[{"name":"string"},{"name":"node"}]},"required":false,"description":"String or component to show as the copyright label."},"aux":{"type":{"name":"shape","value":{"text":{"name":"string","required":false},"icon":{"name":"string","required":false},"href":{"name":"string","required":false},"target":{"name":"string","required":false},"iconRight":{"name":"string","required":false}}},"required":false,"description":"Object to implement an auxiliar button on the bottom right."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Grid from '../Grid';\r\nimport WindowSize from '../WindowSize';\r\nimport Flexbox from '../Flexbox';\r\nimport grid from '../subatomic/grid';\r\nimport List from './List';\r\nimport Text from '../Text';\r\nimport Button from '../Button';\r\n\r\nconst itemTypes = {\r\n\tlink: 'link',\r\n\ticon: 'icon',\r\n\tcustom: 'custom'\r\n};\r\n\r\n/** Customisable footer component. This component can receive an array of columns. Those columns can contain an array of lists, and those lists can contain a title and and array of items. The items are objects that must define a type (one of 'link,', 'icon' or 'cursom').\r\n\tIt can also receive a copy string, to show the copyright data, and an array of links to show above it.\r\n*/\r\nconst Footer = ({\r\n\tclasses,\r\n\tcolumns,\r\n\twinWidth,\r\n\tbottomLinks,\r\n\tcopyText,\r\n\taux\r\n}) => {\r\n\tconst { text, icon, href, target, iconRight } = aux;\r\n\tconst isMobile = winWidth < grid.sm;\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={\r\n\t\t\t\tcolumns.length > 0 ? classes.footer : classes.footerWithoutColumns\r\n\t\t\t}\r\n\t\t>\r\n\t\t\t<Grid fluid={winWidth < grid.xl}>\r\n\t\t\t\t<Grid.Row>\r\n\t\t\t\t\t<Flexbox\r\n\t\t\t\t\t\tdisplay=\"flex\"\r\n\t\t\t\t\t\tdirection={isMobile ? 'col' : 'row'}\r\n\t\t\t\t\t\tclassName={classes.column}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{columns.map((column, index) => (\r\n\t\t\t\t\t\t\t<Flexbox key={index} flex=\"1\">\r\n\t\t\t\t\t\t\t\t{column.map(list => (\r\n\t\t\t\t\t\t\t\t\t<List list={list} isMobile={isMobile} key={list.key} />\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</Flexbox>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Flexbox>\r\n\t\t\t\t\t<div className={classes.footerBottom}>\r\n\t\t\t\t\t\t<Flexbox\r\n\t\t\t\t\t\t\tdisplay=\"flex\"\r\n\t\t\t\t\t\t\talignItems=\"start\"\r\n\t\t\t\t\t\t\tclassName={classes.bottomWrap}\r\n\t\t\t\t\t\t\tdirection={isMobile ? 'col' : 'row'}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Flexbox flex=\"1\">\r\n\t\t\t\t\t\t\t\t<Text small mid bottomTiny tag=\"div\">\r\n\t\t\t\t\t\t\t\t\t{bottomLinks.map(item => (\r\n\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\tisMobile\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t? classes.mobileListElement\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t: classes.listElement\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={item.key}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Text tag=\"label\" small mid>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.link}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\thref={item.href}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget={item.target}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trel={item.rel}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{item.text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t\t\t{copyText && (\r\n\t\t\t\t\t\t\t\t\t<Text small mid>\r\n\t\t\t\t\t\t\t\t\t\t{copyText}\r\n\t\t\t\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</Flexbox>\r\n\t\t\t\t\t\t\t{aux && (\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\thref={href}\r\n\t\t\t\t\t\t\t\t\ttarget={target}\r\n\t\t\t\t\t\t\t\t\ticon={icon}\r\n\t\t\t\t\t\t\t\t\ticonRight={iconRight}\r\n\t\t\t\t\t\t\t\t\tsize=\"md\"\r\n\t\t\t\t\t\t\t\t\ttheme=\"ghostPink\"\r\n\t\t\t\t\t\t\t\t\tclassName={isMobile ? classes.buttonMobile : ''}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{text}\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Flexbox>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Grid.Row>\r\n\t\t\t</Grid>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst columnPropTypes = PropTypes.arrayOf(\r\n\tPropTypes.arrayOf(\r\n\t\tPropTypes.shape({\r\n\t\t\tkey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\t\t\ttitle: PropTypes.string,\r\n\t\t\tcollapse: PropTypes.bool,\r\n\t\t\titems: PropTypes.arrayOf(\r\n\t\t\t\tPropTypes.shape({\r\n\t\t\t\t\tkey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\t\t\t\t\ttype: PropTypes.oneOf([\r\n\t\t\t\t\t\titemTypes.link,\r\n\t\t\t\t\t\titemTypes.icon,\r\n\t\t\t\t\t\titemTypes.custom\r\n\t\t\t\t\t]),\r\n\t\t\t\t\ttext: PropTypes.string,\r\n\t\t\t\t\tonClick: PropTypes.func,\r\n\t\t\t\t\thref: PropTypes.string,\r\n\t\t\t\t\ttarget: PropTypes.string,\r\n\t\t\t\t\trel: PropTypes.string,\r\n\t\t\t\t\ttitle: PropTypes.string,\r\n\t\t\t\t\ticonName: PropTypes.string,\r\n\t\t\t\t\tcustom: PropTypes.node\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t})\r\n\t)\r\n);\r\n\r\nFooter.propTypes = {\r\n\tclasses: PropTypes.object,\r\n\t/** This prop is sended by the WindowSize HOC. You can't use it. */\r\n\twinWidth: PropTypes.number,\r\n\t/** Array of the columns to render. Each column will render an array of lists. Those lists are arrays of objects that must define a type ('link', 'icon, 'custom) and properties related to that type of element. */\r\n\tcolumns: columnPropTypes,\r\n\t/** Array of links to render at the bottom. */\r\n\tbottomLinks: PropTypes.array,\r\n\t/** Custom component to render on the bottom left. */\r\n\tcustomBottom: PropTypes.node,\r\n\t/** String or component to show as the copyright label. */\r\n\tcopyText: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.node\r\n\t]),\r\n\t/** Object to implement an auxiliar button on the bottom right. */\r\n\taux: PropTypes.shape({\r\n\t\ttext: PropTypes.string,\r\n\t\ticon: PropTypes.string,\r\n\t\thref: PropTypes.string,\r\n\t\ttarget: PropTypes.string,\r\n\t\ticonRight: PropTypes.string\r\n\t})\r\n};\r\n\r\nFooter.defaultProps = {\r\n\tbottomLinks: [],\r\n\tcolumns: []\r\n};\r\n\r\nexport default WindowSize(Footer);\r\n","examples":[{"name":"Example1","description":"","code":"/*Universal Footer*/\r\nimport React from 'react';\r\nimport { Footer } from '@occmundial/occ-atomic';\r\n\r\nconst columns = [\r\n\t[\r\n\t\t{ key: 0, title: 'Column 1', items: [\r\n\t\t\t{ type: 'link', key: '1', text: 'Link 1', href: '#Footer', target: '_self' },\r\n\t\t\t{ type: 'link', key: '2', text: 'Link 2', href: '#Footer', target: '_blank'  },\r\n\t\t\t{ type: 'link', key: '3', text: 'Link 3', href: '#Footer' },\r\n\t\t\t{ type: 'link', key: '4', text: 'Link 4', href: '#Footer' }\r\n\t\t]}\r\n\t],\r\n\t[\r\n\t\t{ key: 1, title: 'Column 2', items: [\r\n\t\t\t{ type: 'link', key: '1', text: 'Link 5', href: '#Footer', target: '_self' },\r\n\t\t\t{ type: 'link', key: '2', text: 'Link 6', href: '#Footer', target: '_blank' },\r\n\t\t\t{ type: 'link', key: '3', text: 'Link 7', href: '#Footer' },\r\n\t\t\t{ type: 'icon', key: '4', iconName: 'skypeSolid', onClick: () => console.log('Skype icon cliked!') },\r\n\t\t\t{ type: 'icon', key: '5', iconName: 'twitterSolid', onClick: () => console.log('Twitter icon clicked!') },\r\n\t\t\t{ type: 'icon', key: '6', iconName: 'facebookSolid', href: 'fb.com', target: '_blank', onClick: () => console.log('facebook icon clicked!') },\r\n\t\t\t{ type: 'custom', key: '7', custom: (\r\n\t\t\t\t<a href=\"#Footer\">\r\n\t\t\t\t\t<img src=\"http://placehold.it/70x30\" />\r\n\t\t\t\t</a>\r\n\t\t\t)}\r\n\t\t]},\r\n\t\t{ key: 2, title: 'Sub column', collapse: true, items: [\r\n\t\t\t{ type: 'link', key: '1', text: 'Link 8', href: '#Footer', target: '_self' },\r\n\t\t\t{ type: 'link', key: '2', text: 'Link 9', href: '#Footer', target: '_blank' }\r\n\t\t]}\r\n\t]\r\n];\r\n\r\nconst bottomLinks = [\r\n\t{ href: '#Footer', key: '1', text: 'Link 10' },\r\n\t{ href: '#Footer', key: '2', text: 'Link 11' },\r\n\t{ href: '#Footer', key: '3', text: 'Link 12' }\r\n];\r\n\r\nconst copy = `OCC-Atomic © ${new Date().getFullYear()} Copyright stuff`;\r\nconst aux = {\r\n\ttext: 'Auxiliar button',\r\n\thref: '#Footer',\r\n\ttarget: '_self',\r\n\ticonRight: 'info'\r\n};\r\n\r\nexport default function Example() {\r\n\treturn (\r\n\t\t<Footer\r\n\t\t\tcolumns={columns}\r\n\t\t\tbottomLinks={bottomLinks}\r\n\t\t\tcopyText={copy}\r\n\t\t\taux={aux}\r\n\t\t/>\r\n\t);\r\n}\r\n"}]},{"name":"Grid","description":"The Grid should be used as the main content container. You can't use a Grid inside of another Grid, it will brake your layout.","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"fluid":{"type":{"name":"bool"},"required":false,"description":"By default, the Grid component has a specified width for any screen size. The fluid property allows the Grid to extend to a 100% width."},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call on click. This is not the best practice, but is an option if you need to use it."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RowItem from './Row';\r\nimport ColItem from './Col';\r\n\r\n/** The Grid should be used as the main content container. You can't use a Grid inside of another Grid, it will brake your layout. */\r\nclass Grid extends Component {\r\n    static Row = RowItem;\r\n    static Col = ColItem;\r\n\r\n    render() {\r\n        const { classes, children, fluid, onClick, className, id, style } = this.props;\r\n        return (\r\n            <div className={`${fluid ? classes.conFluid : classes.con}${className ? ` ${className}` : ''}`} style={style} id={id} onClick={onClick}>{children}</div>\r\n        );\r\n    }\r\n}\r\n\r\nGrid.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    children: PropTypes.node,\r\n    /** By default, the Grid component has a specified width for any screen size. The fluid property allows the Grid to extend to a 100% width. */\r\n    fluid: PropTypes.bool,\r\n    /** Function to call on click. This is not the best practice, but is an option if you need to use it. */\r\n    onClick: PropTypes.func,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Grid;\r\n","examples":[{"name":"Example1","description":"","code":"/* Grid fluid */\r\nimport React from 'react';\r\nimport { Grid, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Grid fluid style={{background:colors.grey3}}>\r\n            <Grid.Row>\r\n                <Grid.Col xxs={{col:12}} xs={{col:6}} sm={{col:4}} md={{col:3}} lg={{col:2}} xl={{col:1}}>|</Grid.Col>\r\n                <Grid.Col xxs={{col:12}} xs={{col:6}} sm={{col:4}} md={{col:3}} lg={{col:2}} xl={{col:1}}>|</Grid.Col>\r\n                <Grid.Col xxs={{col:12}} xs={{col:6}} sm={{col:4}} md={{col:3}} lg={{col:2}} xl={{col:1}}>|</Grid.Col>\r\n                <Grid.Col xxs={{col:12}} xs={{col:6}} sm={{col:4}} md={{col:3}} lg={{col:2}} xl={{col:1}}>|</Grid.Col>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n}"}]},{"name":"Header","description":"This header component should be filled with a logo section, a nav section and a user menu.\r\nFor the nav section, use the Nav component of this library. In desktop it will be displayed rght next to the logo. In mobile it will appear below the logo and user menu.\r\nFor the user menu, use the Menu component of this library.\r\nThis header includes a Messages/Chat icon, which you can configure with the messageIcon property.\r\n(NOTE: The example will not work properly in mobile, since it uses fixed positioning, breaking the Header because is not in the top of the page.)\r\nThe documentation for Nav and Menu is not included here, since they are completely dependant of Header. Use the example below to see how to implement them.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"logo":{"type":{"name":"node"},"required":false,"description":"Send any content as the logo of your app."},"title":{"type":{"name":"string"},"required":false,"description":"The title of the section you're in. This will be visible in mobile."},"nav":{"type":{"name":"node"},"required":false,"description":"Nav component with the required props."},"menu":{"type":{"name":"node"},"required":false,"description":"Menu component with the required props."},"messagesIcon":{"type":{"name":"object"},"required":false,"description":"Object with the properties to display the message/chat icon. To show it, pass an object with active: true, an id and the href property.","defaultValue":{"value":"{}","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Waypoint from 'react-waypoint';\r\n\r\nimport Hidden from '../Hidden';\r\nimport Visible from '../Visible';\r\n\r\n/**\r\n* This header component should be filled with a logo section, a nav section and a user menu.\r\n* For the nav section, use the Nav component of this library. In desktop it will be displayed rght next to the logo. In mobile it will appear below the logo and user menu.\r\n* For the user menu, use the Menu component of this library.\r\n* This header includes a Messages/Chat icon, which you can configure with the messageIcon property.\r\n* (NOTE: The example will not work properly in mobile, since it uses fixed positioning, breaking the Header because is not in the top of the page.)\r\n* The documentation for Nav and Menu is not included here, since they are completely dependant of Header. Use the example below to see how to implement them.\r\n*/\r\nclass Header extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            shadow: true\r\n        };\r\n        this.removeShadow = this.removeShadow.bind(this);\r\n        this.addShadow = this.addShadow.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.warn('DEPRECATED: The Header component will be removed soon. Use the NavTab component instead.');\r\n        }\r\n    }\r\n\r\n    removeShadow() {\r\n        this.setState({\r\n            shadow: false\r\n        });\r\n    }\r\n\r\n    addShadow() {\r\n        this.setState({\r\n            shadow: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { shadow } = this.state;\r\n        const { classes, logo, nav, menu, title, messagesIcon } = this.props;\r\n        return (\r\n            <div id=\"mainNav\" className={classes.navbar}>\r\n                <div className={`${classes.master} ${shadow ? classes.shadow : ''}`}>\r\n                    <div className={classes.content}>\r\n                        <Hidden xs>\r\n                            {logo}\r\n                        </Hidden>\r\n                        <Visible xs>\r\n                            <div className={classes.title}>{title}</div>\r\n                        </Visible>\r\n                        <div className={classes.user}>\r\n                            {(messagesIcon.hasOwnProperty('active') && messagesIcon.active) && (\r\n                                <a id={messagesIcon.id} href={messagesIcon.href} className={classes.messages}>\r\n                                    <i className={classes.bubble} />\r\n                                </a>\r\n                                )}\r\n                            {menu}\r\n                        </div>\r\n                        <Hidden xs>\r\n                            {nav}\r\n                        </Hidden>\r\n                    </div>\r\n                </div>\r\n                <Visible xs>\r\n                    <div className={classes.separate}>\r\n                        <Waypoint topOffset={60} onEnter={this.removeShadow} onLeave={this.addShadow}>\r\n                            <div className={!shadow ? classes.shadow : ''}>\r\n                                {nav}\r\n                            </div>\r\n                        </Waypoint>\r\n                    </div>\r\n                </Visible>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nHeader.defaultProps = {\r\n    messagesIcon: {}\r\n};\r\n\r\nHeader.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Send any content as the logo of your app. */\r\n    logo: PropTypes.node,\r\n    /** The title of the section you're in. This will be visible in mobile. */\r\n    title: PropTypes.string,\r\n    /** Nav component with the required props. */\r\n    nav: PropTypes.node,\r\n    /** Menu component with the required props. */\r\n    menu: PropTypes.node,\r\n    /** Object with the properties to display the message/chat icon. To show it, pass an object with active: true, an id and the href property. */\r\n    messagesIcon: PropTypes.object\r\n};\r\n\r\nexport default Header;\r\n","examples":[{"name":"Example1","description":"","code":"/* Implementation with state and navigation function */\r\nimport React from 'react';\r\nimport { Header, SightLogo, Nav, Menu } from '@occmundial/occ-atomic';\r\n\r\nexport default class Example1 extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: 'item1'\r\n        };\r\n        this.navigate = this.navigate.bind(this);\r\n    }\r\n    \r\n    navigate({ currentTarget: { id } }) {\r\n        this.setState({\r\n            selected: id\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const { selected } = this.state;\r\n        const nav = [\r\n            { id: 'item1', icon:'search', label: 'Search' },\r\n            { id: 'item2', icon:'filter', label: 'Filters'},\r\n            { id: 'item3', icon:'like', label: 'Stuff' },\r\n        ];\r\n        const menu = [\r\n            { id: 'menu1', href:'#Header', label: 'Item 1' },\r\n            { id: 'menu2', href:'#Header', label: 'Item 2' },\r\n            \"separator\",\r\n            { id: 'menu3', href:'#Header', label: 'Item 3', type:\"signOut\" },\r\n        ];\r\n        return (\r\n            <Header\r\n                logo={<SightLogo />}\r\n                nav={<Nav active={selected} navigate={this.navigate} buttons={nav} />}\r\n                menu={<Menu label=\"User menu\" buttons={menu} />}\r\n            />\r\n        );\r\n    }\r\n}"}]},{"name":"Hidden","description":"Hides the content on the specified window size.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"xs":{"type":{"name":"bool"},"required":false,"description":"Apply in extra small window size."},"sm":{"type":{"name":"bool"},"required":false,"description":"Apply in small window size."},"md":{"type":{"name":"bool"},"required":false,"description":"Apply in medium window size."},"lg":{"type":{"name":"bool"},"required":false,"description":"Apply in large window size."},"mediaQuery":{"type":{"name":"bool"},"required":false,"description":"The boolean prop mediaQuery allows you to hide the elements using CSS instead of JS."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport grid from '../subatomic/grid';\r\n\r\n/** Hides the content on the specified window size. */\r\nclass Hidden extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 0\r\n        };\r\n        this.getDimensions = this.getDimensions.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.getDimensions();\r\n        window.addEventListener(\"resize\", this.getDimensions);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        this.getDimensions();\r\n        window.removeEventListener(\"resize\", this.getDimensions);\r\n    }\r\n    \r\n    getDimensions() {\r\n        const width = window.innerWidth;\r\n        this.setState({\r\n            width\r\n        });\r\n    }\r\n    \r\n    getClassNames() {\r\n        const { classes, xs, sm, md, lg } = this.props;\r\n        let className = '';\r\n        if (xs) className += classes.xs + ' ';\r\n        if (sm) className += classes.sm + ' ';\r\n        if (md) className += classes.md + ' ';\r\n        if (lg) className += classes.lg + ' ';\r\n        return className;\r\n    }\r\n    \r\n    render() {\r\n        const { width } = this.state;\r\n        const { children, xs, sm, md, lg, mediaQuery} = this.props;\r\n        let className;\r\n        if (mediaQuery) {\r\n            className = this.getClassNames();\r\n            return <span className={className}>{children}</span>;\r\n        } else {\r\n            if (\r\n                ((width >= grid.xxs && width < grid.sm) && xs) ||\r\n                ((width >= grid.sm && width < grid.md) && sm) ||\r\n                ((width >= grid.md && width < grid.lg) && md) ||\r\n                ((width >= grid.lg) && lg)\r\n            ) {\r\n                return <span />;\r\n            } else {\r\n                return <span>{children}</span>;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nHidden.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Apply in extra small window size. */\r\n    xs: PropTypes.bool,\r\n    /** Apply in small window size. */\r\n    sm: PropTypes.bool,\r\n    /** Apply in medium window size. */\r\n    md: PropTypes.bool,\r\n    /** Apply in large window size. */\r\n    lg: PropTypes.bool,\r\n    /** The boolean prop mediaQuery allows you to hide the elements using CSS instead of JS. */\r\n    mediaQuery: PropTypes.bool\r\n};\r\n\r\nexport default Hidden;","examples":[{"name":"Example1","description":"","code":"/* Hide content in small window size */\r\nimport React from 'react';\r\nimport { Hidden } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Hidden sm>Content</Hidden>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Hide content in small window size with CSS */\r\nimport React from 'react';\r\nimport { Hidden } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Hidden sm mediaQuery>Content</Hidden>\r\n    );\r\n}"}]},{"name":"Icon","description":"Component to display any of the icons on the library.","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"iconName":{"type":{"name":"string"},"required":true,"description":"Name of the icon to render. It must match with any of the icons on the library."},"width":{"type":{"name":"number"},"required":false,"description":"Width of the icon. By default it will take the value defined on the library for the specified icon."},"height":{"type":{"name":"number"},"required":false,"description":"Height of the icon. By default it will take the value defined on the library for the specified icon."},"display":{"type":{"name":"string"},"required":false,"description":"Display property of the icon. By default it will take the value defined on the library for the specified icon."},"transition":{"type":{"name":"string"},"required":false,"description":"Transition for animations.","defaultValue":{"value":"'0.3s all'","computed":false}},"colors":{"type":{"name":"array"},"required":false,"description":"Array with the colors to use in the icon. Some icons use more than one color. By default it will take the value defined on the library for the specified icon."},"hover":{"type":{"name":"array"},"required":false,"description":"Array with the colors to use on the icon when it's hovered."},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call when the icon is clicked."},"alt":{"type":{"name":"string"},"required":false,"description":"Alt property, in case you need to set it."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Component to display any of the icons on the library. */\r\nclass Icon extends React.Component {\r\n\r\n    render() {\r\n        const { classes, className, style, id, onClick, alt } = this.props;\r\n        const IconType = onClick ? 'button' : 'span';\r\n        return (\r\n            <IconType id={id} className={`${classes.icon}${onClick ? ` ${classes.click}` : ''}${className ? ` ${className}` : ''}`} style={style} onClick={onClick} alt={alt} />\r\n        );\r\n    }\r\n}\r\n\r\nIcon.defaultProps = {\r\n    transition: '0.3s all'\r\n};\r\n\r\nIcon.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    /** Name of the icon to render. It must match with any of the icons on the library. */\r\n    iconName: PropTypes.string.isRequired,\r\n    /** Width of the icon. By default it will take the value defined on the library for the specified icon. */\r\n    width: PropTypes.number,\r\n    /** Height of the icon. By default it will take the value defined on the library for the specified icon. */\r\n    height: PropTypes.number,\r\n    /** Display property of the icon. By default it will take the value defined on the library for the specified icon. */\r\n    display: PropTypes.string,\r\n    /** Transition for animations. */\r\n    transition: PropTypes.string,\r\n    /** Array with the colors to use in the icon. Some icons use more than one color. By default it will take the value defined on the library for the specified icon. */\r\n    colors: PropTypes.array,\r\n    /** Array with the colors to use on the icon when it's hovered. */\r\n    hover: PropTypes.array,\r\n    /** Function to call when the icon is clicked. */\r\n    onClick: PropTypes.func,\r\n    /** Alt property, in case you need to set it. */\r\n    alt: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n};\r\n\r\nexport default Icon;\r\n","examples":[{"name":"Example1","description":"","code":"/* Render an icon */\r\nimport React from 'react';\r\nimport { Icon } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Icon iconName=\"search\" />\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Icon with custom size */\r\nimport React from 'react';\r\nimport { Icon } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Icon iconName=\"search\" width={100} height={100} />\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Icon with custom colors */\r\nimport React from 'react';\r\nimport { Icon, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Icon iconName=\"search\" colors={[colors.blue]} hover={[colors.red]} />\r\n    );\r\n}"}]},{"name":"Input","description":"Input component that includes all the markup, functions and behaviors to implement any type of input field.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"type":{"type":{"name":"string"},"required":false,"description":"Type of the input. Use any of the following types: text, email, password, textarea, select, date, number, search, file.","defaultValue":{"value":"'text'","computed":false}},"maxLength":{"type":{"name":"number"},"required":false,"description":"Maximum number of characters to accept in the input.","defaultValue":{"value":"100","computed":false}},"label":{"type":{"name":"string"},"required":false,"description":"Label to show right above the input field."},"placeholder":{"type":{"name":"string"},"required":false,"description":"Text to display as the placeholder for the input. If you set a value for placeholder but not for label, the placeholder will behave as a label on focus."},"name":{"type":{"name":"string"},"required":false,"description":"Name of the input field."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable the input. It shows a static markup with the styles of an input.","defaultValue":{"value":"false","computed":false}},"counter":{"type":{"name":"bool"},"required":false,"description":"It displays a counter floating to the right, indicating the number of the remaining characters available. It is related to the maxLength value.","defaultValue":{"value":"false","computed":false}},"autoFocus":{"type":{"name":"bool"},"required":false,"description":"Focus automatically on the field with this property. You can just use one of these per form.","defaultValue":{"value":"false","computed":false}},"clear":{"type":{"name":"bool"},"required":false,"description":"Setting this property will show an 'x' icon on the right side of the input. Clicking it will remove the value of the input field.","defaultValue":{"value":"false","computed":false}},"error":{"type":{"name":"string"},"required":false,"description":"After doing your validations outside of this component, you cand send an error string."},"valid":{"type":{"name":"bool"},"required":false,"description":"If the input value is valid after your validations, you can use this property to highlight the input in green."},"valueProp":{"type":{"name":"node"},"required":false,"description":"Use as a default value.","defaultValue":{"value":"''","computed":false}},"selectOnFocus":{"type":{"name":"bool"},"required":false,"description":"With this property set to true, the value of the input will be selected on focus.","defaultValue":{"value":"false","computed":false}},"meta":{"type":{"name":"object"},"required":false,"description":"Metadata sended by react-form."},"input":{"type":{"name":"object"},"required":false,"description":"Object sended by react-form."},"onFocus":{"type":{"name":"func"},"required":false,"description":"Function to call on focus."},"onBlur":{"type":{"name":"func"},"required":false,"description":"Function to call on blur."},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call on change."},"onKeyUp":{"type":{"name":"func"},"required":false,"description":"Function to call on key up."},"onClear":{"type":{"name":"func"},"required":false,"description":"Function to call after clicking the 'x' icon shown by the 'clear' property."},"onRef":{"type":{"name":"func"},"required":false,"description":"Function to call when you need to call the input by a reference."},"options":{"type":{"name":"array"},"required":false,"description":"Array of objects with options in case you set the 'type' property as 'select'. Each option must have a value and a text."},"iconName":{"type":{"name":"string"},"required":false,"description":"If you want to display an icon on the left side, use any icon's name available in the library."},"theme":{"type":{"name":"string"},"required":false,"description":"Provide a theme name to change the component's look & feel. Use 'flat' to use the new theme. Ignore it to use the default theme."},"inputClassName":{"type":{"name":"string"},"required":false,"description":"ClassName for the input tag."},"disableAutoComplete":{"type":{"name":"bool"},"required":false,"description":"Disables native autoComplete on browsers."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Icon from '../Icon';\r\n\r\nimport colors from '../subatomic/colors';\r\n\r\n/** Input component that includes all the markup, functions and behaviors to implement any type of input field. */\r\nclass Input extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            status: 'default',\r\n            value: props.valueProp ? props.valueProp : '',\r\n            touched: false\r\n        };\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onKeyUp = this.onKeyUp.bind(this);\r\n        this.onClear = this.onClear.bind(this);\r\n        this.setAsComplete = this.setAsComplete.bind(this);\r\n        this.setClassName = this.setClassName.bind(this);\r\n        this.setInputClassName = this.setInputClassName.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        let { input, onRef } = this.props;\r\n        if (input && input.value)\r\n            this.setState({ value: input.value });\r\n        if (onRef) onRef(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.warn('DEPRECATED: The Input component will be removed soon. Use the TextField component instead.');\r\n        }\r\n        let { value } = this.state;\r\n        if (value) {\r\n            this.setAsComplete();\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        let { input, valueProp } = props;\r\n        if (input && input.value)\r\n            this.setState({ value: input.value });\r\n        else if (valueProp != this.state.valueProp)\r\n            this.setState({ value: valueProp });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        let { onRef } = this.props;\r\n        if (onRef) onRef(undefined);\r\n    }\r\n\r\n    setAsComplete() {\r\n        this.setState({ status: 'complete' });\r\n    }\r\n\r\n    onFocus({ target }) {\r\n        const { onFocus, selectOnFocus } = this.props;\r\n        if (selectOnFocus) target.select();\r\n        this.setState({ status:'focus', touched: true });\r\n        if (onFocus) onFocus();\r\n    }\r\n\r\n    onBlur({ target: {value} }) {\r\n        const { input, onBlur } = this.props;\r\n        this.setState({ value:value, status: value.length ? 'complete' : 'default' });\r\n        if (onBlur) onBlur(value);\r\n        if (input) input.onBlur(value);\r\n    }\r\n\r\n    onChange({ target: {value} }) {\r\n        const { input, onChange } = this.props;\r\n        this.setState({ value:value });\r\n        if (onChange) onChange(value);\r\n        if (input) input.onBlur(value);\r\n    }\r\n\r\n    onKeyUp({ which }) {\r\n        const { onKeyUp } = this.props;\r\n        if (onKeyUp) onKeyUp(which);\r\n    }\r\n\r\n    onClear() {\r\n        const { input, onClear } = this.props;\r\n        this.setState({ value:'', status: 'default' });\r\n        if (onClear) onClear();\r\n        if (input) input.onBlur(value);\r\n    }\r\n\r\n    setIconColor(status) {\r\n        let iconColors = {\r\n            default: colors.black,\r\n            focus: colors.blue,\r\n            complete: colors.black,\r\n            correct: colors.green,\r\n            error: colors.red,\r\n            disabled: colors.grey1\r\n        };\r\n        return iconColors[status];\r\n    }\r\n\r\n    setClassName(status) {\r\n        const { classes, className, label, placeholder } = this.props;\r\n        let containerClassName = classes.container + ' ' + classes[status];\r\n        if (!label && placeholder) containerClassName += ' ' + classes.push;\r\n        if (className) containerClassName += ' ' + className;\r\n        return containerClassName;\r\n    }\r\n\r\n    setInputClassName() {\r\n        const { value } = this.state;\r\n        const { classes, inputClassName, iconName, clear, type } = this.props;\r\n        let className = classes.input;\r\n        if (iconName) className += ' ' + classes.hasIcon;\r\n        if (clear) className += ' ' + classes.hasClear;\r\n        if (type == \"textarea\") {\r\n            className += ' ' + classes.textarea;\r\n            if (value) className += ' ' + classes.expanded;\r\n        }\r\n        if (inputClassName) className += ' ' + inputClassName;\r\n        return className;\r\n    }\r\n\r\n    render() {\r\n        const { status, value, touched } = this.state;\r\n        const { input, classes, label, placeholder, counter, maxLength, type, options, name, id, style, disabled, meta, autoFocus, error, valid, clear, iconName, disableAutoComplete } = this.props;\r\n        let realStatus = status;\r\n        let InputType = (type == \"textarea\" ? \"textarea\" : type == \"select\" ? \"select\" : \"input\");\r\n        if (status != 'focus') {\r\n            if (disabled)\r\n                realStatus = 'disabled';\r\n            else if ((meta && meta.error && meta.touched) || touched && error)\r\n                realStatus = 'error';\r\n            else if ((meta && meta.valid && meta.touched) || touched && valid)\r\n                realStatus = 'correct';\r\n            else if (input && input.value)\r\n                realStatus = 'complete';\r\n        }\r\n        let iconColor;\r\n        if (iconName) iconColor = this.setIconColor(realStatus);\r\n        if (disabled) {\r\n            return (\r\n                <div className={this.setClassName(realStatus)} style={style}>\r\n                    {label && (\r\n                        <label className={`${classes.label} ${classes.left}`}>\r\n                            {label}\r\n                        </label>\r\n                    )}\r\n                    <label className={`${classes.input}${iconName ? ` ${classes.hasIcon}` : ''}`}>\r\n                        {(input && input.value) ? input.value : value ? value : placeholder}\r\n                    </label>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className={this.setClassName(realStatus)} style={style}>\r\n                {label && (\r\n                    <label\r\n                        className={`${classes.label} ${classes.left}`}>\r\n                        {label}\r\n                    </label>\r\n                )}\r\n                {(!label && placeholder) && (\r\n                    <label\r\n                        className={`${classes.label} ${classes.left} ${classes.placeholder}${iconName ? ` ${classes.pushHolder}` : ''}`}>\r\n                        {placeholder}\r\n                    </label>\r\n                )}\r\n                {iconName && (\r\n                    <Icon iconName={iconName} width={24} height={24} display=\"inline-block\" className={classes.icon} colors={[iconColor]} />\r\n                )}\r\n                {(counter && status == 'focus') && (\r\n                    <label\r\n                        className={`${classes.label} ${classes.right} ${classes.counter}`}>\r\n                        {maxLength-value.length}\r\n                    </label>\r\n                )}\r\n                <div className={classes.inputWrap}>\r\n                    {type == \"select\" ? (\r\n                        <InputType\r\n                            type={type}\r\n                            name={name}\r\n                            id={id}\r\n                            className={this.setInputClassName()}\r\n                            placeholder={(label && placeholder) ? placeholder : ''}\r\n                            value={(input && input.value) ? input.value : value}\r\n                            autoFocus={autoFocus}\r\n                            maxLength={maxLength}\r\n                            onFocus={this.onFocus}\r\n                            onBlur={this.onBlur}\r\n                            onChange={this.onChange}\r\n                            ref = {ref => { this.input = ref; }}\r\n                        >\r\n                            {options.map(option => (\r\n                                <option key={option.value} value={option.value}>{option.text}</option>\r\n                            ))}\r\n                        </InputType>\r\n                    ) : (\r\n                        <InputType\r\n                            type={type}\r\n                            name={name}\r\n                            id={id}\r\n                            className={this.setInputClassName()}\r\n                            placeholder={(label && placeholder) ? placeholder : ''}\r\n                            value={(input && input.value) ? input.value : value}\r\n                            autoFocus={autoFocus}\r\n                            maxLength={maxLength}\r\n                            onFocus={this.onFocus}\r\n                            onBlur={this.onBlur}\r\n                            onChange={this.onChange}\r\n                            onKeyUp={this.onKeyUp}\r\n                            ref = {ref => { this.input = ref; }}\r\n                            {...disableAutoComplete && {autoComplete:'off'}}\r\n                        />\r\n                    )}\r\n                </div>\r\n                {(value && clear) && (\r\n                    <button onClick={this.onClear} className={classes.clear}><Icon iconName=\"close\" /></button>\r\n                )}\r\n                {((meta && meta.error && meta.touched) || (error && touched) && status != 'focus') && (\r\n                    <label className={`${classes.label} ${classes.error}`}>{meta ? meta.error : error}</label>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nInput.defaultProps = {\r\n    type: 'text',\r\n    counter: false,\r\n    maxLength: 100,\r\n    disabled: false,\r\n    autoFocus: false,\r\n    clear: false,\r\n    valueProp: '',\r\n    selectOnFocus: false\r\n};\r\n\r\nInput.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Type of the input. Use any of the following types: text, email, password, textarea, select, date, number, search, file. */\r\n    type: PropTypes.string,\r\n    /** Maximum number of characters to accept in the input. */\r\n    maxLength: PropTypes.number,\r\n    /** Label to show right above the input field. */\r\n    label: PropTypes.string,\r\n    /** Text to display as the placeholder for the input. If you set a value for placeholder but not for label, the placeholder will behave as a label on focus. */\r\n    placeholder: PropTypes.string,\r\n    /** Name of the input field. */\r\n    name: PropTypes.string,\r\n    /** Disable the input. It shows a static markup with the styles of an input. */\r\n    disabled: PropTypes.bool,\r\n    /** It displays a counter floating to the right, indicating the number of the remaining characters available. It is related to the maxLength value. */\r\n    counter: PropTypes.bool,\r\n    /** Focus automatically on the field with this property. You can just use one of these per form. */\r\n    autoFocus: PropTypes.bool,\r\n    /** Setting this property will show an 'x' icon on the right side of the input. Clicking it will remove the value of the input field.*/\r\n    clear: PropTypes.bool,\r\n    /** After doing your validations outside of this component, you cand send an error string. */\r\n    error: PropTypes.string,\r\n    /** If the input value is valid after your validations, you can use this property to highlight the input in green. */\r\n    valid: PropTypes.bool,\r\n    /** Use as a default value. */\r\n    valueProp: PropTypes.node,\r\n    /** With this property set to true, the value of the input will be selected on focus. */\r\n    selectOnFocus: PropTypes.bool,\r\n    /** Metadata sended by react-form. */\r\n    meta: PropTypes.object,\r\n    /** Object sended by react-form. */\r\n    input: PropTypes.object,\r\n    /** Function to call on focus. */\r\n    onFocus: PropTypes.func,\r\n    /** Function to call on blur. */\r\n    onBlur: PropTypes.func,\r\n    /** Function to call on change. */\r\n    onChange: PropTypes.func,\r\n    /** Function to call on key up. */\r\n    onKeyUp: PropTypes.func,\r\n    /** Function to call after clicking the 'x' icon shown by the 'clear' property. */\r\n    onClear: PropTypes.func,\r\n    /** Function to call when you need to call the input by a reference. */\r\n    onRef: PropTypes.func,\r\n    /** Array of objects with options in case you set the 'type' property as 'select'. Each option must have a value and a text. */\r\n    options: PropTypes.array,\r\n    /** If you want to display an icon on the left side, use any icon's name available in the library. */\r\n    iconName: PropTypes.string,\r\n    /** Provide a theme name to change the component's look & feel. Use 'flat' to use the new theme. Ignore it to use the default theme. */\r\n    theme: PropTypes.string,\r\n    /** ClassName for the input tag. */\r\n    inputClassName: PropTypes.string,\r\n    /**  Disables native autoComplete on browsers. */\r\n    disableAutoComplete: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Input;\r\n","examples":[{"name":"Example1","description":"","code":"/* Simple Input */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n        />\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Clear Input */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            valueProp=\"Click on the 'x' icon\"\r\n            clear\r\n        />\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Input with icon */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            iconName=\"search\"\r\n        />\r\n    );\r\n}"},{"name":"Example4","description":"","code":"/* Autofocus */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            autoFocus\r\n        />\r\n    );\r\n}"},{"name":"Example5","description":"","code":"/* Select value on focus */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example5() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            valueProp=\"Click on the Input to select this text\"\r\n            selectOnFocus\r\n        />\r\n    );\r\n}"},{"name":"Example6","description":"","code":"/* Display a counter */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example6() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            maxLength={50}\r\n            counter\r\n        />\r\n    );\r\n}"},{"name":"Example7","description":"","code":"/* Input with error */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example7() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Focus and blur the input to show the error\"\r\n            error=\"Input with error\"\r\n        />\r\n    );\r\n}"},{"name":"Example8","description":"","code":"/* Valid Input */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example8() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            valueProp=\"Focus and blur the input to show the valid status\"\r\n            valid\r\n        />\r\n    );\r\n}"},{"name":"Example9","description":"","code":"/* Animated placeholder */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example9() {\r\n    return (\r\n        <Input placeholder=\"Animated placeholder\" />\r\n    );\r\n}"}]},{"name":"Label","description":"Label component with different themes. The label can trigger some actions on click.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"Select a theme for the label (currently there's just the \"default\" theme).","defaultValue":{"value":"\"default\"","computed":false}},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call when the label is clicked."},"onClose":{"type":{"name":"func"},"required":false,"description":"If the label receives an onClose function it will display an 'x' icon on hover that will trigger this function when clicked."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Label component with different themes. The label can trigger some actions on click. */\r\nclass Label extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, className, id, style, onClose, onClick, theme } = this.props;\r\n        return (\r\n            <label className={`${classes.label} ${theme ? classes[theme] : classes.default}${onClick ? ` ${classes.cursor}` : ''}${className ? ` ${className}` : ''}`} id={id} style={style} onClick={onClick}>\r\n                {children}\r\n                {onClose && <span className={classes.close} onClick={e => {e.stopPropagation(); onClose();}} />}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n\r\nLabel.defaultProps= {\r\n    theme: \"default\"\r\n};\r\n\r\nLabel.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Select a theme for the label (currently there's just the \"default\" theme). */\r\n    theme: PropTypes.string,\r\n    /** Function to call when the label is clicked. */\r\n    onClick: PropTypes.func,\r\n    /** If the label receives an onClose function it will display an 'x' icon on hover that will trigger this function when clicked. */\r\n    onClose: PropTypes.func,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n};\r\n\r\nexport default Label;","examples":[{"name":"Example1","description":"","code":"/* Render a label */\r\nimport React from 'react';\r\nimport { Label } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Label>Label</Label>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Label with functions */\r\nimport React from 'react';\r\nimport { Label } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Label onClick={() => {console.log('clicked!');}} onClose={() => {console.log('closed!');}}>Label with functions</Label>\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Label with theme */\r\nimport React from 'react';\r\nimport { Label } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Label theme=\"blue\">Label with theme</Label>\r\n    );\r\n}"}]},{"name":"LayerApp","description":"The LayerApp component is a wrapper for the SubHeader component that also includes a content block.\r\nIt is meant to be used as an overlay screen, in front of the main content.\r\nThere are no examples included, since the LayerApp component occupies the whole screen in first plane.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"The theme to use in the LayerApp. The options are blue and white.","defaultValue":{"value":"\"blue\"","computed":false}},"fixed":{"type":{"name":"bool"},"required":false,"description":"This property fixes the LayerApp's header to the top of the screen.","defaultValue":{"value":"false","computed":false}},"left":{"type":{"name":"node"},"required":false,"description":"Content to display on the left of the header."},"right":{"type":{"name":"node"},"required":false,"description":"Content to display on the right of the header."},"center":{"type":{"name":"node"},"required":false,"description":"Content to display on the center of the header."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SubHeader from '../SubHeader';\r\n\r\n/**\r\n* The LayerApp component is a wrapper for the SubHeader component that also includes a content block.\r\n* It is meant to be used as an overlay screen, in front of the main content.\r\n* There are no examples included, since the LayerApp component occupies the whole screen in first plane.\r\n*/\r\nclass LayerApp extends React.Component {\r\n\r\n    componentDidMount() {\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.warn('DEPRECATED: The LayerApp component will be removed soon. Use the NavTab component instead.');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes, children, theme, fixed, left, right, center } = this.props;\r\n        return (\r\n            <div className={`${classes.layerApp} ${classes[theme]}`}>\r\n                <SubHeader theme={theme} left={left} right={right} center={center} fixed={fixed} />\r\n                <div className={classes.content}>\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLayerApp.defaultProps = {\r\n    fixed: false,\r\n    theme: \"blue\"\r\n};\r\n\r\nLayerApp.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** The theme to use in the LayerApp. The options are blue and white. */\r\n    theme: PropTypes.string,\r\n    /** This property fixes the LayerApp's header to the top of the screen. */\r\n    fixed: PropTypes.bool,\r\n    /** Content to display on the left of the header. */\r\n    left: PropTypes.node,\r\n    /** Content to display on the right of the header. */\r\n    right: PropTypes.node,\r\n    /** Content to display on the center of the header. */\r\n    center: PropTypes.node\r\n};\r\n\r\nexport default LayerApp;\r\n","examples":[]},{"name":"List","description":"","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"list":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"text":{"name":"string","required":true},"textColor":{"name":"enum","value":[{"value":"'mid'","computed":false},{"value":"'low'","computed":false},{"value":"'white'","computed":false}],"required":false},"iconName":{"name":"string","required":false},"iconColor":{"name":"string","required":false},"size":{"name":"enum","value":[{"value":"'micro'","computed":false},{"value":"'small'","computed":false},{"value":"'standard'","computed":false},{"value":"'large'","computed":false},{"value":"'subheading'","computed":false},{"value":"'heading'","computed":false},{"value":"'headline'","computed":false}],"required":false},"hierarchy":{"name":"number","required":false},"props":{"name":"shape","value":{"italic":{"name":"bool","description":"if the text between * will be italic.","required":false},"underlined":{"name":"bool","description":"if the text between * will be underlined.","required":false},"crossed":{"name":"bool","description":"if the text between * will be crossed.","required":false},"bold":{"name":"bool","description":"if the text between * will be bold.","required":false}},"required":false},"link":{"name":"shape","value":{"href":{"name":"string","description":"To set the link in the text.","required":false},"target":{"name":"string","description":"To set the target of the link.","required":false},"linkStyle":{"name":"object","description":"To set the style of the link.","required":false}},"required":false}}}},"required":true,"description":"Este componente recibe un arreglo de objetos que pueden tener los siguiente forma:\r\n..........................................................................................................\r\ntext: string - * requerida (si esta entre * será bold, / será italic, _subrayada y - tachada y si esta entre # le aplicara los links)\r\n...............................................................................\r\ntextColor: string - one of [mid, low, white] - default high\r\n...............................................................................................................................................................\r\niconName: string - default bullet\r\n.............................................................................................................................................................................................\r\niconColor: string - default ink\r\n............................................................................................................................................................................................................\r\nsize: string - one of [micro, small, standard, large, subheading, heading, headline]\r\n...........................................................................................................................\r\nlink: {href: string, target: string, linkStyle: object }"},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ListItem from '../ListItem';\r\n\r\n/**\r\n* List Component\r\n* It is meant to be used as a usual ul component\r\n*/\r\n\r\nconst boldRegex = /\\*(.*?)\\*/g;\r\nconst italicRegex = /\\/(.*?)\\//g;\r\nconst underlinedRegex = /\\_(.*?)\\_/g;\r\nconst crossedRegex = /\\-(.*?)\\-/g;\r\nconst linkRegex = /\\#(.*?)\\#/g;\r\n\r\nconst List = ({\r\n  list, style, id, className,\r\n}) => {\r\n    const checkText = (phrase) => {\r\n      const defaultProps = {italic: false, bold: false, underlined: false, crossed: false, link: false};\r\n      let cleanText = phrase;\r\n      if (boldRegex.test(phrase)) {defaultProps.bold = true; cleanText = phrase.split(\"*\")[1];}\r\n      if (italicRegex.test(phrase)) {defaultProps.italic = true; cleanText = phrase.split(\"/\")[1];}\r\n      if (underlinedRegex.test(phrase)) {defaultProps.underlined = true; cleanText = phrase.split(\"_\")[1];}\r\n      if (crossedRegex.test(phrase)) {defaultProps.crossed = true; cleanText = phrase.split(\"-\")[1];}\r\n      if (linkRegex.test(phrase)) {defaultProps.link = true; cleanText = phrase.split(\"#\")[1];}\r\n      return [defaultProps, cleanText];\r\n    };\r\n\r\n    const renderText = (text, link) => {\r\n      let result = text.split('°');\r\n      if (result.length === 1) return [{text}];\r\n      const child = [];\r\n      result.map(bullet => {\r\n        const values = checkText(bullet);\r\n        const props = values[0];\r\n        const cleanText = values[1];\r\n        props.link ? child.push({text: cleanText, link}) : child.push({text: cleanText, props});\r\n      });\r\n      return child;\r\n  };\r\n  return (\r\n    <ul style={style} className={`${className}`} id={id}>\r\n      {list.map((element, index) => (\r\n          <ListItem\r\n            key={index}\r\n            icon={element.iconName}\r\n            iconColor={element.iconColor}\r\n            textColor={element.textColor}\r\n            size={element.size}\r\n            subItems={element.subItems}\r\n            child={renderText(element.text, element.link)}\r\n          />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\n\r\nList.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  /** Este componente recibe un arreglo de objetos que pueden tener los siguiente forma:\r\n   * ..........................................................................................................\r\n   * text: string - * requerida (si esta entre * será bold, / será italic, _subrayada y - tachada y si esta entre # le aplicara los links)\r\n   * ...............................................................................\r\n   * textColor: string - one of [mid, low, white] - default high\r\n   * ...............................................................................................................................................................\r\n   * iconName: string - default bullet\r\n   * .............................................................................................................................................................................................\r\n   * iconColor: string - default ink\r\n   * ............................................................................................................................................................................................................\r\n   * size: string - one of [micro, small, standard, large, subheading, heading, headline]\r\n   * ...........................................................................................................................\r\n   * link: {href: string, target: string, linkStyle: object }\r\n   */\r\n  list: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      text: PropTypes.string.isRequired,\r\n      textColor: PropTypes.oneOf([\r\n        'mid', 'low', 'white',\r\n      ]),\r\n      iconName: PropTypes.string,\r\n      iconColor: PropTypes.string,\r\n      size: PropTypes.oneOf([\r\n        'micro', 'small', 'standard', 'large', 'subheading', 'heading', 'headline',\r\n      ]),\r\n      hierarchy: PropTypes.number,\r\n      props: PropTypes.shape({\r\n        /** if the text between * will be italic. */\r\n        italic: PropTypes.bool,\r\n        /** if the text between * will be underlined. */\r\n        underlined: PropTypes.bool,\r\n        /** if the text between * will be crossed. */\r\n        crossed: PropTypes.bool,\r\n        /** if the text between * will be bold. */\r\n        bold: PropTypes.bool,\r\n      }),\r\n      link: PropTypes.shape({\r\n        /** To set the link in the text. */\r\n        href: PropTypes.string,\r\n        /** To set the target of the link. */\r\n        target: PropTypes.string,\r\n        /** To set the style of the link. */\r\n        linkStyle: PropTypes.object,\r\n      }),\r\n    }).isRequired,\r\n  ).isRequired,\r\n  id: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object\r\n};\r\n\r\nList.defaultProps = {\r\n};\r\n\r\nexport default List;\r\n","examples":[{"name":"Example1","description":"","code":"/* Render a simple List */\r\nimport React from 'react';\r\nimport { List, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const dummyList = [\r\n      {text: 'Bullet1'},\r\n      {text: 'Bullet2', size: 'small'},\r\n      {text: 'Bullet3', textColor: 'mid' },\r\n      {text: 'Bullet4', iconName: 'cross', iconColor: colors.prim, subItems:[{text: 'Bullet 4.1', subItems: [{text: 'Bullet 4.1.1'}]}]},\r\n      {text: 'This text is °/italic/° <-'},\r\n      {text: 'This text is °*bold*° <-'},\r\n      {text: 'This text is °_underlined_° <-'},\r\n      {text: 'This text is °-crossed-° <-'},\r\n      {text: 'This text is °*-crossed bold-*° <-'},\r\n      {text: 'This text is °*-crossed bold-*°  and °/_italic underlined_/°<-'},\r\n      {text: 'This text has a  °#link#° <-', link:{href: 'https://google.com', target:'_blank', linkStyle: {textDecoration: 'none', color: colors.textLink }}},\r\n      {text: 'This text has a  °#link#° <- and °*bold text*° <-', link:{href: 'https://google.com'}},\r\n    ];\r\n    return (\r\n      <List list={dummyList} />\r\n    );\r\n}"}]},{"name":"ListItem","description":"It is meant to be used as a usual li component","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"child":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"text":{"name":"string","required":true},"props":{"name":"shape","value":{"italic":{"name":"bool","description":"if the text between * will be italic.","required":false},"underlined":{"name":"bool","description":"if the text between * will be underlined.","required":false},"crossed":{"name":"bool","description":"if the text between * will be crossed.","required":false},"bold":{"name":"bool","description":"if the text between * will be bold.","required":false}},"required":false},"link":{"name":"shape","value":{"href":{"name":"string","description":"To set the link in the text.","required":false},"target":{"name":"string","description":"To set the target of the link.","required":false},"linkStyle":{"name":"object","description":"To set the style of the link.","required":false}},"required":false}}}},"required":true,"description":"Array of Texts in the list. with the props of the text if required and link if required"},"textColor":{"type":{"name":"enum","value":[{"value":"'mid'","computed":false},{"value":"'low'","computed":false},{"value":"'white'","computed":false}]},"required":false,"description":"Color of the Text"},"icon":{"type":{"name":"string"},"required":false,"description":"Icon name to show on the list.","defaultValue":{"value":"'bullet'","computed":false}},"iconColor":{"type":{"name":"string"},"required":false,"description":"Icon color for the icon on the list.","defaultValue":{"value":"colors.ink","computed":true}},"size":{"type":{"name":"enum","value":[{"value":"'micro'","computed":false},{"value":"'small'","computed":false},{"value":"'standard'","computed":false},{"value":"'large'","computed":false},{"value":"'subheading'","computed":false},{"value":"'heading'","computed":false},{"value":"'headline'","computed":false}]},"required":false,"description":"The listItem accepts the text themes from micro to headline","defaultValue":{"value":"'standard'","computed":false}},"hierarchy":{"type":{"name":"number"},"required":false,"description":"Hierarchy of the list 1-n.","defaultValue":{"value":"0","computed":false}},"subItems":{"type":{"name":"custom","raw":"PropTypes.srray"},"required":false,"description":"subItems of the list 1-n.","defaultValue":{"value":"[]","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport flatten from 'lodash/flatten';\r\nimport isString from 'lodash/isString';\r\n\r\nimport Icon from '../Icon';\r\nimport Text from '../Text';\r\nimport Flexbox from '../Flexbox';\r\nimport colors from '../subatomic/colors';\r\nimport iconSizes from '../subatomic/iconSizes';\r\nimport spacing from '../subatomic/spacing';\r\nimport List from '../List';\r\n\r\n/**\r\n* It is meant to be used as a usual li component\r\n*/\r\n\r\nconst ListItem = ({\r\n  classes, icon, iconColor, size, style, className, id, hierarchy, child, textColor, subItems,\r\n}) => {\r\n  const resolveTag = (props) => {\r\n    if (props.bold) return 'strong'; else if (props.italic) return 'i'; else return 'span';\r\n  };\r\n\r\n  const replaceString = (objectList) => {\r\n    const finalText = [];\r\n    const objectListKeys = Object.keys(objectList);\r\n    if (objectListKeys.length === 1) {\r\n      finalText.push(objectList.text);\r\n    } else {\r\n      for (const [index, value] of objectListKeys.entries()) {\r\n        if (value === 'props') {\r\n          finalText.push(styleMatch(objectList.text, `${index}${objectList.text}`, objectList.props));\r\n        }\r\n        if (value === 'link') {\r\n          finalText.push(linkMatch(objectList.text, `${index}${objectList.text}`, objectList.link));\r\n        }\r\n      }\r\n    }\r\n    return finalText;\r\n  };\r\n\r\n  const styleMatch = (match, i, props) => <Text key={i} tag={props ? resolveTag(props) : 'span'} strong={props && props.bold} className={`${props && props.italic && classes.italicLetter} ${props && props.underlined && classes.underlinedLetter} ${props && props.crossed && classes.crossedLetter}`}>{match}</Text>;\r\n  const linkMatch = (match, i, link) => <a key={i} href={link && link.href} target={link && link.target} style={link && link.linkStyle}>{match}</a>;\r\n\r\n  const renderText = () => ( flatten(child.map(x => (isString(x.text) ? replaceString(x) : x ))));\r\n\r\n  const getIconSize = () => {\r\n    switch(size) {\r\n      case 'micro':\r\n      case 'small':\r\n        return iconSizes.small;\r\n      case 'standard':\r\n      case'large':\r\n      case 'subheading':\r\n        return iconSizes.base;\r\n      case 'heading':\r\n        return iconSizes.medium;\r\n      case 'headline':\r\n        return iconSizes.large;\r\n      default:\r\n        return iconSizes.base;\r\n    }\r\n};\r\n  \r\n  return (\r\n    <li style={style} className={`${className} ${classes.liWrapper}`} id={id}>\r\n      <Flexbox display=\"flex\" direction=\"col\" style={hierarchy ? { marginLeft: (spacing.small * hierarchy) } : {}}>\r\n        <Flexbox display=\"inline-flex\" alignItems=\"start\">\r\n          <div className={classes.bulletContainer}>\r\n            {icon && <Icon iconName={icon} className={classes.icon} colors={[iconColor]} width={getIconSize()} height={getIconSize()} />}\r\n          </div>\r\n          <Text\r\n            micro={size === 'micro'}\r\n            small={size === 'small'}\r\n            standard={size === 'standard'}\r\n            large={size === 'large'}\r\n            subheading={size === 'subheading'}\r\n            heading={size === 'heading'}\r\n            headline={size === 'headline'}\r\n            mid={textColor === 'mid'}\r\n            low={textColor === 'low'}\r\n            white={textColor === 'white'}\r\n            >\r\n            {renderText()}\r\n          </Text>\r\n        </Flexbox>\r\n        {subItems && subItems.length > 0 && (\r\n          <List list={subItems}/>       \r\n        )}\r\n      </Flexbox>\r\n    </li>\r\n  );\r\n};\r\n\r\n\r\nListItem.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  /** Array of Texts in the list. with the props of the text if required and link if required*/\r\n  child: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      text: PropTypes.string.isRequired,\r\n      props: PropTypes.shape({\r\n        /** if the text between * will be italic. */\r\n        italic: PropTypes.bool,\r\n        /** if the text between * will be underlined. */\r\n        underlined: PropTypes.bool,\r\n        /** if the text between * will be crossed. */\r\n        crossed: PropTypes.bool,\r\n        /** if the text between * will be bold. */\r\n        bold: PropTypes.bool,\r\n      }),\r\n      link: PropTypes.shape({\r\n        /** To set the link in the text. */\r\n        href: PropTypes.string,\r\n        /** To set the target of the link. */\r\n        target: PropTypes.string,\r\n        /** To set the style of the link. */\r\n        linkStyle: PropTypes.object,\r\n      }),\r\n    }).isRequired,\r\n  ).isRequired,\r\n  /** Color of the Text  */\r\n  textColor: PropTypes.oneOf([\r\n    'mid', 'low', 'white',\r\n  ]),\r\n  /** Icon name to show on the list. */\r\n  icon: PropTypes.string,\r\n  /** Icon color for the icon on the list. */\r\n  iconColor: PropTypes.string,\r\n  /** The listItem accepts the text themes from micro to headline */\r\n  size: PropTypes.oneOf([\r\n    'micro', 'small', 'standard', 'large', 'subheading', 'heading', 'headline',\r\n  ]),\r\n  /** Hierarchy of the list 1-n. */\r\n  hierarchy: PropTypes.number,\r\n  /** subItems of the list 1-n. */\r\n  subItems: PropTypes.srray,\r\n  id: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object\r\n};\r\n\r\nListItem.defaultProps = {\r\n  iconColor: colors.ink,\r\n  icon: 'bullet',\r\n  size: 'standard',\r\n  hierarchy: 0,\r\n  subItems: [],\r\n};\r\n\r\nexport default ListItem;\r\n","examples":[]},{"name":"Modal","description":"The Modal component is rendered in any given container, avoiding z-index an position conflicts. Your application must have the logic to show or hide the Modal component.","props":{"classes":{"type":{"name":"object"},"required":true,"description":"prop"},"children":{"type":{"name":"node"},"required":false,"description":""},"show":{"type":{"name":"bool"},"required":false,"description":"Boolean value to show or hide the Modal component."},"container":{"type":{"name":"object"},"required":false,"description":"DOM Element to append the Modal component into it. If you don't specify a container the Modal will be rendered in the exact same DOM position you used it. This can in some cases generate problems with z-index or position."},"onClose":{"type":{"name":"func"},"required":false,"description":"Function to call when the overlay or close icon are clicked or when you press the Esc key."},"size":{"type":{"name":"enum","value":[{"value":"'sm'","computed":false},{"value":"'md'","computed":false},{"value":"'lg'","computed":false},{"value":"'xl'","computed":false}]},"required":false,"description":"Size of the Modal. Select any of these: sm, md, lg.","defaultValue":{"value":"'md'","computed":false}},"title":{"type":{"name":"string"},"required":false,"description":"Title to display at the top of the Modal."},"mainBtn":{"type":{"name":"shape","value":{"text":{"name":"string","required":false},"onClick":{"name":"func","required":false},"href":{"name":"string","required":false},"target":{"name":"string","required":false},"disabled":{"name":"bool","required":false},"loading":{"name":"bool","required":false}}},"required":false,"description":"Object with props for the main button. It will render a Button with the main theme."},"secBtn":{"type":{"name":"shape","value":{"text":{"name":"string","required":false},"onClick":{"name":"func","required":false},"href":{"name":"string","required":false},"target":{"name":"string","required":false},"disabled":{"name":"bool","required":false},"loading":{"name":"bool","required":false}}},"required":false,"description":"Object with props for the secondary button. It will render a Button with the ghostGrey theme. (NOTE: If you don't send a mainBtn object the secBtn will not work)"},"imgTop":{"type":{"name":"shape","value":{"img":{"name":"string","required":false},"color":{"name":"string","required":false},"position":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'center'","computed":false},{"value":"'right'","computed":false}],"required":false},"size":{"name":"enum","value":[{"value":"'contain'","computed":false},{"value":"'cover'","computed":false}],"required":false}}},"required":false,"description":"Image url to render it on the top of the modal dialog.","defaultValue":{"value":"{}","computed":false}},"imgLeft":{"type":{"name":"shape","value":{"img":{"name":"string","required":false},"color":{"name":"string","required":false},"position":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'center'","computed":false},{"value":"'bottom'","computed":false}],"required":false},"size":{"name":"enum","value":[{"value":"'contain'","computed":false},{"value":"'cover'","computed":false}],"required":false}}},"required":false,"description":"Image url to render it on the left of the modal dialog.","defaultValue":{"value":"{}","computed":false}},"onTransitionEnd":{"type":{"name":"func"},"required":false,"description":"This function is used by an internal wrapper component to manage the hiding animation and unmounting properly."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '../Card';\r\nimport Icon from '../Icon';\r\nimport Text from '../Text';\r\nimport Flexbox from '../Flexbox';\r\nimport Button from '../Button';\r\nimport colors from '../subatomic/colors';\r\n\r\n/**\r\n* The Modal component is rendered in any given container, avoiding z-index an position conflicts. Your application must have the logic to show or hide the Modal component.\r\n*/\r\nclass Modal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.onKeyDown);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.onKeyDown);\r\n    }\r\n\r\n    onKeyDown({ which }) {\r\n        const { onClose } = this.props;\r\n        if(onClose && which == 27) onClose();\r\n    }\r\n\r\n    avoidClose(e) {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        const { classes, children, onClose, title, mainBtn, show, secBtn, size, imgTop, imgLeft, onTransitionEnd } = this.props;\r\n\r\n        const closeButton = (\r\n            <div className={classes.closeIcon}>\r\n                <Icon iconName=\"close\" width={24} height={24} colors={[colors.grey900]} onClick={onClose} />\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className={`${classes.overlay} ${show ? classes.overlayShow : classes.overlayHide}${!onClose ? ` ${classes.noClose}` : ''}`} onClick={onClose} onTransitionEnd={onTransitionEnd}>\r\n                <div className={classes.cardWrapper}>\r\n                    <div className={classes.cardBlock} onClick={this.avoidClose}>\r\n                        <Card shadow={5} className={`${classes.card}${size ? ` ${classes[size]}` : ''}${show ? ` ${classes.cardShow}` : ` ${classes.cardHide}`}`}>\r\n                            <Flexbox display=\"flex\" direction={imgLeft.img ? 'row' : 'col'}>\r\n                                {(imgLeft.img || imgTop.img) && (\r\n                                    <div className={imgLeft.img ? classes.imgLeft : classes.imgTop}>\r\n                                        {(imgTop.img && onClose) && (\r\n                                            <div className={classes.closePosition}>\r\n                                                {closeButton}\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                                <Flexbox flex=\"1\">\r\n                                    <Flexbox display=\"flex\" justifyContent=\"end\" alignItems=\"start\" className={classes.top}>\r\n                                        {title && (\r\n                                            <Flexbox flex=\"1\">\r\n                                                <Text heading className={classes.title}>{title}</Text>\r\n                                            </Flexbox>\r\n                                        )}\r\n                                        {(!imgTop.img && onClose) && closeButton}\r\n                                    </Flexbox>\r\n                                    <div className={classes.content}>\r\n                                        {children}\r\n                                    </div>\r\n                                    {mainBtn && (\r\n                                        <div className={classes.bottom}>\r\n                                            {secBtn && (\r\n                                                <Button\r\n                                                    theme=\"ghostGrey\"\r\n                                                    className={classes.secBtn}\r\n                                                    onClick={secBtn.onClick}\r\n                                                    href={secBtn.href}\r\n                                                    target={secBtn.target}\r\n                                                    loading={secBtn.loading}\r\n                                                    disabled={secBtn.disabled}\r\n                                                    id={secBtn.id}\r\n                                                >\r\n                                                    {secBtn.text}\r\n                                                </Button>)\r\n                                            }\r\n                                            <Button\r\n                                                className={classes.mainBtn}\r\n                                                onClick={mainBtn.onClick}\r\n                                                href={mainBtn.href}\r\n                                                target={mainBtn.target}\r\n                                                loading={mainBtn.loading}\r\n                                                disabled={mainBtn.disabled}\r\n                                                id={mainBtn.id}\r\n                                            >\r\n                                                {mainBtn.text}\r\n                                            </Button>\r\n                                        </div>\r\n                                    )}\r\n                                </Flexbox>\r\n                            </Flexbox>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nModal.defaultProps = {\r\n    size: 'md',\r\n    imgLeft: {},\r\n    imgTop: {}\r\n};\r\n\r\nModal.propTypes = {\r\n    /** prop */\r\n    classes: PropTypes.object.isRequired,\r\n    children: PropTypes.node,\r\n    /** Boolean value to show or hide the Modal component. */\r\n    show: PropTypes.bool,\r\n    /** DOM Element to append the Modal component into it. If you don't specify a container the Modal will be rendered in the exact same DOM position you used it. This can in some cases generate problems with z-index or position. */\r\n    container: PropTypes.object,\r\n    /** Function to call when the overlay or close icon are clicked or when you press the Esc key. */\r\n    onClose: PropTypes.func,\r\n    /** Size of the Modal. Select any of these: sm, md, lg. */\r\n    size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl']),\r\n    /** Title to display at the top of the Modal. */\r\n    title: PropTypes.string,\r\n    /** Object with props for the main button. It will render a Button with the main theme. */\r\n    mainBtn: PropTypes.shape({\r\n        text: PropTypes.string,\r\n        onClick: PropTypes.func,\r\n        href: PropTypes.string,\r\n        target: PropTypes.string,\r\n        disabled: PropTypes.bool,\r\n        loading: PropTypes.bool\r\n    }),\r\n    /** Object with props for the secondary button. It will render a Button with the ghostGrey theme. (NOTE: If you don't send a mainBtn object the secBtn will not work) */\r\n    secBtn: PropTypes.shape({\r\n        text: PropTypes.string,\r\n        onClick: PropTypes.func,\r\n        href: PropTypes.string,\r\n        target: PropTypes.string,\r\n        disabled: PropTypes.bool,\r\n        loading: PropTypes.bool\r\n    }),\r\n    /** Image url to render it on the top of the modal dialog. */\r\n    imgTop: PropTypes.shape({\r\n        img: PropTypes.string,\r\n        color: PropTypes.string,\r\n        position: PropTypes.oneOf([\r\n            'left', 'center', 'right'\r\n        ]),\r\n        size: PropTypes.oneOf([\r\n            'contain', 'cover'\r\n        ])\r\n    }),\r\n    /** Image url to render it on the left of the modal dialog. */\r\n    imgLeft: PropTypes.shape({\r\n        img: PropTypes.string,\r\n        color: PropTypes.string,\r\n        position: PropTypes.oneOf([\r\n            'top', 'center', 'bottom'\r\n        ]),\r\n        size: PropTypes.oneOf([\r\n            'contain', 'cover'\r\n        ])\r\n    }),\r\n    /** This function is used by an internal wrapper component to manage the hiding animation and unmounting properly. */\r\n    onTransitionEnd: PropTypes.func\r\n};\r\n\r\nexport default Modal;\r\n","examples":[{"name":"Example1","description":"","code":"/* Modal */\r\nimport React from 'react';\r\nimport { Modal, Button, Text } from '@occmundial/occ-atomic';\r\n\r\nexport default class Example1 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { show } = this.state;\r\n        return (\r\n            <div>\r\n                <Button onClick={this.toggle}>Show modal</Button>\r\n                <Modal\r\n                    container={document.body}\r\n                    show={show}\r\n                    onClose={this.toggle}\r\n                    title=\"Modal\"\r\n                    mainBtn={{\r\n                        text:'Agree',\r\n                        onClick:() => {\r\n                            alert('Done!');\r\n                        }\r\n                    }}\r\n                    secBtn={{\r\n                        text:'Cancel',\r\n                        onClick:this.toggle\r\n                    }}\r\n                >\r\n                    <Text>Bacon ipsum dolor amet kielbasa ham frankfurter pork loin pork chop pastrami t-bone beef salami, andouille venison shoulder jerky chuck. Tenderloin landjaeger shoulder ground round. Corned beef shankle tail andouille sausage chuck turkey pork chop pancetta flank burgdoggen boudin prosciutto buffalo. Picanha swine jowl ham hock cow bresaola meatball venison short loin cupim porchetta ham beef tenderloin. Cow sirloin landjaeger turkey corned beef frankfurter picanha ribeye ball tip pastrami. Shoulder spare ribs cow turkey beef ribs boudin pastrami ham hock shank biltong chuck bresaola t-bone.</Text>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Small Modal */\r\nimport React from 'react';\r\nimport { Modal, Button, Text } from '@occmundial/occ-atomic';\r\n\r\nexport default class Example1 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { show } = this.state;\r\n        return (\r\n            <div>\r\n                <Button onClick={this.toggle}>Show modal</Button>\r\n                <Modal\r\n                    container={document.body}\r\n                    show={show}\r\n                    onClose={this.toggle}\r\n                    title=\"Small Modal\"\r\n                    mainBtn={{\r\n                        text:'Agree',\r\n                        onClick:() => {\r\n                            alert('Done!');\r\n                        }\r\n                    }}\r\n                    secBtn={{\r\n                        text:'Cancel',\r\n                        onClick:this.toggle\r\n                    }}\r\n                    size=\"sm\"\r\n                >\r\n                    <Text>Bacon ipsum dolor amet tenderloin short ribs sausage swine pancetta hamburger frankfurter.</Text>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"},{"name":"Example3","description":"","code":"/* Large Modal */\r\nimport React from 'react';\r\nimport { Modal, Button, Text } from '@occmundial/occ-atomic';\r\n\r\nexport default class Example1 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { show } = this.state;\r\n        return (\r\n            <div>\r\n                <Button onClick={this.toggle}>Show modal</Button>\r\n                <Modal\r\n                    container={document.body}\r\n                    show={show}\r\n                    onClose={this.toggle}\r\n                    title=\"Large modal\"\r\n                    mainBtn={{\r\n                        text:'Agree',\r\n                        onClick:() => {\r\n                            alert('Done!');\r\n                        }\r\n                    }}\r\n                    secBtn={{\r\n                        text:'Cancel',\r\n                        onClick:this.toggle\r\n                    }}\r\n                    size=\"lg\"\r\n                >\r\n                    <Text>Bacon ipsum dolor amet tenderloin short ribs sausage swine pancetta hamburger frankfurter, capicola alcatra pork belly fatback. Biltong filet mignon cupim prosciutto porchetta shank tail pig pork loin picanha bacon pancetta shankle. Filet mignon tongue jerky strip steak, spare ribs pork loin bresaola tenderloin shankle beef ribs salami. Bresaola cupim turkey pork belly, chicken beef ribs frankfurter jerky pork.</Text>\r\n                    <Text>Alcatra bresaola swine ham. Prosciutto brisket shankle, pork belly ham chuck bresaola swine cow sirloin. Tenderloin corned beef tongue t-bone chuck flank. Andouille leberkas pig sausage frankfurter, ham hock kielbasa prosciutto kevin drumstick flank beef picanha beef ribs chicken. Andouille buffalo jerky flank ball tip alcatra salami boudin fatback short loin turkey t-bone rump drumstick. Alcatra flank kevin brisket doner, frankfurter tenderloin pastrami fatback pork chop meatloaf cow filet mignon. Hamburger pancetta tenderloin, drumstick jowl strip steak chicken tongue corned beef meatball.</Text>\r\n                    <Text>Turducken leberkas chuck cow, cupim bresaola brisket tenderloin corned beef beef buffalo shoulder sirloin capicola jerky. Filet mignon pork chop andouille, turducken strip steak chicken biltong kielbasa frankfurter spare ribs rump short ribs short loin shoulder. Burgdoggen corned beef pork chuck beef ribs biltong. Burgdoggen salami short ribs chuck meatball pork loin, ham picanha pork. Sausage chicken spare ribs, pork belly meatloaf sirloin pork chop beef. Corned beef landjaeger beef ribs rump shank, salami tongue capicola short ribs shoulder bacon biltong bresaola pork belly cow.</Text>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"},{"name":"Example4","description":"","code":"/* Extra-large Modal */\r\nimport React from 'react';\r\nimport { Modal, Button, Text } from '@occmundial/occ-atomic';\r\n\r\nexport default class Example4 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { show } = this.state;\r\n        return (\r\n            <div>\r\n                <Button onClick={this.toggle}>Show modal</Button>\r\n                <Modal\r\n                    container={document.body}\r\n                    show={show}\r\n                    onClose={this.toggle}\r\n                    title=\"Large modal\"\r\n                    mainBtn={{\r\n                        text:'Agree',\r\n                        onClick:() => {\r\n                            alert('Done!');\r\n                        }\r\n                    }}\r\n                    secBtn={{\r\n                        text:'Cancel',\r\n                        onClick:this.toggle\r\n                    }}\r\n                    size=\"xl\"\r\n                >\r\n                    <Text>Bacon ipsum dolor amet tenderloin short ribs sausage swine pancetta hamburger frankfurter, capicola alcatra pork belly fatback. Biltong filet mignon cupim prosciutto porchetta shank tail pig pork loin picanha bacon pancetta shankle. Filet mignon tongue jerky strip steak, spare ribs pork loin bresaola tenderloin shankle beef ribs salami. Bresaola cupim turkey pork belly, chicken beef ribs frankfurter jerky pork.</Text>\r\n                    <Text>Alcatra bresaola swine ham. Prosciutto brisket shankle, pork belly ham chuck bresaola swine cow sirloin. Tenderloin corned beef tongue t-bone chuck flank. Andouille leberkas pig sausage frankfurter, ham hock kielbasa prosciutto kevin drumstick flank beef picanha beef ribs chicken. Andouille buffalo jerky flank ball tip alcatra salami boudin fatback short loin turkey t-bone rump drumstick. Alcatra flank kevin brisket doner, frankfurter tenderloin pastrami fatback pork chop meatloaf cow filet mignon. Hamburger pancetta tenderloin, drumstick jowl strip steak chicken tongue corned beef meatball.</Text>\r\n                    <Text>Turducken leberkas chuck cow, cupim bresaola brisket tenderloin corned beef beef buffalo shoulder sirloin capicola jerky. Filet mignon pork chop andouille, turducken strip steak chicken biltong kielbasa frankfurter spare ribs rump short ribs short loin shoulder. Burgdoggen corned beef pork chuck beef ribs biltong. Burgdoggen salami short ribs chuck meatball pork loin, ham picanha pork. Sausage chicken spare ribs, pork belly meatloaf sirloin pork chop beef. Corned beef landjaeger beef ribs rump shank, salami tongue capicola short ribs shoulder bacon biltong bresaola pork belly cow.</Text>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"},{"name":"Example5","description":"","code":"/* Modal with image on the left */\r\nimport React from 'react';\r\nimport { Modal, Button, Text, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default class Example5 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { show } = this.state;\r\n        return (\r\n            <div>\r\n                <Button onClick={this.toggle}>Show modal</Button>\r\n                <Modal\r\n                    container={document.body}\r\n                    show={show}\r\n                    onClose={this.toggle}\r\n                    title=\"Modal\"\r\n                    mainBtn={{\r\n                        text:'Agree',\r\n                        onClick:() => {\r\n                            alert('Done!');\r\n                        }\r\n                    }}\r\n                    secBtn={{\r\n                        text:'Cancel',\r\n                        onClick:this.toggle\r\n                    }}\r\n                    imgLeft={{\r\n                        img: 'https://placeimg.com/300/1000/any',\r\n                        color: colors.bgGrey\r\n                    }}\r\n                    size=\"lg\"\r\n                >\r\n                    <Text>Bacon ipsum dolor amet kielbasa ham frankfurter pork loin pork chop pastrami t-bone beef salami, andouille venison shoulder jerky chuck. Tenderloin landjaeger shoulder ground round. Corned beef shankle tail andouille sausage chuck turkey pork chop pancetta flank burgdoggen boudin prosciutto buffalo. Picanha swine jowl ham hock cow bresaola meatball venison short loin cupim porchetta ham beef tenderloin. Cow sirloin landjaeger turkey corned beef frankfurter picanha ribeye ball tip pastrami. Shoulder spare ribs cow turkey beef ribs boudin pastrami ham hock shank biltong chuck bresaola t-bone.</Text>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"},{"name":"Example6","description":"","code":"/* Modal with image on top */\r\nimport React from 'react';\r\nimport { Modal, Button, Text, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default class Example6 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { show } = this.state;\r\n        return (\r\n            <div>\r\n                <Button onClick={this.toggle}>Show modal</Button>\r\n                <Modal\r\n                    container={document.body}\r\n                    show={show}\r\n                    onClose={this.toggle}\r\n                    title=\"Modal\"\r\n                    mainBtn={{\r\n                        text:'Agree',\r\n                        onClick:() => {\r\n                            alert('Done!');\r\n                        }\r\n                    }}\r\n                    secBtn={{\r\n                        text:'Cancel',\r\n                        onClick:this.toggle\r\n                    }}\r\n                    imgTop={{\r\n                        img: 'https://placeimg.com/1000/300/any',\r\n                        color: colors.bgGrey\r\n                    }}\r\n                    size=\"lg\"\r\n                >\r\n                    <Text>Bacon ipsum dolor amet kielbasa ham frankfurter pork loin pork chop pastrami t-bone beef salami, andouille venison shoulder jerky chuck. Tenderloin landjaeger shoulder ground round. Corned beef shankle tail andouille sausage chuck turkey pork chop pancetta flank burgdoggen boudin prosciutto buffalo. Picanha swine jowl ham hock cow bresaola meatball venison short loin cupim porchetta ham beef tenderloin. Cow sirloin landjaeger turkey corned beef frankfurter picanha ribeye ball tip pastrami. Shoulder spare ribs cow turkey beef ribs boudin pastrami ham hock shank biltong chuck bresaola t-bone.</Text>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"}]},{"name":"NavAside","description":"","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"top":{"type":{"name":"node"},"required":false,"description":"Will display any element in the top position"},"children":{"type":{"name":"node"},"required":false,"description":"Will display any element in the bottom position"},"width":{"type":{"name":"number"},"required":false,"description":"Custome width for aside"},"onClose":{"type":{"name":"func"},"required":false,"description":"Custome function for closing aside"},"show":{"type":{"name":"bool"},"required":false,"description":"Boolean value to show or hide the Aside component."},"onTransitionEnd":{"type":{"name":"func"},"required":false,"description":"This function is used by an internal wrapper component to manage the hiding animation and unmounting properly."},"right":{"type":{"name":"bool"},"required":false,"description":"Boolean value to show the Aside component in the right side"}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '../Card';\r\nimport Flexbox from '../Flexbox';\r\nimport Icon from '../Icon';\r\nimport colors from '../subatomic/colors';\r\n\r\nclass NavAside extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.onKeyDown);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.onKeyDown);\r\n    }\r\n\r\n    onKeyDown({ which }) {\r\n        if(which == 27) {\r\n            this.props.onClose();\r\n        }\r\n    }\r\n\r\n    avoidClose(e) {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        const { classes, top, children, onClose, show, width, onTransitionEnd, right } = this.props;\r\n        return (\r\n            <div className={`${show ? ` ${classes.overlay} ${classes.overlayShow}` : ` ${classes.overlay}`}`} onClick={onClose} onTransitionEnd={onTransitionEnd}>\r\n                <div className={`${show ? right ? `${classes.ShowElement} ${classes.OpenElementRight}` :`${classes.ShowElement} ${classes.OpenElement}` : `${classes.ShowElement}`}${width && right ? ` ${classes.customeWidthRight}` : ` ${classes.customeWidth}`}${right ? ` ${classes.showRight}` : ''}`} onClick={this.avoidClose}>\r\n                    <Card shadow={5} className={`${classes.card}`}>\r\n                        <Flexbox display=\"flex\" justifyContent=\"end\" alignItems=\"start\" className={classes.top}>\r\n                            {top && (\r\n                                <Flexbox flex=\"1\" className={classes.topContent}>\r\n                                    {top}\r\n                                </Flexbox>\r\n                            )}\r\n                            <div className={classes.closeIcon}>\r\n                                <Icon iconName=\"close\" width={24} height={24} colors={[colors.grey900]} onClick={onClose} />\r\n                            </div>\r\n                        </Flexbox>\r\n                        <div className={classes.content}>\r\n                            {children}\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNavAside.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    /** Will display any element in the top position */\r\n    top: PropTypes.node,\r\n    /** Will display any element in the bottom position */\r\n    children: PropTypes.node,\r\n    /** Custome width for aside */\r\n    width: PropTypes.number,\r\n     /** Custome function for closing aside */\r\n    onClose: PropTypes.func,\r\n    /** Boolean value to show or hide the Aside component. */\r\n    show: PropTypes.bool,\r\n     /** This function is used by an internal wrapper component to manage the hiding animation and unmounting properly. */\r\n     onTransitionEnd: PropTypes.func,\r\n    /** Boolean value to show the Aside component in the right side */\r\n    right: PropTypes.bool\r\n};\r\n\r\nexport default NavAside;\r\n","examples":[{"name":"Example1","description":"","code":"/* NavAside */\r\nimport React from 'react';\r\nimport { NavItem, Button, NavAside } from '@occmundial/occ-atomic';\r\n\r\nclass Example1 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { show } = this.state;\r\n        return (\r\n            <div>\r\n                <Button onClick={this.toggle}>Show Aside</Button>\r\n                <NavAside\r\n                container={document.body}\r\n                show={show}\r\n                onClose={this.toggle}\r\n                >\r\n                    <div>\r\n                        <NavItem link=\"#NavItem\" notification>Link With Notification</NavItem>\r\n                        <br />\r\n                        <NavItem link=\"#NavItem\" selected>Link Selected</NavItem>\r\n                        <br />\r\n                        <hr />\r\n                        <NavItem link=\"#NavItem\">Another Link</NavItem>\r\n                    </div>\r\n                </NavAside>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example1;\r\n"},{"name":"Example2","description":"","code":"/* Top */\r\nimport React from 'react';\r\nimport { NavItem, Button, NavAside, Icon, Flexbox, Text } from '@occmundial/occ-atomic';\r\n\r\nclass Example2 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { show } = this.state;\r\n        return (\r\n            <div>\r\n                <Button onClick={this.toggle}>Show Aside</Button>\r\n                <NavAside\r\n                container={document.body}\r\n                show={show}\r\n                onClose={this.toggle}\r\n                top={\r\n                  <Flexbox display=\"flex\" justifyContent=\"start\" alignItems=\"start\">\r\n                    <Icon iconName=\"user\" />\r\n                    <Text small>Recludator de Prueba</Text>\r\n                  </Flexbox>\r\n                }\r\n                >\r\n                    <div>\r\n                        <NavItem link=\"#NavItem\" notification>Link With Notification</NavItem>\r\n                        <br />\r\n                        <NavItem link=\"#NavItem\" selected>Link Selected</NavItem>\r\n                        <br />\r\n                        <hr />\r\n                        <NavItem link=\"#NavItem\">Another Link</NavItem>\r\n                    </div>\r\n                </NavAside>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example2;"},{"name":"Example3","description":"","code":"/* Width */\r\nimport React from 'react';\r\nimport { NavItem, Button, NavAside, Icon, Flexbox, Text } from '@occmundial/occ-atomic';\r\n\r\nclass Example3 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { show } = this.state;\r\n        return (\r\n            <div>\r\n                <Button onClick={this.toggle}>Show Aside</Button>\r\n                <NavAside\r\n                container={document.body}\r\n                show={show}\r\n                onClose={this.toggle}\r\n                top={\r\n                  <Flexbox display=\"flex\" justifyContent=\"start\" alignItems=\"start\">\r\n                    <Icon iconName=\"user\" />\r\n                    <Text small>Recludator de Prueba</Text>\r\n                  </Flexbox>\r\n                }\r\n                width={600}\r\n                >\r\n                    <div>\r\n                        <NavItem link=\"#NavItem\" notification>Link With Notification</NavItem>\r\n                        <br />\r\n                        <NavItem link=\"#NavItem\" selected>Link Selected</NavItem>\r\n                        <br />\r\n                        <hr />\r\n                        <NavItem link=\"#NavItem\">Another Link</NavItem>\r\n                    </div>\r\n                </NavAside>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example3;"},{"name":"Example4","description":"","code":"/* Right */\r\nimport React from 'react';\r\nimport { NavItem, Button, NavAside, Icon, Flexbox, Text } from '@occmundial/occ-atomic';\r\n\r\nclass Example4 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { show } = this.state;\r\n        return (\r\n            <div>\r\n                <Button onClick={this.toggle}>Show Aside</Button>\r\n                <NavAside\r\n                container={document.body}\r\n                show={show}\r\n                onClose={this.toggle}\r\n                top={\r\n                  <Flexbox display=\"flex\" justifyContent=\"start\" alignItems=\"start\">\r\n                    <Icon iconName=\"user\" />\r\n                    <Text small>Recludator de Prueba</Text>\r\n                  </Flexbox>\r\n                }\r\n                right\r\n                >\r\n                    <div>\r\n                        <NavItem link=\"#NavItem\" notification>Link With Notification</NavItem>\r\n                        <br />\r\n                        <NavItem link=\"#NavItem\" selected>Link Selected</NavItem>\r\n                        <br />\r\n                        <hr />\r\n                        <NavItem link=\"#NavItem\">Another Link</NavItem>\r\n                    </div>\r\n                </NavAside>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example4;"}]},{"name":"NavIcon","description":"","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"selected":{"type":{"name":"bool"},"required":false,"description":""},"iconName":{"type":{"name":"string"},"required":true,"description":""},"label":{"type":{"name":"string"},"required":false,"description":""},"onClick":{"type":{"name":"func"},"required":false,"description":""},"width":{"type":{"name":"number"},"required":false,"description":""},"showBar":{"type":{"name":"bool"},"required":false,"description":""},"direction":{"type":{"name":"enum","value":[{"value":"'col'","computed":false},{"value":"'row'","computed":false}]},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Text from '../Text';\r\nimport Flexbox from '../Flexbox';\r\n\r\nclass NavIcon extends React.Component {\r\n\r\n    render() {\r\n        const { classes, selected, label, onClick, direction, className } = this.props;\r\n        return (\r\n            <div className={`${classes.cont}${selected ? ` ${classes.selected}` : ''}${className ? ` ${className}` : ''}`} onClick={onClick}>\r\n                <Flexbox display=\"flex\" direction={direction} justifyContent=\"center\" alignItems=\"center\" className={classes.flex}>\r\n                    <div className={classes.icon} />\r\n                    {label && <Text micro><span className={classes.text}>{label}</span></Text>}\r\n                </Flexbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNavIcon.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    selected: PropTypes.bool,\r\n    iconName: PropTypes.string.isRequired,\r\n    label: PropTypes.string,\r\n    onClick: PropTypes.func,\r\n    width: PropTypes.number,\r\n    showBar: PropTypes.bool,\r\n    direction: PropTypes.oneOf(['col', 'row']),\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default NavIcon;\r\n","examples":[{"name":"Example1","description":"","code":"/* NavIcon with bar */\r\nimport React from 'react';\r\nimport { NavIcon, Card } from '@occmundial/occ-atomic';\r\n\r\nclass Example1 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: 0\r\n        };\r\n    }\r\n\r\n    onChange(selected) {\r\n        this.setState({ selected });\r\n    }\r\n\r\n    render() {\r\n        const { selected } = this.state;\r\n        return (\r\n            <Card noPadding style={{height: 64, display: 'flex'}}>\r\n                <NavIcon iconName=\"panel\" label=\"Activity\" width={120} selected={selected === 0} onClick={() => this.onChange(0)} showBar />\r\n                <NavIcon iconName=\"heart\"  label=\"Liked\" width={120} selected={selected === 1} onClick={() => this.onChange(1)} showBar />\r\n                <NavIcon iconName=\"search\" label=\"Search\" width={120} selected={selected === 2} onClick={() => this.onChange(2)} showBar />\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example1;\r\n"},{"name":"Example2","description":"","code":"/* NavIcon with text below */\r\nimport React from 'react';\r\nimport { NavIcon, Card } from '@occmundial/occ-atomic';\r\n\r\nclass Example2 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: 0\r\n        };\r\n    }\r\n\r\n    onChange(selected) {\r\n        this.setState({ selected });\r\n    }\r\n\r\n    render() {\r\n        const { selected } = this.state;\r\n        return (\r\n            <Card noPadding style={{height: 64, display: 'flex'}}>\r\n                <NavIcon iconName=\"panel\" label=\"Activity\" direction=\"col\" width={80} selected={selected === 0} onClick={() => this.onChange(0)} />\r\n                <NavIcon iconName=\"heart\"  label=\"Liked\" direction=\"col\" width={80} selected={selected === 1} onClick={() => this.onChange(1)} />\r\n                <NavIcon iconName=\"search\" label=\"Search\" direction=\"col\" width={80} selected={selected === 2} onClick={() => this.onChange(2)} />\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example2;\r\n"}]},{"name":"NavItem","description":"This component is used inside the NavTab component. You can just pass a link and a text, wrap it or send a custom link component.","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"children":{"type":{"name":"node"},"required":true,"description":""},"link":{"type":{"name":"string"},"required":false,"description":"URL for the anchor tag."},"target":{"type":{"name":"string"},"required":false,"description":"Target for the link."},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call on click, instead of passing a link."},"selected":{"type":{"name":"bool"},"required":false,"description":"Set the item as selected."},"small":{"type":{"name":"bool"},"required":false,"description":"Renders the text as small."},"notification":{"type":{"name":"bool"},"required":false,"description":"Shows a red circle floating in the top right side of the item."},"white":{"type":{"name":"bool"},"required":false,"description":"White theme for the NavItem."},"customComponent":{"type":{"name":"node"},"required":false,"description":"Use a custom component to replace the default <a> tag. This is useful if you use a routing library."},"customProps":{"type":{"name":"object"},"required":false,"description":"Custom properties to apply directly to the custom component."},"className":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Text from '../Text';\r\n\r\n/** This component is used inside the NavTab component. You can just pass a link and a text, wrap it or send a custom link component. */\r\nclass NavItem extends React.Component {\r\n\r\n    render() {\r\n        const { classes, customComponent, customProps, link, target, onClick, children, selected, notification, white, small, className } = this.props;\r\n        const AnchorTag = customComponent ? customComponent : 'a';\r\n        return (\r\n            <AnchorTag className={`${classes.link}${className ? ` ${className}` : ''}`} href={!selected ? link : null} onClick={!selected ? onClick : null} target={target} {...customComponent && customProps}>\r\n                <Text tag=\"span\" white={white} small={small} className={`${classes.text}${selected ? ` ${classes.selected}` : ''}`}>{children}</Text>\r\n                {notification && <span className={classes.notification} />}\r\n            </AnchorTag>\r\n        );\r\n    }\r\n}\r\n\r\nNavItem.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n    /** URL for the anchor tag. */\r\n    link: PropTypes.string,\r\n    /** Target for the link. */\r\n    target: PropTypes.string,\r\n    /** Function to call on click, instead of passing a link. */\r\n    onClick: PropTypes.func,\r\n    /** Set the item as selected. */\r\n    selected: PropTypes.bool,\r\n    /** Renders the text as small. */\r\n    small: PropTypes.bool,\r\n    /** Shows a red circle floating in the top right side of the item. */\r\n    notification: PropTypes.bool,\r\n    /** White theme for the NavItem. */\r\n    white: PropTypes.bool,\r\n    /** Use a custom component to replace the default <a> tag. This is useful if you use a routing library. */\r\n    customComponent: PropTypes.node,\r\n    /** Custom properties to apply directly to the custom component. */\r\n    customProps: PropTypes.object,\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default NavItem;\r\n","examples":[{"name":"Example1","description":"","code":"/* NavItem */\r\nimport React from 'react';\r\nimport { NavItem } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <NavItem>NavItem content</NavItem>\r\n            <NavItem link=\"#NavItem\" selected>NavItem content</NavItem>\r\n            <NavItem link=\"#NavItem\" notification>Busco Personal</NavItem>\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* NavItem white */\r\nimport React from 'react';\r\nimport { NavItem, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div style={{background: colors.prim}}>\r\n            <NavItem white link=\"#NavItem\">NavItem content</NavItem>\r\n            <NavItem white link=\"#NavItem\" selected>NavItem content</NavItem>\r\n            <NavItem white link=\"#NavItem\" notification>Busco Personal</NavItem>\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example3","description":"","code":"/* NavItem small */\r\nimport React from 'react';\r\nimport { NavItem } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <NavItem link=\"#NavItem\" small>NavItem content</NavItem>\r\n            <NavItem link=\"#NavItem\" small selected>NavItem content</NavItem>\r\n            <NavItem link=\"#NavItem\" small notification>Busco Personal</NavItem>\r\n        </div>\r\n    );\r\n}\r\n"}]},{"name":"NavTab","description":"","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"left":{"type":{"name":"custom","raw":"positionPropTypes"},"required":false,"description":"Array of items to display in the left position."},"right":{"type":{"name":"custom","raw":"positionPropTypes"},"required":false,"description":"Array of items to display in the right position."},"center":{"type":{"name":"custom","raw":"positionPropTypes"},"required":false,"description":"Array of items to display in the center position."},"flexCenter":{"type":{"name":"custom","raw":"positionPropTypes"},"required":false,"description":"Array of items to display in a flexible center position."},"top":{"type":{"name":"custom","raw":"positionPropTypes"},"required":false,"description":"Array of items to display in the top position."},"blue":{"type":{"name":"bool"},"required":false,"description":"Defines the theme of the Navtab as blue."},"fixed":{"type":{"name":"bool"},"required":false,"description":"Defines if the NavTab will be fixed to the top."},"hideOnScroll":{"type":{"name":"bool"},"required":false,"description":"The NavTab will dissapear when scrolling down, and appear when scrolling up."},"bottom":{"type":{"name":"bool"},"required":false,"description":"Fixes the NavTab to the bottom of the screen (you have to also set fixed as true)."},"zIndex":{"type":{"name":"number"},"required":false,"description":"Implement a custom zIndex value (default is 999)."},"className":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Grid from '../Grid';\r\nimport Flexbox from '../Flexbox';\r\nimport NavItem from '../NavItem';\r\nimport NavIcon from '../NavIcon';\r\nimport NavTop from '../NavTop';\r\nimport Button from '../Button';\r\nimport Icon from '../Icon';\r\nimport WindowSize from '../WindowSize';\r\nimport colors from '../subatomic/colors';\r\nimport spacing from '../subatomic/spacing';\r\nimport grid from '../subatomic/grid';\r\n\r\nclass NavTab extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: true,\r\n            currentScroll: 0\r\n        };\r\n        this.determineVisibility = this.determineVisibility.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { fixed, hideOnScroll } = this.props;\r\n        if (fixed && hideOnScroll) {\r\n            this.getInitialScrollPosition();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.determineVisibility);\r\n    }\r\n\r\n    getInitialScrollPosition() {\r\n        window.addEventListener('scroll', this.determineVisibility);\r\n        this.setState({\r\n            currentScroll: window.pageYOffset\r\n        });\r\n    }\r\n\r\n    determineVisibility() {\r\n        const { currentScroll } = this.state;\r\n        this.setState({\r\n            show: window.pageYOffset <= spacing.xLarge || window.pageYOffset <= currentScroll,\r\n            currentScroll: window.pageYOffset\r\n        });\r\n    }\r\n\r\n    renderItem(item) {\r\n        if (item.type == 'link')\r\n            return this.renderLink(item);\r\n        else if (item.type == 'dropdownLink')\r\n            return this.renderDropdownLink(item);\r\n        else if (item.type == 'button')\r\n            return this.renderButton(item);\r\n        else if (item.type == 'icon')\r\n            return this.renderIcon(item);\r\n        else if (item.type == 'logo')\r\n            return this.renderLogo(item);\r\n        else if (item.type == 'custom')\r\n            return this.renderCustom(item);\r\n    }\r\n\r\n    renderLink(item) {\r\n        const { classes, blue } = this.props;\r\n        return (\r\n            <NavItem white={blue} {...item} className={classes.navItem}>\r\n                {item.text}\r\n            </NavItem>\r\n        );\r\n    }\r\n\r\n    renderDropdownLink(item) {\r\n        const { classes, blue } = this.props;\r\n        return (\r\n            <NavItem white={blue} {...item} selected={false} className={classes.navItem}>\r\n                {item.text} <Icon iconName=\"arrowDown\" className={`${classes.arrow}${item.selected ? ` ${classes.arrowUp}` : ''}`} colors={blue ? [colors.white] : [colors.grey900]} />\r\n            </NavItem>\r\n        );\r\n    }\r\n\r\n    renderButton(item) {\r\n        const { classes } = this.props;\r\n        return (\r\n            <Button className={classes.button} {...item}>\r\n                {item.text}\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderIcon(item) {\r\n        const { classes, blue } = this.props;\r\n        return (\r\n            <div className={classes.iconWrap} key={item.key}>\r\n                <NavIcon className={classes.icon} white={blue} {...item} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderLogo(item) {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.logo} key={item.key}>\r\n                {item.logo}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCustom(item) {\r\n        return (\r\n            <div key={item.key}>\r\n                {item.custom}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { show, currentScroll } = this.state;\r\n        const { classes, blue, left, right, center, flexCenter, top, fixed, bottom, className, winWidth, zIndex } = this.props;\r\n        const isFluid = winWidth < grid.xl;\r\n        return (\r\n            <div\r\n                className={`${classes.container}${fixed ? ` ${classes.fixed} ${show ? classes.show : classes.hide}${currentScroll > 0 ? ` ${classes.isScrolled}` : ''}${bottom ? ` ${classes.bottom}` : ''}` : ''}${className ? ` ${className}` : ''}`}\r\n                style={zIndex ? {zIndex} : null}\r\n            >\r\n                {top && (\r\n                    <NavTop blue={blue} top={top} isFluid={isFluid} />\r\n                )}\r\n                <div className={`${classes.nav} ${blue ? classes.blue : classes.white}`}>\r\n                    <Grid className={classes.grid} fluid={isFluid}>\r\n                        <Flexbox display=\"flex\" justifyContent=\"between\" alignItems=\"center\" className={classes.tab}>\r\n                            {left && (\r\n                                <Flexbox display=\"flex\" className={classes.left} alignItems=\"center\">\r\n                                    {left.map(item => {\r\n                                        return this.renderItem(item);\r\n                                    })}\r\n                                </Flexbox>\r\n                            )}\r\n                            {flexCenter ? (\r\n                                <Flexbox display=\"flex\" flex=\"1\" className={classes.flexCenter} alignItems=\"center\" justifyContent=\"between\">\r\n                                    {flexCenter.map(item => {\r\n                                        return this.renderItem(item);\r\n                                    })}\r\n                                </Flexbox>\r\n                            ) : (\r\n                                <Flexbox flex=\"1\" />\r\n                            )}\r\n                            {right && (\r\n                                <Flexbox display=\"flex\" className={classes.right} alignItems=\"center\">\r\n                                    {right.map(item => {\r\n                                        return this.renderItem(item);\r\n                                    })}\r\n                                </Flexbox>\r\n                            )}\r\n                            {center && (\r\n                                <Flexbox display=\"flex\" className={classes.center} alignItems=\"center\">\r\n                                    {center.map(item => {\r\n                                        return this.renderItem(item);\r\n                                    })}\r\n                                </Flexbox>\r\n                            )}\r\n                        </Flexbox>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst positionPropTypes = PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n        key: PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.number\r\n        ]),\r\n        type: PropTypes.oneOf([\r\n            'button',\r\n            'link',\r\n            'dropdownLink',\r\n            'icon',\r\n            'custom',\r\n            'logo'\r\n        ]),\r\n        text: PropTypes.string,\r\n        onClick: PropTypes.func,\r\n        selected: PropTypes.bool,\r\n        link: PropTypes.string,\r\n        theme: PropTypes.oneOf([\r\n            'primary', 'secondary', 'tertiary', 'tertiaryWhite', 'ghostPink', 'ghostGrey', 'ghostWhite'\r\n        ]),\r\n        iconName: PropTypes.string,\r\n        custom: PropTypes.node\r\n    })\r\n);\r\n\r\nNavTab.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    /** Array of items to display in the left position. */\r\n    left: positionPropTypes,\r\n    /** Array of items to display in the right position. */\r\n    right: positionPropTypes,\r\n    /** Array of items to display in the center position. */\r\n    center: positionPropTypes,\r\n    /** Array of items to display in a flexible center position. */\r\n    flexCenter: positionPropTypes,\r\n    /** Array of items to display in the top position. */\r\n    top: positionPropTypes,\r\n    /** Defines the theme of the Navtab as blue. */\r\n    blue: PropTypes.bool,\r\n    /** Defines if the NavTab will be fixed to the top. */\r\n    fixed: PropTypes.bool,\r\n    /** The NavTab will dissapear when scrolling down, and appear when scrolling up. */\r\n    hideOnScroll: PropTypes.bool,\r\n    /** Fixes the NavTab to the bottom of the screen (you have to also set fixed as true). */\r\n    bottom: PropTypes.bool,\r\n    /** Implement a custom zIndex value (default is 999). */\r\n    zIndex: PropTypes.number,\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default WindowSize(NavTab);\r\n","examples":[{"name":"Example1","description":"","code":"/* NavTab with NavTop */\r\nimport React from 'react';\r\nimport { NavTab, Icon } from '@occmundial/occ-atomic';\r\n\r\nclass Example1 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dropdown: false\r\n        };\r\n        this.onDrop = this.onDrop.bind(this);\r\n    }\r\n\r\n    onDrop() {\r\n        const { dropdown } = this.state;\r\n        this.setState({\r\n            dropdown: !dropdown\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { dropdown } = this.state;\r\n        const left = [\r\n            {\r\n                key:0,\r\n                type: 'logo',\r\n                logo: (\r\n                    <a href=\"#NavTab\">\r\n                        <Icon iconName=\"occHorizontalWhite\" />\r\n                    </a>\r\n                )\r\n            },\r\n            {\r\n                key:1,\r\n                type:'dropdownLink',\r\n                text:'Dropdown link',\r\n                onClick: this.onDrop,\r\n                selected: dropdown\r\n            },\r\n            {\r\n                key:2,\r\n                type:'link',\r\n                text:'Standard link',\r\n                link:'#NavTab'\r\n            }\r\n        ];\r\n        const right = [\r\n            {\r\n                key:1,\r\n                type:'button',\r\n                text:'Primary CTA',\r\n                theme:'primary'\r\n            },\r\n            {\r\n                key:2,\r\n                type:'button',\r\n                text:'Secondary CTA',\r\n                theme:'ghostWhite'\r\n            }\r\n        ];\r\n        const right2 = [\r\n            {\r\n                key:1,\r\n                type:'button',\r\n                text:'Primary CTA',\r\n                theme:'ghostPink'\r\n            },\r\n            {\r\n                key:2,\r\n                type:'button',\r\n                text:'Secondary CTA',\r\n                theme:'ghostGrey'\r\n            }\r\n        ];\r\n        const top = [\r\n            {\r\n                key:1,\r\n                text:'First link',\r\n                link:'#NavTab'\r\n            },\r\n            {\r\n                key:2,\r\n                text:'Current link',\r\n                link:'#NavTab',\r\n                selected: true\r\n            },\r\n            {\r\n                key:3,\r\n                text:'onClick item',\r\n                onClick:() => { console.log('whatever'); }\r\n            }\r\n        ];\r\n        const left2 = [...left];\r\n        left2[0] = {\r\n            key:0,\r\n            type: 'custom',\r\n            custom: (\r\n                <a href=\"#NavTab\" style={{marginRight:32, display:'inline-block'}}>\r\n                    <Icon iconName=\"occHorizontalGrey\" />\r\n                </a>\r\n            )\r\n        };\r\n        return (\r\n            <div>\r\n                <NavTab top={top} blue left={left} right={right} />\r\n                <NavTab top={top} left={left2} right={right2} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example1;\r\n"},{"name":"Example2","description":"","code":"/* NavTab with center */\r\nimport React from 'react';\r\nimport { NavTab } from '@occmundial/occ-atomic';\r\n\r\nclass Example2 extends React.Component {\r\n\r\n    render() {\r\n        const left = [\r\n            {\r\n                key:1,\r\n                type: 'icon',\r\n                iconName: 'bars'\r\n            }\r\n        ];\r\n        const right = [\r\n            {\r\n                key:1,\r\n                type:'icon',\r\n                iconName:'messages'\r\n            }\r\n        ];\r\n        const center = [\r\n            {\r\n                key:1,\r\n                type:'icon',\r\n                iconName:'panel'\r\n            },\r\n            {\r\n                key:2,\r\n                type:'icon',\r\n                iconName:'search'\r\n            },\r\n            {\r\n                key:3,\r\n                type:'icon',\r\n                iconName:'user'\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                <NavTab blue left={left} center={center} right={right} />\r\n                <NavTab left={left} center={center} right={right} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example2;\r\n"},{"name":"Example3","description":"","code":"/* NavTab with NavIcons switching */\r\nimport React from 'react';\r\nimport { NavTab, Icon, colors } from '@occmundial/occ-atomic';\r\n\r\nclass Example3 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: false\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(selected) {\r\n        this.setState({ selected });\r\n    }\r\n\r\n    render() {\r\n        const { selected } = this.state;\r\n        const left = [\r\n            {\r\n                key:1,\r\n                type: 'logo',\r\n                logo: (\r\n                    <a href=\"#NavTab\">\r\n                        <Icon iconName=\"occHorizontalWhite\" colors={[colors.bgWhite]} />\r\n                    </a>\r\n                )\r\n            }\r\n        ];\r\n        const left2 = [\r\n            {\r\n                key:1,\r\n                type: 'logo',\r\n                logo: (\r\n                    <a href=\"#NavTab\">\r\n                        <Icon iconName=\"occHorizontalGrey\" colors={[colors.grey700]} />\r\n                    </a>\r\n                )\r\n            }\r\n        ];\r\n        const right = [\r\n            {\r\n                key:1,\r\n                type:'icon',\r\n                iconName:'cart',\r\n                selected: selected === 'cart',\r\n                onClick: () => this.onChange('cart'),\r\n                showBar: true\r\n            },\r\n            {\r\n                key:2,\r\n                type:'icon',\r\n                iconName:'messages',\r\n                selected: selected === 'messages',\r\n                onClick: () => this.onChange('messages'),\r\n                showBar: true\r\n            },\r\n            {\r\n                key: 3,\r\n                type: 'button',\r\n                text: 'Juan Alvez',\r\n                size: 'md',\r\n                theme: 'tertiaryWhite'\r\n            }\r\n        ];\r\n        const center = [\r\n            {\r\n                key:1,\r\n                type:'icon',\r\n                iconName:'panel',\r\n                label: 'Dashboard',\r\n                selected: selected === 'dashboard',\r\n                onClick: () => this.onChange('dashboard'),\r\n                showBar: true\r\n            },\r\n            {\r\n                key:2,\r\n                type:'icon',\r\n                iconName:'search',\r\n                label: 'Search',\r\n                selected: selected === 'search',\r\n                onClick: () => this.onChange('search'),\r\n                showBar: true\r\n            },\r\n            {\r\n                key:3,\r\n                type:'icon',\r\n                iconName:'user',\r\n                label: 'Profile',\r\n                selected: selected === 'profile',\r\n                onClick: () => this.onChange('profile'),\r\n                showBar: true\r\n            }\r\n        ];\r\n        const right2 = [...right];\r\n        right2[2] = {\r\n            key: 3,\r\n            type: 'button',\r\n            text: 'Juan Alvez',\r\n            size: 'md',\r\n            theme: 'ghostGrey'\r\n        };\r\n        return (\r\n            <div>\r\n                <NavTab blue left={left} center={center} right={right} />\r\n                <NavTab left={left2} center={center} right={right2} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example3;\r\n"},{"name":"Example4","description":"","code":"/* NavTab with menu button */\r\nimport React from 'react';\r\nimport { NavTab, Icon, colors } from '@occmundial/occ-atomic';\r\n\r\nclass Example4 extends React.Component {\r\n\r\n    render() {\r\n        const left = [\r\n            {\r\n                key:1,\r\n                type: 'logo',\r\n                logo: (\r\n                    <a href=\"#NavTab\">\r\n                        <Icon iconName=\"occHorizontalWhite\" colors={[colors.bgWhite]} />\r\n                    </a>\r\n                )\r\n            }\r\n        ];\r\n        const left2 = [\r\n            {\r\n                key:1,\r\n                type: 'logo',\r\n                logo: (\r\n                    <a href=\"#NavTab\">\r\n                        <Icon iconName=\"occHorizontalGrey\" colors={[colors.grey700]} />\r\n                    </a>\r\n                )\r\n            }\r\n        ];\r\n        const right = [\r\n            {\r\n                key: 0,\r\n                type: 'icon',\r\n                iconName: 'bars'\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                <NavTab blue left={left} right={right} />\r\n                <NavTab left={left2} right={right} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example4;\r\n"},{"name":"Example5","description":"","code":"/* NavTab with icons */\r\nimport React from 'react';\r\nimport { NavTab } from '@occmundial/occ-atomic';\r\n\r\nclass Example5 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: false\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(selected) {\r\n        this.setState({ selected });\r\n    }\r\n\r\n    render() {\r\n        const { selected } = this.state;\r\n        const flexCenter = [\r\n            {\r\n                key:1,\r\n                type:'icon',\r\n                iconName:'panel',\r\n                label: 'Dashboard',\r\n                selected: selected === 'dashboard',\r\n                onClick: () => this.onChange('dashboard'),\r\n                direction: 'col',\r\n                width: 96\r\n            },\r\n            {\r\n                key:2,\r\n                type:'icon',\r\n                iconName:'search',\r\n                label: 'Search',\r\n                selected: selected === 'search',\r\n                onClick: () => this.onChange('search'),\r\n                direction: 'col',\r\n                width: 96\r\n            },\r\n            {\r\n                key:3,\r\n                type:'icon',\r\n                iconName:'user',\r\n                label: 'Profile',\r\n                selected: selected === 'profile',\r\n                onClick: () => this.onChange('profile'),\r\n                direction: 'col',\r\n                width: 96\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                <NavTab blue flexCenter={flexCenter} />\r\n                <NavTab flexCenter={flexCenter} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example5;\r\n"}]},{"name":"NavTop","description":"","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"top":{"type":{"name":"array"},"required":false,"description":""},"blue":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Flexbox from '../Flexbox';\r\nimport Grid from '../Grid';\r\nimport NavItem from '../NavItem';\r\n\r\nclass NavTop extends React.Component {\r\n\r\n    renderTopLink(item) {\r\n        const { classes, blue } = this.props;\r\n        return (\r\n            <NavItem small white={blue} {...item} className={`${classes.navItem}${blue ? ` ${classes.whiteItem}` : ''}`}>\r\n                {item.text}\r\n            </NavItem>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { classes, blue, top, isFluid } = this.props;\r\n        return (\r\n            <div className={`${classes.top} ${blue ? classes.blue : classes.white}`}>\r\n                <Grid className={classes.fullHeight} fluid={isFluid}>\r\n                    <Flexbox display=\"flex\" alignItems=\"center\" className={classes.fullHeight}>\r\n                        <div>\r\n                            {top && top.map(item => {\r\n                                return this.renderTopLink(item);\r\n                            })}\r\n                        </div>\r\n                    </Flexbox>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNavTop.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    top: PropTypes.array,\r\n    blue: PropTypes.bool\r\n};\r\n\r\nexport default NavTop;\r\n","examples":[]},{"name":"OrderBy","description":"The OrderBy component shows a label and a dropdown with the values to order a set of items. You have to do that ordering by receiving the OrderBy value with an onChange function.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"text":{"type":{"name":"string"},"required":false,"description":"Text to be displayed on the left."},"options":{"type":{"name":"array"},"required":true,"description":"Array with all the options to show in the dropdown."},"selected":{"type":{"name":"node"},"required":false,"description":"Set a default value."},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call when the value of the dropdown changes."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Text from '../Text';\r\nimport Icon from '../Icon';\r\nimport Flexbox from '../Flexbox';\r\nimport Card from '../Card';\r\nimport colors from '../subatomic/colors';\r\n\r\n/** The OrderBy component shows a label and a dropdown with the values to order a set of items. You have to do that ordering by receiving the OrderBy value with an onChange function. */\r\nclass OrderBy extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            display: false\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.toggleCard = this.toggleCard.bind(this);\r\n        this.hideCard = this.hideCard.bind(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('click', this.hideCard);\r\n    }\r\n\r\n    toggleCard(e) {\r\n        const { display } = this.state;\r\n        e.stopPropagation();\r\n        if (!display) {\r\n            window.addEventListener('click', this.hideCard);\r\n        }\r\n        this.setState({\r\n            display: !display\r\n        });\r\n    }\r\n\r\n    hideCard() {\r\n        this.setState({\r\n            display: false\r\n        });\r\n        window.removeEventListener('click', this.hideCard);\r\n    }\r\n\r\n    onChange(value) {\r\n        const { onChange } = this.props;\r\n        if (onChange) onChange(value);\r\n        this.hideCard();\r\n    }\r\n\r\n    stopPropagation(e) {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        const { display } = this.state;\r\n        const { classes, text, options, selected, id, className, style } = this.props;\r\n        const selectedOption = options.filter(option => option.value == selected);\r\n        const selectedText = selectedOption.length && selectedOption[0].text ? selectedOption[0].text : '';\r\n        return (\r\n            <div className={`${classes.wrap}${className ? ` ${className}` : ''}`} id={id} style={style}>\r\n                <div className={classes.button} onClick={this.toggleCard}>\r\n                    <Flexbox display=\"inline-flex\">\r\n                        <Text small mid>{text} {selectedText}</Text>\r\n                        <Icon iconName=\"arrowDown\" colors={[colors.grey600]} className={classes.icon} />\r\n                    </Flexbox>\r\n                </div>\r\n                <div onClick={this.stopPropagation} className={`${classes.cardWrap}${display ? ` ${classes.show}` : ''}`}>\r\n                    <Card className={classes.card}>\r\n                        {options.map(option => (\r\n                            <div className={classes.option} key={option.value} onClick={() => { this.onChange(option.value); }}>\r\n                                <Text value={option.value}>{option.text}</Text>\r\n                            </div>\r\n                        ))}\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nOrderBy.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Text to be displayed on the left. */\r\n    text: PropTypes.string,\r\n    /** Array with all the options to show in the dropdown. */\r\n    options: PropTypes.array.isRequired,\r\n    /** Set a default value. */\r\n    selected: PropTypes.node,\r\n    /** Function to call when the value of the dropdown changes. */\r\n    onChange: PropTypes.func,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default OrderBy;\r\n","examples":[{"name":"Example1","description":"","code":"/* OrderBy */\r\nimport React from 'react';\r\nimport { OrderBy } from '@occmundial/occ-atomic';\r\n\r\nexport default class Example1 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: 1\r\n        };\r\n        this.changeSelected = this.changeSelected.bind(this);\r\n    }\r\n\r\n    changeSelected(selected) {\r\n        this.setState({\r\n            selected\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { selected } = this.state;\r\n\r\n        const options = [\r\n            {value:1, text:'Price'},\r\n            {value:2, text:'Date'},\r\n            {value:3, text:'Name'}\r\n        ];\r\n\r\n        return (\r\n            <div style={{ float:'right' }}>\r\n                <OrderBy text=\"Order by\" options={options} selected={selected} onChange={this.changeSelected} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"}]},{"name":"Pager","description":"This pager allows the user to navigate between pages with 'Next' and 'Previous' buttons and numerical buttons.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"pageCount":{"type":{"name":"number"},"required":false,"description":"The total number of pages.","defaultValue":{"value":"10","computed":false}},"pageRangeDisplayed":{"type":{"name":"number"},"required":false,"description":"The number of page numbers displayed at the center, between the '...' separators.","defaultValue":{"value":"2","computed":false}},"marginPagesDisplayed":{"type":{"name":"number"},"required":false,"description":"The number of page numbers displayed on the sides of the pager.","defaultValue":{"value":"3","computed":false}},"previousLabel":{"type":{"name":"node"},"required":false,"description":"The label for the 'Previous' button.","defaultValue":{"value":"'Previous'","computed":false}},"nextLabel":{"type":{"name":"node"},"required":false,"description":"The label for the 'Next' button.","defaultValue":{"value":"'Next'","computed":false}},"onPageChange":{"type":{"name":"func"},"required":false,"description":"Function to call after clicking a button to change the page."},"initialPage":{"type":{"name":"number"},"required":false,"description":"Default page to start the Pager."},"forcePage":{"type":{"name":"number"},"required":false,"description":"Force a page change externally."},"disableInitialCallback":{"type":{"name":"bool"},"required":false,"description":"By default, a callback triggers after mounting, calling the onPageChange function. Set this to false if you don't want that to happen.","defaultValue":{"value":"false","computed":false}},"hideNumbers":{"type":{"name":"bool"},"required":false,"description":"Hide the numerical buttons, leaving just the 'Next' and 'Previous' buttons to interact with.","defaultValue":{"value":"false","computed":false}},"breakLabel":{"type":{"name":"string"},"required":false,"description":"Label for the separators.","defaultValue":{"value":"'...'","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Icon from '../Icon';\r\n\r\nimport Page from './Page';\r\nimport Break from './Break';\r\n\r\n/** This pager allows the user to navigate between pages with 'Next' and 'Previous' buttons and numerical buttons. */\r\nclass Pager extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected:props.initialPage ? props.initialPage : props.forcePage ? props.forcePage : 1\r\n        };\r\n        this.callCallback = this.callCallback.bind(this);\r\n        this.handlePrevPage = this.handlePrevPage.bind(this);\r\n        this.handleNextPage = this.handleNextPage.bind(this);\r\n        this.handlePageSelected = this.handlePageSelected.bind(this);\r\n        this.getPageElement = this.getPageElement.bind(this);\r\n        this.pagination = this.pagination.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const { initialPage, disableInitialCallback } = this.props;\r\n        if (typeof(initialPage) != 'undefined' && !disableInitialCallback) {\r\n            this.callCallback(initialPage);\r\n        }\r\n    }\r\n    \r\n    componentWillReceiveProps(props) {\r\n        if (typeof(props.forcePage) != 'undefined' && this.props.forcePage != props.forcePage) {\r\n          this.setState({selected: props.forcePage});\r\n        }\r\n    }\r\n    \r\n    callCallback(selectedItem) {\r\n        const { onPageChange } = this.props;\r\n        if (typeof(onPageChange) != 'undefined' && typeof(onPageChange) == 'function') {\r\n            onPageChange({selected: selectedItem});\r\n        }\r\n    }\r\n    \r\n    handlePrevPage(e) {\r\n        const { selected } = this.state;\r\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\r\n        if (selected > 1) {\r\n            this.handlePageSelected(selected - 1, e);\r\n        }\r\n    }\r\n    \r\n    handleNextPage(e) {\r\n        const { selected } = this.state;\r\n        const { pageCount } = this.props;\r\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\r\n        if (selected < pageCount) {\r\n            this.handlePageSelected(selected + 1, e);\r\n        }\r\n    }\r\n    \r\n    handlePageSelected(selected, e) {\r\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\r\n        if (this.state.selected == selected) return;\r\n        this.setState({selected});\r\n        this.callCallback(selected);\r\n    }\r\n    \r\n    getPageElement(index) {\r\n        const { selected } = this.state;\r\n        return (\r\n            <Page\r\n                key={index}\r\n                onClick={this.handlePageSelected.bind(null, index)}\r\n                selected={selected == index}\r\n                page={index}\r\n            />\r\n        );\r\n    }\r\n    \r\n    pagination() {\r\n        const items = [];\r\n        const { selected } = this.state;\r\n        const { pageRangeDisplayed, pageCount, marginPagesDisplayed, breakLabel } = this.props;\r\n        \r\n        if (pageCount <= pageRangeDisplayed) {\r\n            for (let index = 1; index <= pageCount; index++) {\r\n                items.push(this.getPageElement(index));\r\n            }\r\n        } else {\r\n            let leftSide  = (pageRangeDisplayed / 2);\r\n            let rightSide = (pageRangeDisplayed - leftSide);\r\n            \r\n            if (selected > pageCount - pageRangeDisplayed / 2) {\r\n                rightSide = pageCount - selected;\r\n                leftSide  = pageRangeDisplayed - rightSide;\r\n            } else if (selected < pageRangeDisplayed / 2) {\r\n                leftSide  = selected;\r\n                rightSide = pageRangeDisplayed - leftSide;\r\n            }\r\n            \r\n            let index;\r\n            let page;\r\n            let breakView;\r\n            let createPage = (index) => this.getPageElement(index);\r\n            \r\n            for (index = 1; index <= pageCount; index++) {\r\n                page = index;\r\n                \r\n                if (page <= marginPagesDisplayed) {\r\n                    items.push(createPage(index));\r\n                    continue;\r\n                }\r\n                \r\n                if (page > pageCount - marginPagesDisplayed) {\r\n                    items.push(createPage(index));\r\n                    continue;\r\n                }\r\n                \r\n                if ((index >= selected - leftSide) && (index <= selected + rightSide)) {\r\n                    items.push(createPage(index));\r\n                    continue;\r\n                }\r\n                \r\n                if (breakLabel && items[items.length - 1] != breakView) {\r\n                    breakView = (\r\n                        <Break\r\n                            key={index}\r\n                            label={breakLabel}\r\n                        />\r\n                    );\r\n                    items.push(breakView);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return items;\r\n    }\r\n    \r\n    render() {\r\n        const { selected } = this.state;\r\n        const { classes, pageCount, previousLabel, nextLabel, hideNumbers, className } = this.props;\r\n        return (\r\n            <ul className={`${classes.pager}${className ? ` ${className}` : ''}`}>\r\n                <li className={`${classes.btn} ${classes.prev}${selected == 1 ? ` ${classes.disabled}` : ''}`} tabIndex=\"0\" onClick={this.handlePrevPage}>\r\n                    <Icon iconName=\"arrowDown\" colors={['#adb4bb']} /> {previousLabel}\r\n                </li>\r\n                {!hideNumbers && this.pagination()}\r\n                <li className={`${classes.btn} ${classes.next}${selected == pageCount ? ` ${classes.disabled}` : ''}`} tabIndex=\"0\" onClick={this.handleNextPage}>\r\n                    {nextLabel} <Icon iconName=\"arrowDown\" colors={['#adb4bb']} />\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nPager.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** The total number of pages. */\r\n    pageCount: PropTypes.number.isRequired,\r\n    /** The number of page numbers displayed at the center, between the '...' separators. */\r\n    pageRangeDisplayed: PropTypes.number.isRequired,\r\n    /** The number of page numbers displayed on the sides of the pager. */\r\n    marginPagesDisplayed: PropTypes.number.isRequired,\r\n    /** The label for the 'Previous' button. */\r\n    previousLabel: PropTypes.node,\r\n    /** The label for the 'Next' button. */\r\n    nextLabel: PropTypes.node,\r\n    /** Function to call after clicking a button to change the page. */\r\n    onPageChange: PropTypes.func,\r\n    /** Default page to start the Pager. */\r\n    initialPage: PropTypes.number,\r\n    /** Force a page change externally. */\r\n    forcePage: PropTypes.number,\r\n    /** By default, a callback triggers after mounting, calling the onPageChange function. Set this to false if you don't want that to happen. */\r\n    disableInitialCallback: PropTypes.bool,\r\n    /** Hide the numerical buttons, leaving just the 'Next' and 'Previous' buttons to interact with. */\r\n    hideNumbers: PropTypes.bool,\r\n    /** Label for the separators. */\r\n    breakLabel: PropTypes.string,\r\n    className: PropTypes.string\r\n};\r\n\r\nPager.defaultProps = {\r\n    pageCount: 10,\r\n    pageRangeDisplayed: 2,\r\n    marginPagesDisplayed: 3,\r\n    previousLabel: 'Previous',\r\n    nextLabel: 'Next',\r\n    breakLabel: '...',\r\n    disableInitialCallback: false,\r\n    hideNumbers: false\r\n};\r\n\r\nexport default Pager;","examples":[{"name":"Example1","description":"","code":"/* Simple pager */\r\nimport React from 'react';\r\nimport { Pager } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Pager\r\n            pageCount={30}\r\n            pageRangeDisplayed={3}\r\n            marginPagesDisplayed={2}\r\n        />\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Without numbers */\r\nimport React from 'react';\r\nimport { Pager } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Pager\r\n            pageCount={5}\r\n            hideNumbers\r\n        />\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Return the page number on change */\r\nimport React from 'react';\r\nimport { Pager } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Pager\r\n            pageCount={5}\r\n            onPageChange={(page) => {console.log(page);}}\r\n        />\r\n    );\r\n}"}]},{"name":"Pill","description":"Group of buttons to toggle.","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"label":{"type":{"name":"string"},"required":false,"description":"Label text to show above the button's group."},"assistiveText":{"type":{"name":"string"},"required":false,"description":"Assistive text to show below the button's group. This text turns into an error message when the component receives the error prop."},"group":{"type":{"name":"array"},"required":false,"description":"Array of items to render a bar of buttons. There just can be one selected item at a time. Each item must have an id (unique) and a label."},"stack":{"type":{"name":"array"},"required":false,"description":"Array of items to render a list of closable pills. Each item must have an id (unique) and a label."},"choice":{"type":{"name":"array"},"required":false,"description":"Array of items to render as a block of independent pills. Each of these pills is toggable. Each item must have an id (unique) and a label."},"selected":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"Value to specify the selected item for group pills."},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call when selecting an option in a group or a choice array."},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call when clicking on a stack item."},"onClose":{"type":{"name":"func"},"required":false,"description":"Function to call when clicking on the close icon of a stack item."},"error":{"type":{"name":"bool"},"required":false,"description":"After doing your validations outside of this component, you can change the state of the Pill to 'error' with this bool property."},"allowError":{"type":{"name":"bool"},"required":false,"description":"It allows the component to display the error messages even if it hasn't been touched."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable the pill group."},"lockHeight":{"type":{"name":"bool"},"required":false,"description":"By default the Pill container would be smaller without a label or an assistive text. lockHeight will maintain the same height as if it had both, label and assistive text."},"idPrefix":{"type":{"name":"string"},"required":false,"description":"Prefix for the id of every pill. If you don't specify a prefix they will not have an id."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Icon from '../Icon';\r\nimport GroupItem from './Group';\r\nimport StackItem from './Stack';\r\nimport ChoiceItem from './Choice';\r\n\r\n/** Group of buttons to toggle. */\r\nclass Pill extends Component {\r\n\r\n    static Group = GroupItem;\r\n    static Stack = StackItem;\r\n    static Choice = ChoiceItem;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            status: 'default',\r\n            touched: false,\r\n            selected: props.selected\r\n        };\r\n        this.handleGroupOnSelect = this.handleGroupOnSelect.bind(this);\r\n        this.handleChoiceOnSelect = this.handleChoiceOnSelect.bind(this);\r\n        this.handleStackItemOnClose = this.handleStackItemOnClose.bind(this);\r\n        this.handleStackItemOnClick = this.handleStackItemOnClick.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        let { selected } = props;\r\n        if (selected != this.state.selected) {\r\n            this.setState({ selected });\r\n        }\r\n    }\r\n\r\n    handleGroupOnSelect(selected) {\r\n        const { onChange } = this.props;\r\n        this.setState({\r\n            selected,\r\n            touched: true\r\n        });\r\n        if (onChange) onChange(selected);\r\n    }\r\n\r\n    handleChoiceOnSelect(selected) {\r\n        const { onChange } = this.props;\r\n        this.setState({\r\n            touched: true\r\n        });\r\n        if (onChange) onChange(selected);\r\n    }\r\n\r\n    handleStackItemOnClose(id) {\r\n        const { onClose } = this.props;\r\n        if (onClose) onClose(id);\r\n    }\r\n\r\n    handleStackItemOnClick(id) {\r\n        const { onClick } = this.props;\r\n        if (onClick) onClick(id);\r\n    }\r\n\r\n    render() {\r\n        const { selected, status, touched } = this.state;\r\n        const { classes, label, assistiveText, choice, group, stack, error, allowError, disabled, lockHeight, idPrefix, onClick, onClose, id, className, style } = this.props;\r\n        let realStatus = status;\r\n        const errorStatus = (error && (touched || allowError));\r\n        if (disabled)\r\n            realStatus = 'disabled';\r\n        else if (errorStatus)\r\n            realStatus = 'error';\r\n        return (\r\n            <div className={`${classes.container}${realStatus == 'disabled' ? ` ${classes.disabled}` : ''}${className ? ` ${className}` : ''}`} id={id} style={style}>\r\n                {(label || lockHeight) && (\r\n                    <div className={classes.top}>\r\n                        {label && (\r\n                            <label className={`${classes.label} ${classes.left}`}>\r\n                                {label}\r\n                            </label>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {group ? (\r\n                    <GroupItem\r\n                        items={group}\r\n                        onSelect={this.handleGroupOnSelect}\r\n                        selected={selected}\r\n                        idPrefix={idPrefix}\r\n                    />\r\n                ) : stack ? (\r\n                    <div className={classes.stackGroup}>\r\n                        {stack.map(pill => (\r\n                            <StackItem\r\n                                key={pill.id}\r\n                                idPrefix={idPrefix}\r\n                                id={pill.id}\r\n                                disabled={pill.disabled}\r\n                                onClick={onClick ? this.handleStackItemOnClick : null}\r\n                                onClose={onClose ? this.handleStackItemOnClose : null}\r\n                            >\r\n                                {pill.label}\r\n                            </StackItem>\r\n                        ))}\r\n                    </div>\r\n                ) : choice ? (\r\n                    <div className={classes.choiceGroup}>\r\n                        {choice.map(pill => (\r\n                            <ChoiceItem\r\n                                key={pill.id}\r\n                                idPrefix={idPrefix}\r\n                                id={pill.id}\r\n                                disabled={pill.disabled}\r\n                                selected={pill.selected}\r\n                                onClick={this.handleChoiceOnSelect}\r\n                            >\r\n                                {pill.label}\r\n                            </ChoiceItem>\r\n                        ))}\r\n                    </div>\r\n                ) : null}\r\n                {(assistiveText || lockHeight) && (\r\n                    <div className={classes.bottom}>\r\n                        {assistiveText && (\r\n                            <label className={`${classes.label} ${classes.left} ${realStatus == 'error' ? classes.errorAssistiveText : classes.assistiveText}`}>\r\n                                {realStatus == 'error' ? <Icon iconName=\"warning\" width={14} height={14} className={classes.errorIcon} /> : null} {assistiveText}\r\n                            </label>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPill.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    /** Label text to show above the button's group. */\r\n    label: PropTypes.string,\r\n    /** Assistive text to show below the button's group. This text turns into an error message when the component receives the error prop. */\r\n    assistiveText: PropTypes.string,\r\n    /** Array of items to render a bar of buttons. There just can be one selected item at a time. Each item must have an id (unique) and a label. */\r\n    group: PropTypes.array,\r\n    /** Array of items to render a list of closable pills. Each item must have an id (unique) and a label. */\r\n    stack: PropTypes.array,\r\n    /** Array of items to render as a block of independent pills. Each of these pills is toggable. Each item must have an id (unique) and a label. */\r\n    choice: PropTypes.array,\r\n    /** Value to specify the selected item for group pills. */\r\n    selected: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    /** Function to call when selecting an option in a group or a choice array. */\r\n    onChange: PropTypes.func,\r\n    /** Function to call when clicking on a stack item. */\r\n    onClick: PropTypes.func,\r\n    /** Function to call when clicking on the close icon of a stack item. */\r\n    onClose: PropTypes.func,\r\n    /** After doing your validations outside of this component, you can change the state of the Pill to 'error' with this bool property. */\r\n    error: PropTypes.bool,\r\n    /** It allows the component to display the error messages even if it hasn't been touched. */\r\n    allowError: PropTypes.bool,\r\n    /** Disable the pill group. */\r\n    disabled: PropTypes.bool,\r\n    /** By default the Pill container would be smaller without a label or an assistive text. lockHeight will maintain the same height as if it had both, label and assistive text. */\r\n    lockHeight: PropTypes.bool,\r\n    /** Prefix for the id of every pill. If you don't specify a prefix they will not have an id. */\r\n    idPrefix: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Pill;\r\n","examples":[{"name":"Example1","description":"","code":"/* Pill Group */\r\nimport React from 'react';\r\nimport { Pill } from '@occmundial/occ-atomic';\r\n\r\nexport default class Example1 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pills: [\r\n                {\r\n                    id:1,\r\n                    value:'10',\r\n                    label:'Element 1'\r\n                },\r\n                {\r\n                    id:2,\r\n                    value:'20',\r\n                    label:'Element 2'\r\n                },\r\n                {\r\n                    id:3,\r\n                    value:'30',\r\n                    label:'Element 3',\r\n                    disabled: true\r\n                },\r\n                {\r\n                    id:4,\r\n                    value:'40',\r\n                    label:'Element 4'\r\n                },\r\n            ],\r\n            selected: undefined\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(selected) {\r\n        this.setState({\r\n            selected\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { pills, selected } = this.state;\r\n        return (\r\n            <Pill\r\n                label=\"Label\"\r\n                group={pills}\r\n                assistiveText=\"Assistive Text\"\r\n                onChange={this.onChange}\r\n                selected={selected}\r\n            />\r\n        );\r\n    }\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Pill Choice */\r\nimport React from 'react';\r\nimport { Pill } from '@occmundial/occ-atomic';\r\n\r\nexport default class Example2 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pills: [\r\n                {\r\n                    id:1,\r\n                    value:10,\r\n                    label:'Element 1'\r\n                },\r\n                {\r\n                    id:2,\r\n                    value:20,\r\n                    label:'Element 2',\r\n                    selected: true\r\n                },\r\n                {\r\n                    id:3,\r\n                    value:30,\r\n                    label:'Element 3',\r\n                    disabled: true\r\n                },\r\n                {\r\n                    id:4,\r\n                    value:40,\r\n                    label:'Element 4'\r\n                }\r\n            ]\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(id) {\r\n        const { pills } = this.state;\r\n        const index = pills.findIndex(pill => pill.id == id);\r\n        pills[index].selected = !pills[index].selected;\r\n        this.setState({\r\n            pills\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { pills } = this.state;\r\n        return (\r\n            <Pill\r\n                label=\"Label\"\r\n                choice={pills}\r\n                assistiveText=\"Assistive Text\"\r\n                onChange={this.onChange}\r\n            />\r\n        );\r\n    }\r\n}\r\n"},{"name":"Example3","description":"","code":"/* Pill Stack */\r\nimport React from 'react';\r\nimport { Pill, Text } from '@occmundial/occ-atomic';\r\n\r\nexport default class Example3 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pills: [\r\n                {\r\n                    id:1,\r\n                    label:'Element 1'\r\n                },\r\n                {\r\n                    id:2,\r\n                    label:'Element 2'\r\n                },\r\n                {\r\n                    id:3,\r\n                    label:'Element 3',\r\n                    disabled: true\r\n                },\r\n                {\r\n                    id:4,\r\n                    label:'Element 4'\r\n                }\r\n            ],\r\n            id: ''\r\n        };\r\n        this.onClick = this.onClick.bind(this);\r\n        this.onClose = this.onClose.bind(this);\r\n    }\r\n\r\n    onClick(id) {\r\n        this.setState({\r\n            id\r\n        });\r\n    }\r\n    onClose(id) {\r\n        const { pills } = this.state;\r\n        const index = pills.findIndex(pill => pill.id == id);\r\n        pills.splice(index, 1);\r\n        this.setState({\r\n            pills\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { pills, id } = this.state;\r\n        return (\r\n            <div>\r\n                <Pill\r\n                    label=\"Label\"\r\n                    stack={pills}\r\n                    assistiveText=\"Assistive Text\"\r\n                    onClick={this.onClick}\r\n                    onClose={this.onClose}\r\n                />\r\n                {id && <Text>You clicked the item with the id: {id}</Text>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"}]},{"name":"Placeholder","description":"Use this component to simulate the layout of a content that is still loading. You can easily match the real layout using multiple placeholders that match the text and grid.","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"textSize":{"type":{"name":"enum","value":[{"value":"'hero'","computed":false},{"value":"'headline'","computed":false},{"value":"'heading'","computed":false},{"value":"'subheading'","computed":false},{"value":"'large'","computed":false},{"value":"'standard'","computed":false},{"value":"'small'","computed":false},{"value":"'micro'","computed":false}]},"required":false,"description":"Simulates a row of text. It has the same size and line-height as the Text component."},"top":{"type":{"name":"enum","value":[{"value":"'xTiny'","computed":false},{"value":"'tiny'","computed":false},{"value":"'small'","computed":false},{"value":"'base'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false},{"value":"'xLarge'","computed":false}]},"required":false,"description":"Spacing in the top of the placeholder."},"bottom":{"type":{"name":"enum","value":[{"value":"'xTiny'","computed":false},{"value":"'tiny'","computed":false},{"value":"'small'","computed":false},{"value":"'base'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false},{"value":"'xLarge'","computed":false}]},"required":false,"description":"Spacing in the bottom of the placeholder."},"width":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"Width of the placeholder. You can use numbers or a string with a percentage."},"height":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"Height of the placeholder. You can use numbers or a string with a percentage."},"round":{"type":{"name":"bool"},"required":false,"description":"It applies a border radius of 50%. Use it with width and height to create a circle to simulate an avatar or profile picture."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Flexbox from '../Flexbox';\r\n\r\n/** Use this component to simulate the layout of a content that is still loading. You can easily match the real layout using multiple placeholders that match the text and grid. */\r\nconst Placeholder = ({ classes, textSize, round, top, bottom }) => (\r\n    <Flexbox display=\"flex\" alignItems=\"center\" className={`${textSize ? classes[textSize] : ''}${top ? ` ${classes[`top${top}`]}` : ''}${bottom ? ` ${classes[`bottom${bottom}`]}` : ''}`}>\r\n        <div className={`${classes.placeholder}${round ? ` ${classes.round}` : ''}`} />\r\n    </Flexbox>\r\n);\r\n\r\nPlaceholder.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    /** Simulates a row of text. It has the same size and line-height as the Text component. */\r\n    textSize: PropTypes.oneOf([\r\n        'hero', 'headline', 'heading', 'subheading', 'large', 'standard', 'small', 'micro'\r\n    ]),\r\n    /** Spacing in the top of the placeholder. */\r\n    top: PropTypes.oneOf([\r\n        'xTiny', 'tiny', 'small', 'base', 'medium', 'large', 'xLarge'\r\n    ]),\r\n    /** Spacing in the bottom of the placeholder. */\r\n    bottom: PropTypes.oneOf([\r\n        'xTiny', 'tiny', 'small', 'base', 'medium', 'large', 'xLarge'\r\n    ]),\r\n    /** Width of the placeholder. You can use numbers or a string with a percentage. */\r\n    width: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    /** Height of the placeholder. You can use numbers or a string with a percentage. */\r\n    height: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    /** It applies a border radius of 50%. Use it with width and height to create a circle to simulate an avatar or profile picture. */\r\n    round: PropTypes.bool\r\n};\r\n\r\nexport default Placeholder;\r\n","examples":[{"name":"Example1","description":"","code":"/* Placeholder matching the text sizes */\r\nimport React from 'react';\r\nimport { Placeholder } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Placeholder textSize=\"hero\" />\r\n            <Placeholder textSize=\"headline\" />\r\n            <Placeholder textSize=\"heading\" />\r\n            <Placeholder textSize=\"subheading\" />\r\n            <Placeholder textSize=\"large\" />\r\n            <Placeholder textSize=\"standard\" />\r\n            <Placeholder textSize=\"small\" />\r\n            <Placeholder textSize=\"micro\" />\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Round */\r\nimport React from 'react';\r\nimport { Placeholder } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div>\r\n            <Placeholder width={100} height={100} round />\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example3","description":"","code":"/* Placeholder with spacing */\r\nimport React from 'react';\r\nimport { Placeholder } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <div>\r\n            <Placeholder top=\"xTiny\" bottom=\"xTiny\" />\r\n            <Placeholder top=\"tiny\" bottom=\"tiny\" />\r\n            <Placeholder top=\"small\" bottom=\"small\" />\r\n            <Placeholder top=\"base\" bottom=\"base\" />\r\n            <Placeholder top=\"medium\" bottom=\"medium\" />\r\n            <Placeholder top=\"large\" bottom=\"large\" />\r\n            <Placeholder top=\"xLarge\" bottom=\"xLarge\" />\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example4","description":"","code":"/* Example of layout loading */\r\nimport React from 'react';\r\nimport { Placeholder, Flexbox, Grid, spacing } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Grid fluid>\r\n            <Grid.Row>\r\n                <Grid.Col xxs={{ col: 10 }}>\r\n                    <Flexbox display=\"flex\" alignItems=\"start\">\r\n                        <Placeholder width={spacing.xLarge} height={spacing.xLarge} round />\r\n                        <Flexbox flex=\"1\" style={{ marginLeft: spacing.small }}>\r\n                            <Placeholder textSize=\"heading\" />\r\n                            <Placeholder textSize=\"small\" bottom=\"base\" width={120} />\r\n                            <Placeholder textSize=\"standard\" width=\"85%\" />\r\n                            <Placeholder textSize=\"standard\" width=\"72%\" />\r\n                            <Placeholder textSize=\"standard\" width=\"32%\" />\r\n                        </Flexbox>\r\n                    </Flexbox>\r\n                </Grid.Col>\r\n                <Grid.Col xxs={{ col: 2 }}>\r\n                    <Placeholder textSize=\"small\" />\r\n                    <Placeholder textSize=\"small\" with=\"85%\" />\r\n                </Grid.Col>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n}\r\n"}]},{"name":"Radio","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"selected":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"Default value for the radio."},"onChange":{"type":{"name":"func"},"required":false,"description":"The function to call when the value of the radio group changes."},"options":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"value":{"name":"union","value":[{"name":"string"},{"name":"number"}],"required":false},"label":{"name":"string","required":false},"right":{"name":"string","required":false},"trk":{"name":"string","required":false}}}},"required":false,"description":"Array of options to switch the value of the radio. The options must have a value and a label. It can also have a 'right' label. The value must be unique.","defaultValue":{"value":"[]","computed":false}},"textOverflow":{"type":{"name":"bool"},"required":false,"description":"Use this prop to overflow the text of the label, adding '...' and the end."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Text from '../Text';\r\n\r\nclass Radio extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: props.selected\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        const { selected } = props;\r\n        if (selected && this.state.selected != selected)\r\n            this.setState({ selected });\r\n    }\r\n\r\n    onChange(option) {\r\n        const { onChange } = this.props;\r\n        if (!option.disabled) {\r\n            this.setState({ selected: option.value });\r\n            if (onChange) onChange(option.value);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { selected } = this.state;\r\n        const { classes, options, id, textOverflow, className, style } = this.props;\r\n        return (\r\n            <div id={id}>\r\n                {options.map(option => (\r\n                    <div\r\n                        id={option.trk}\r\n                        key={option.value}\r\n                        className={`${classes.cont}${selected == option.value ? ` ${classes.active}` : ''}${option.disabled ? ` ${classes.disabled}` : ''}${className ? ` ${className}` : ''}`}\r\n                        onClick={() => { this.onChange(option); }}\r\n                        style={style}>\r\n                        <div className={classes.radio} />\r\n                        {option.label && <Text tag=\"label\" className={`${classes.label}${textOverflow ? ` ${classes.overflow}` : ''}`}>{option.label}</Text>}\r\n                        {option.right && <Text tag=\"label\" mid className={classes.right}>{option.right}</Text>}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nRadio.defaultProps = {\r\n    options: []\r\n};\r\n\r\nRadio.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Default value for the radio. */\r\n    selected: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    /** The function to call when the value of the radio group changes. */\r\n    onChange: PropTypes.func,\r\n    /** Array of options to switch the value of the radio. The options must have a value and a label. It can also have a 'right' label. The value must be unique. */\r\n    options: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            value: PropTypes.oneOfType([\r\n                PropTypes.string,\r\n                PropTypes.number\r\n            ]),\r\n            label: PropTypes.string,\r\n            right: PropTypes.string,\r\n            trk: PropTypes.string,\r\n        })\r\n    ),\r\n    /** Use this prop to overflow the text of the label, adding '...' and the end. */\r\n    textOverflow: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Radio;\r\n","examples":[{"name":"Example1","description":"","code":"/* Radio with default value */\r\nimport React from 'react';\r\nimport { Radio } from '@occmundial/occ-atomic';\r\n\r\nconst options = [\r\n    {value:1, label:'Option 1'},\r\n    {value:2, label:'Option 2'},\r\n    {value:3, label:'Option 3'}\r\n];\r\n\r\nexport default class Example1 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: 1\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(selected) {\r\n        this.setState({\r\n            selected\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { selected } = this.state;\r\n        return (\r\n            <div style={{display:'inline-block'}}>\r\n                <Radio options={options} selected={selected} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Disabled option */\r\nimport React from 'react';\r\nimport { Radio } from '@occmundial/occ-atomic';\r\n\r\nconst options = [\r\n    {value:1, label:'Option 1'},\r\n    {value:2, label:'Option 2'},\r\n    {value:3, label:'Option 3', disabled: true}\r\n];\r\n\r\nexport default class Example1 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: 1\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(selected) {\r\n        this.setState({\r\n            selected\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { selected } = this.state;\r\n        return (\r\n            <div style={{display:'inline-block'}}>\r\n                <Radio options={options} selected={selected} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"},{"name":"Example3","description":"","code":"/* Radio with text on the right */\r\nimport React from 'react';\r\nimport { Radio } from '@occmundial/occ-atomic';\r\n\r\nconst options = [\r\n    {value:1, label:'Option 1', right: '(123)'},\r\n    {value:2, label:'Option 2', right: '(548)'},\r\n    {value:3, label:'Option 3', right: '(1002)'}\r\n];\r\n\r\nexport default class Example1 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: 1\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(selected) {\r\n        this.setState({\r\n            selected\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { selected } = this.state;\r\n        return (\r\n            <Radio options={options} selected={selected} />\r\n        );\r\n    }\r\n}\r\n"},{"name":"Example4","description":"","code":"/* Text overflow */\r\nimport React from 'react';\r\nimport { Radio } from '@occmundial/occ-atomic';\r\n\r\nconst options = [\r\n    {value:1, label:'Bacon ipsum dolor amet landjaeger kevin tri-tip strip steak tenderloin, jerky brisket boudin fatback corned beef ball tip buffalo. Meatball rump boudin flank doner pancetta. Venison turkey capicola fatback alcatra. Jowl pork belly brisket pastrami turkey bresaola. Doner pork chicken biltong tail.'}\r\n];\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <div style={{display:'block'}}>\r\n            <Radio options={options} textOverflow />\r\n        </div>\r\n    );\r\n}\r\n"}]},{"name":"RangeCounter","description":"Use this component in lists with pagination. It will display information about the current page and its elements.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"min":{"type":{"name":"number"},"required":false,"description":"The number of the first item."},"max":{"type":{"name":"number"},"required":false,"description":"The number of the last item."},"symbol":{"type":{"name":"string"},"required":false,"description":"A symbol to separate the min and max numbers.","defaultValue":{"value":"' - '","computed":false}},"of":{"type":{"name":"string"},"required":false,"description":"A semantic separator between the min and max, with the total.","defaultValue":{"value":"'/'","computed":false}},"total":{"type":{"name":"number"},"required":false,"description":"The total number of elements on the whole list."},"type":{"type":{"name":"string"},"required":false,"description":"The type of items that the list is showing.","defaultValue":{"value":"''","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Use this component in lists with pagination. It will display information about the current page and its elements. */\r\nclass RangeCounter extends React.Component {\r\n    \r\n    numberWithCommas(num) {\r\n        return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n    \r\n    render() {\r\n        const { classes, min, max, symbol, total, type, of, id, className, style } = this.props;\r\n        return (\r\n            <div className={`${classes.cont}${className ? ` ${className}` : ''}`} id={id} style={style}><span className={classes.num}>{this.numberWithCommas(min)}{symbol}{this.numberWithCommas(max)}</span> {of} {this.numberWithCommas(total)} {type}</div>\r\n        );\r\n    }\r\n}\r\n\r\nRangeCounter.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** The number of the first item. */\r\n    min: PropTypes.number,\r\n    /** The number of the last item. */\r\n    max: PropTypes.number,\r\n    /** A symbol to separate the min and max numbers. */\r\n    symbol: PropTypes.string,\r\n    /** A semantic separator between the min and max, with the total. */\r\n    of: PropTypes.string,\r\n    /** The total number of elements on the whole list. */\r\n    total: PropTypes.number,\r\n    /** The type of items that the list is showing. */\r\n    type: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nRangeCounter.defaultProps = {\r\n    symbol: ' - ',\r\n    type: '',\r\n    of: '/'\r\n};\r\n\r\nexport default RangeCounter;","examples":[{"name":"Example1","description":"","code":"/* RangeCounter */\r\nimport React from 'react';\r\nimport { RangeCounter } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <RangeCounter min={20} max={40} total={100} type=\"elements\" />\r\n    );\r\n}"}]},{"name":"Row","description":"Use the Row component inside a Container. To make your grid as complex as you need, you can nest a Column inside a Row and then nest a Row inside a Column to start a new grid.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Use the Row component inside a Container. To make your grid as complex as you need, you can nest a Column inside a Row and then nest a Row inside a Column to start a new grid. */\r\nconst Row = ({ classes, children, className, id, style }) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        console.warn('DEPRECATED: The Row component will be removed soon. Use the Grid.Row subcomponent instead.');\r\n    }\r\n    return (\r\n        <div className={`${classes.row}${className ? ` ${className}` : ''}`} style={style} id={id}>{children}</div>\r\n    );\r\n};\r\n\r\nRow.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Row;\r\n","examples":[{"name":"Example1","description":"","code":"/* Row */\r\nimport React from 'react';\r\nimport { Container, Row, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Container fluid style={{background:colors.grey3}}>\r\n            Container\r\n            <Row style={{background:colors.grey4}}>\r\n                Row\r\n            </Row>\r\n        </Container>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Nested grid */\r\nimport React from 'react';\r\nimport { Container, Row, Column, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Container fluid style={{background:colors.grey3}}>\r\n            Container\r\n            <Row style={{background:colors.grey4}}>\r\n                Row\r\n            </Row>\r\n            <Row style={{background:colors.grey4}}>\r\n                <Column xs={{col:9}} style={{background:colors.grey5}}>\r\n                    Column\r\n                    <Row style={{background:colors.grey4}}>\r\n                        Row\r\n                    </Row>\r\n                    <Row style={{background:colors.grey4}}>\r\n                        <Column xs={{col:7}} style={{background:colors.grey5}}>\r\n                            Column\r\n                        </Column>\r\n                    </Row>\r\n                </Column>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}"}]},{"name":"SightLogo","description":"A simple component to display the Sight logo.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** A simple component to display the Sight logo. */\r\nconst SightLogo = ({ classes, style, className, id }) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        console.warn('DEPRECATED: The SightLogo component will be removed soon. Use the Icon component instead.');\r\n    }\r\n    return (\r\n        <div className={`${classes.container}${className ? ` ${className}` : ''}`} id={id} style={style}>\r\n            <i className={classes.logo} />\r\n        </div>\r\n    );\r\n};\r\n\r\nSightLogo.propTypes = {\r\n    classes: PropTypes.object,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default SightLogo;\r\n","examples":[{"name":"Example1","description":"","code":"/* SightLogo */\r\nimport React from 'react';\r\nimport { SightLogo, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div style={{background:colors.blue, padding:'15px 30px 70px 30px'}}>\r\n            <SightLogo />\r\n        </div>\r\n    );\r\n}"}]},{"name":"SlideDown","description":"Component to create an accordion section. The content will be hidden by default, and shown after click.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"title":{"type":{"name":"string"},"required":false,"description":"Title of the tab."},"expanded":{"type":{"name":"bool"},"required":false,"description":"Set this as true to show the content by default. If the external prop is the same of the internal state the component dont toggle","defaultValue":{"value":"false","computed":false}},"tag":{"type":{"name":"string"},"required":false,"description":"Text to show as a label right next to the Title"},"onToggle":{"type":{"name":"func"},"required":false,"description":"Function to call when the SlideDown expands or collapses. It returns true if it is expanded and false if it is collapsed."},"textSize":{"type":{"name":"enum","value":[{"value":"'sm'","computed":false},{"value":"'md'","computed":false},{"value":"'lg'","computed":false}]},"required":false,"description":"Size of the Text to show sm, md, lg","defaultValue":{"value":"'md'","computed":false}},"strong":{"type":{"name":"bool"},"required":false,"description":"If the text is required to be bold","defaultValue":{"value":"false","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Text from '../Text';\r\nimport Icon from '../Icon';\r\nimport Tag from '../Tag';\r\nimport Flexbox from '../Flexbox';\r\n\r\nimport colors from '../subatomic/colors';\r\n\r\n/** Component to create an accordion section. The content will be hidden by default, and shown after click. */\r\nclass SlideDown extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: this.props.expanded,\r\n            toggled: this.props.expanded\r\n        };\r\n        this.toggleContent = this.toggleContent.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { expanded } = this.props;\r\n        if (prevProps.expanded !== expanded) {\r\n            this.toggleContent(expanded);\r\n        }\r\n    }\r\n\r\n    toggleContent(value) {\r\n        const { onToggle } = this.props;\r\n        this.setState({\r\n            [value ? 'expanded' : 'toggled']: value\r\n        });\r\n        if (onToggle) onToggle(value);\r\n        setTimeout(() => {\r\n            this.setState({\r\n                [value ? 'toggled' : 'expanded']: value\r\n            });\r\n        }, value ? 0 : 300);\r\n    }\r\n\r\n    render() {\r\n        const { expanded, toggled } = this.state;\r\n        const { classes, title, children, tag, textSize, strong} = this.props;\r\n        const getTextSize = () => {\r\n            switch (textSize) {\r\n                case 'md': return {standard: true};\r\n                case 'lg': return {large: true};\r\n                case 'sm': return {small: true};\r\n                default: return {standard: true};\r\n            }\r\n        };\r\n        return (\r\n            <div className={classes.wrapper}>\r\n                <div className={classes.button} onClick={() => this.toggleContent(!expanded)}>\r\n                    <Flexbox display=\"flex\" justifyContent=\"between\" alignItems=\"start\">\r\n                        <Flexbox display=\"flex\" alignItems=\"center\">\r\n                            <Flexbox display=\"flex\" alignItems=\"start\" wrap=\"wrap\">\r\n                                <div>\r\n                                    <Text {...getTextSize()} strong={strong} tag=\"label\" className={classes.text}>{title}</Text>\r\n                                    {tag && <Tag theme=\"info\" className={classes.tag}>{tag}</Tag>}\r\n                                </div>\r\n                            </Flexbox>\r\n                        </Flexbox>\r\n                        <Flexbox flex=\"0 0 auto\">\r\n                            <Icon iconName=\"arrowDown\" colors={[colors.grey900]} className={classes.icon} style={{transform:toggled ? 'rotate(180deg)' : ''}} />\r\n                        </Flexbox>\r\n                    </Flexbox>\r\n                </div>\r\n                {expanded && (\r\n                    <div className={`${classes.content} ${toggled ? classes.show : classes.hide}`}>\r\n                        {children}\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nSlideDown.defaultProps = {\r\n    expanded: false,\r\n    textSize: 'md',\r\n    strong: false,\r\n};\r\n\r\nSlideDown.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Title of the tab. */\r\n    title: PropTypes.string,\r\n    /** Set this as true to show the content by default. If the external prop is the same of the internal state the component dont toggle */\r\n    expanded: PropTypes.bool,\r\n    /** Text to show as a label right next to the Title */\r\n    tag: PropTypes.string,\r\n    /** Function to call when the SlideDown expands or collapses. It returns true if it is expanded and false if it is collapsed. */\r\n    onToggle: PropTypes.func,\r\n    /** Size of the Text to show sm, md, lg*/\r\n    textSize: PropTypes.oneOf(['sm', 'md', 'lg']),\r\n    /** If the text is required to be bold*/\r\n    strong: PropTypes.bool,\r\n};\r\n\r\nexport default SlideDown;\r\n","examples":[{"name":"Example1","description":"","code":"/* Simple SlideDown */\r\nimport React from 'react';\r\nimport { SlideDown, Checkbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <SlideDown title=\"SlideDown\">\r\n            <Checkbox label=\"Content of the SlideDown\" />\r\n        </SlideDown>\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* SlideDown with Tag */\r\nimport React from 'react';\r\nimport { SlideDown, Checkbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <SlideDown title=\"SlideDown\" tag=\"New\">\r\n            <Checkbox label=\"Content of the SlideDown\" />\r\n        </SlideDown>\r\n    );\r\n}\r\n"},{"name":"Example3","description":"","code":"/* SlideDown with onToggle */\r\nimport React from 'react';\r\nimport { SlideDown, Checkbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const onToggle = (value) => {\r\n        if (value) console.log('Expanded');\r\n        else console.log('Collapsed');\r\n    };\r\n    return (\r\n        <SlideDown title=\"SlideDown\" onToggle={onToggle}>\r\n            <Checkbox label=\"Content of the SlideDown\" />\r\n        </SlideDown>\r\n    );\r\n}\r\n"},{"name":"Example4","description":"","code":"/* SlideDown with Text props */\r\nimport React from 'react';\r\nimport { SlideDown, Checkbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    const onToggle = (value) => {\r\n        if (value) console.log('Expanded');\r\n        else console.log('Collapsed');\r\n    };\r\n\r\n    return (\r\n        <SlideDown title=\"SlideDown\" textSize=\"lg\" onToggle={onToggle} strong>\r\n            <Checkbox label=\"Content of the SlideDown\" />\r\n        </SlideDown>\r\n    );\r\n}\r\n"},{"name":"Example5","description":"","code":"/* SlideDown with expand's event handler by props */\r\nimport React from 'react';\r\nimport { SlideDown, Checkbox, Button } from '@occmundial/occ-atomic';\r\n\r\n\r\n\r\nexport default class Example5 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: true\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        const { show } = this.state;\r\n        this.setState({\r\n            show: !show\r\n        });\r\n    }\r\n\r\n    onToggle(value) {\r\n        console.log(`Expanded: ${value}`);\r\n    }\r\n\r\n    render() {\r\n        const { show } = this.state;\r\n        return (\r\n            <div>\r\n                <SlideDown title=\"SlideDown\" expanded={show} onToggle={this.onToggle}>\r\n                    <Checkbox label=\"Content of the SlideDown\" />\r\n                </SlideDown>\r\n                <br/>\r\n                <Button sm onClick={this.toggle}>{show ? 'Collapse' : 'Expand'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"}]},{"name":"SlideToggle","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"value":{"type":{"name":"bool"},"required":false,"description":"Default value for the slide."},"onChange":{"type":{"name":"func"},"required":false,"description":"The function to call when the value of the slide changes."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable the slide."},"label":{"type":{"name":"node"},"required":false,"description":"Text to display next to the slide."},"name":{"type":{"name":"string"},"required":false,"description":"Name to assign to the html tag which holds the click event."},"trk":{"type":{"name":"string"},"required":false,"description":"Id for catching selected element for tracking."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Text from '../Text';\r\n\r\nclass SlideToggle extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: props.value\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        const { value } = props;\r\n        if (this.state.value != value)\r\n            this.setState({ value });\r\n    }\r\n\r\n    toggle() {\r\n        const { onChange, id, disabled } = this.props;\r\n        if (!disabled) {\r\n            let value = !this.state.value;\r\n            this.setState({ value });\r\n            if (onChange) onChange(value, id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { value } = this.state;\r\n        const { classes, label, disabled, id, className, style, name, trk } = this.props;\r\n        return (\r\n            <div id={id} className={`${classes.cont}${disabled ? ` ${classes.disabled}` : ''}${className ? ` ${className}` : ''}`} style={style}>\r\n                <div id={trk} name={name} className={`${classes.switch}${value ? ` ${classes.checked}` : ''}`} onClick={this.toggle}>\r\n                    <span className={classes.slider}>\r\n                        <span className={classes.icon} />\r\n                    </span>\r\n                </div>\r\n                {label && <Text tag=\"label\" className={classes.label}>{label}</Text>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSlideToggle.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Default value for the slide. */\r\n    value: PropTypes.bool,\r\n    /** The function to call when the value of the slide changes. */\r\n    onChange: PropTypes.func,\r\n    /** Disable the slide. */\r\n    disabled: PropTypes.bool,\r\n    /** Text to display next to the slide.  */\r\n    label: PropTypes.node,\r\n    /** Name to assign to the html tag which holds the click event. */\r\n    name: PropTypes.string,\r\n    /** Id for catching selected element for tracking. */\r\n    trk: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default SlideToggle;\r\n","examples":[{"name":"Example1","description":"","code":"/* SlideToggle with default value */\r\nimport React from 'react';\r\nimport { SlideToggle }  from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div style={{display:'inline-block'}}>\r\n            <SlideToggle label=\"Switch On\" value />\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Disabled SlideToggle */\r\nimport React from 'react';\r\nimport { SlideToggle } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div style={{display:'inline-block'}}>\r\n            <SlideToggle label=\"Switch Off Disabled\" disabled />\r\n        </div>\r\n    );\r\n}\r\n"}]},{"name":"SubHeader","description":"Component to display a Header with content to the left, right and center.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"The theme to use in the SubHeader. The options are blue and white.","defaultValue":{"value":"\"blue\"","computed":false}},"fixed":{"type":{"name":"bool"},"required":false,"description":"This property fixes the SubHeader to the top of the screen.","defaultValue":{"value":"false","computed":false}},"left":{"type":{"name":"node"},"required":false,"description":"Content to display on the left."},"right":{"type":{"name":"node"},"required":false,"description":"Content to display on the right."},"center":{"type":{"name":"node"},"required":false,"description":"Content to display on the center."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Flexbox from '../Flexbox';\r\n\r\n/** Component to display a Header with content to the left, right and center. */\r\nclass SubHeader extends React.Component {\r\n\r\n    componentDidMount() {\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.warn('DEPRECATED: The SubHeader component will be removed soon. Use the NavTab component instead.');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes, theme, fixed, left, right, center } = this.props;\r\n        return (\r\n            <div className={classes.wrapper}>\r\n                <div className={`${classes.subHeader}${theme ? ` ${classes[theme]}` : classes.blue}${fixed ? ` ${classes.fixed}` : ''}`}>\r\n                    {left && <Flexbox display=\"flex\" alignItems=\"center\" className={classes.left}>{left}</Flexbox>}\r\n                    {right && <Flexbox display=\"flex\" alignItems=\"center\" className={classes.right}>{right}</Flexbox>}\r\n                    {center && <Flexbox display=\"flex\" alignItems=\"center\" className={classes.center}>{center}</Flexbox>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSubHeader.defaultProps = {\r\n    fixed: false,\r\n    theme: \"blue\"\r\n};\r\n\r\nSubHeader.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** The theme to use in the SubHeader. The options are blue and white. */\r\n    theme: PropTypes.string,\r\n    /** This property fixes the SubHeader to the top of the screen. */\r\n    fixed: PropTypes.bool,\r\n    /** Content to display on the left. */\r\n    left: PropTypes.node,\r\n    /** Content to display on the right. */\r\n    right: PropTypes.node,\r\n    /** Content to display on the center. */\r\n    center: PropTypes.node\r\n};\r\n\r\nexport default SubHeader;\r\n","examples":[{"name":"Example1","description":"","code":"/* Blue theme */\r\nimport React from 'react';\r\nimport { SubHeader } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <SubHeader left=\"Left\" center=\"Center\" right=\"Right\" />\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* White theme */\r\nimport React from 'react';\r\nimport { SubHeader } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <SubHeader theme=\"white\" left=\"Left\" center=\"Center\" right=\"Right\" />\r\n    );\r\n}"}]},{"name":"SwitchGroup","description":"The SwitchGroup component will display a group of buttons that behave as radio buttons.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"buttons":{"type":{"name":"array"},"required":false,"description":"Array of objects with a text and a secondary text if necessary."},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call after clicking any button."},"selected":{"type":{"name":"number"},"required":false,"description":"The default selected button."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Flexbox from '../Flexbox';\r\n\r\n/** The SwitchGroup component will display a group of buttons that behave as radio buttons. */\r\nclass SwitchGroup extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: props.selected ? props.selected : 0\r\n        };\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.warn('DEPRECATED: The SwitchGroup component will be removed soon. Use the Pill component instead.');\r\n        }\r\n    }\r\n\r\n    onClick(button, index) {\r\n        const { onClick } = this.props;\r\n        this.setState({\r\n            selected: index\r\n        });\r\n        if (onClick)\r\n            onClick(button, index);\r\n    }\r\n\r\n    render() {\r\n        const { selected } = this.state;\r\n        const { classes, buttons } = this.props;\r\n        return (\r\n            <Flexbox display=\"flex\">\r\n                {buttons.map((button, index) => {\r\n                    return (\r\n                        <button\r\n                            key={button.text}\r\n                            className={`${classes.button}${selected == index ? ` ${classes.active}` : ''}`}\r\n                            onClick={() => {this.onClick(button, index);}}>\r\n                            {button.text}{button.sec ? <span className={classes.sec}>{button.sec}</span> : ''}\r\n                        </button>\r\n                    );\r\n                })}\r\n            </Flexbox>\r\n        );\r\n    }\r\n}\r\n\r\nSwitchGroup.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Array of objects with a text and a secondary text if necessary. */\r\n    buttons: PropTypes.array,\r\n    /** Function to call after clicking any button. */\r\n    onClick: PropTypes.func,\r\n    /** The default selected button. */\r\n    selected: PropTypes.number\r\n};\r\n\r\nexport default SwitchGroup;\r\n","examples":[{"name":"Example1","description":"","code":"/* Simple SwitchGroup */\r\nimport React from 'react';\r\nimport { SwitchGroup } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const items = [\r\n        { text:'Button 1', sec:'(10)' },\r\n        { text:'Button 2', sec:'(5)' },\r\n        { text:'Button 3', sec:'(35)' }\r\n    ];\r\n    return (\r\n        <SwitchGroup buttons={items} />\r\n    );\r\n}"}]},{"name":"Tag","description":"Tag component with different themes. The tag cannot trigger some actions on click.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"Select a theme for the Tag.","defaultValue":{"value":"\"default\"","computed":false}},"iconName":{"type":{"name":"string"},"required":false,"description":"Select an icon for the Tag."},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Tag component with different themes. The tag cannot trigger some actions on click. */\r\nclass Tag extends React.Component {    \r\n    render() {\r\n        const { classes, children, className, style, theme, iconName } = this.props;\r\n        return (\r\n            <label className={`${classes.tag} ${theme ? classes[theme] : classes.default}${className ? ` ${className}` : ''}`} style={style}>\r\n                {iconName && <span className={`${classes.icon} ${theme ? classes[`${theme}Icon`] : classes.defaultIcon}`} />}\r\n                <span className={`${classes.tagText}`}>{children}</span>\r\n            </label>\r\n        );\r\n    }\r\n}\r\n\r\nTag.defaultProps= {\r\n    theme: \"default\",\r\n};\r\n\r\nTag.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Select a theme for the Tag. */\r\n    theme: PropTypes.string,\r\n    /** Select an icon for the Tag. */\r\n    iconName: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n};\r\n\r\nexport default Tag;","examples":[{"name":"Example1","description":"","code":"/* Themes without Icon */\r\nimport React from 'react';\r\nimport { Tag } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Tag>Default Tag</Tag>\r\n            <Tag theme=\"info\">Tag with info theme</Tag>\r\n            <Tag theme=\"success\">Tag with success theme</Tag>\r\n            <Tag theme=\"warning\">Tag with success theme</Tag>\r\n            <Tag theme=\"error\">Tag with success theme</Tag>\r\n        </div>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Themes with Icon */\r\nimport React from 'react';\r\nimport { Tag } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Tag iconName=\"check\">Default Tag</Tag>\r\n            <Tag theme=\"info\" iconName=\"check\">Tag with info theme</Tag>\r\n            <Tag theme=\"success\" iconName=\"check\">Tag with success theme</Tag>\r\n            <Tag theme=\"warning\" iconName=\"check\">Tag with success theme</Tag>\r\n            <Tag theme=\"error\" iconName=\"check\">Tag with success theme</Tag>\r\n        </div>\r\n    );\r\n}"}]},{"name":"Text","description":"","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"children":{"type":{"name":"node"},"required":true,"description":""},"hero":{"type":{"name":"bool"},"required":false,"description":"Hero size style."},"headline":{"type":{"name":"bool"},"required":false,"description":"Headline size style."},"heading":{"type":{"name":"bool"},"required":false,"description":"Headline size style."},"subheading":{"type":{"name":"bool"},"required":false,"description":"Subheading size style."},"large":{"type":{"name":"bool"},"required":false,"description":"Large size style."},"standard":{"type":{"name":"bool"},"required":false,"description":"Standard size style."},"small":{"type":{"name":"bool"},"required":false,"description":"Small size style."},"micro":{"type":{"name":"bool"},"required":false,"description":"Micro size style."},"strong":{"type":{"name":"bool"},"required":false,"description":"Strong style. Only applies in large, standard or small sizes."},"mid":{"type":{"name":"bool"},"required":false,"description":"Medium emphasis color style."},"low":{"type":{"name":"bool"},"required":false,"description":"Low emphasis color style."},"primary":{"type":{"name":"bool"},"required":false,"description":"Primary color style."},"secondary":{"type":{"name":"bool"},"required":false,"description":"Secondary color style."},"success":{"type":{"name":"bool"},"required":false,"description":"Success color style."},"error":{"type":{"name":"bool"},"required":false,"description":"Error color style."},"warning":{"type":{"name":"bool"},"required":false,"description":"Warning color style."},"info":{"type":{"name":"bool"},"required":false,"description":"Info color style."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disabled color style."},"white":{"type":{"name":"bool"},"required":false,"description":"White color style."},"link":{"type":{"name":"bool"},"required":false,"description":"Link color style."},"left":{"type":{"name":"bool"},"required":false,"description":"Left align style."},"center":{"type":{"name":"bool"},"required":false,"description":"Center align style."},"right":{"type":{"name":"bool"},"required":false,"description":"Right align style."},"topXTiny":{"type":{"name":"bool"},"required":false,"description":"X-Tiny top spacing style."},"topTiny":{"type":{"name":"bool"},"required":false,"description":"Tiny top spacing style."},"topSmall":{"type":{"name":"bool"},"required":false,"description":"Small top spacing style."},"topBase":{"type":{"name":"bool"},"required":false,"description":"Base top spacing style."},"topMedium":{"type":{"name":"bool"},"required":false,"description":"Medium top spacing style."},"topLarge":{"type":{"name":"bool"},"required":false,"description":"Large top spacing style."},"topXLarge":{"type":{"name":"bool"},"required":false,"description":"X-Large top spacing style."},"bottomXTiny":{"type":{"name":"bool"},"required":false,"description":"X-Tiny bottom spacing style."},"bottomTiny":{"type":{"name":"bool"},"required":false,"description":"Tiny bottom spacing style."},"bottomSmall":{"type":{"name":"bool"},"required":false,"description":"Small bottom spacing style."},"bottomBase":{"type":{"name":"bool"},"required":false,"description":"Base bottom spacing style."},"bottomMedium":{"type":{"name":"bool"},"required":false,"description":"Medium bottom spacing style."},"bottomLarge":{"type":{"name":"bool"},"required":false,"description":"Large bottom spacing style."},"bottomXLarge":{"type":{"name":"bool"},"required":false,"description":"X-Large bottom spacing style."},"tag":{"type":{"name":"string"},"required":false,"description":"Html tag.","defaultValue":{"value":"'p'","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Text extends Component {\r\n\r\n    filter(array) {\r\n        return array.filter((item) => {\r\n            const key = Object.keys(item)[0];\r\n            if (item[key]) return key;\r\n        });\r\n    }\r\n\r\n    getSize() {\r\n        const { classes, hero, headline, heading, subheading, large, standard, small, micro } = this.props;\r\n        const sizes = [{hero}, {headline}, {heading}, {subheading}, {large}, {standard}, {small}, {micro}];\r\n        const filtered = this.filter(sizes);\r\n        if (filtered.length == 0) {\r\n            return classes.standard;\r\n        } else {\r\n            return classes[Object.keys(filtered[0])[0]];\r\n        }\r\n    }\r\n\r\n    getEmphasis() {\r\n        const { classes, mid, low } = this.props;\r\n        if (low) return classes.lowEmphasis;\r\n        else if (mid) return classes.midEmphasis;\r\n        else return classes.highEmphasis;\r\n    }\r\n\r\n    getColor() {\r\n        const { classes, primary, secondary, success, error, warning, info, disabled, white, link } = this.props;\r\n        const colors = [{primary}, {secondary}, {success}, {error}, {warning}, {info}, {disabled}, {white}, {link}];\r\n        const filtered = this.filter(colors);\r\n        if (filtered.length == 0) {\r\n            return false;\r\n        } else {\r\n            return classes[Object.keys(filtered[0])[0]];\r\n        }\r\n    }\r\n\r\n    getAlign() {\r\n        const { classes, left, center, right } = this.props;\r\n        if (left) return classes.left;\r\n        else if (center) return classes.center;\r\n        else if (right) return classes.right;\r\n    }\r\n\r\n    getTopSpacing() {\r\n        const { classes, topXTiny, topTiny, topSmall, topBase, topMedium, topLarge, topXLarge } = this.props;\r\n        const spacing = [{topXTiny}, {topTiny}, {topSmall}, {topBase}, {topMedium}, {topLarge}, {topXLarge}];\r\n        const filtered = this.filter(spacing);\r\n        if (filtered.length == 0) {\r\n            return '';\r\n        } else {\r\n            return ` ${classes[Object.keys(filtered[0])[0]]}`;\r\n        }\r\n    }\r\n\r\n    getBottomSpacing() {\r\n        const { classes, bottomXTiny, bottomTiny, bottomSmall, bottomBase, bottomMedium, bottomLarge, bottomXLarge } = this.props;\r\n        const spacing = [{bottomXTiny}, {bottomTiny}, {bottomSmall}, {bottomBase}, {bottomMedium}, {bottomLarge}, {bottomXLarge}];\r\n        const filtered = this.filter(spacing);\r\n        if (filtered.length == 0) {\r\n            return '';\r\n        } else {\r\n            return ` ${classes[Object.keys(filtered[0])[0]]}`;\r\n        }\r\n    }\r\n\r\n    getWeight() {\r\n        const { classes, hero, headline, heading, subheading, large, standard, small, micro, strong } = this.props;\r\n        const sizes = [{hero}, {headline}, {heading}, {subheading}, {large}, {standard}, {small}, {micro}];\r\n        const filtered = this.filter(sizes);\r\n        if ((filtered.length == 0 || large || standard || small || micro) && strong) {\r\n            return ` ${classes.strong}`;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes, children, tag, className, style, id } = this.props;\r\n        const TextType = tag;\r\n        const size = this.getSize();\r\n        const color = this.getColor();\r\n        const emphasis = this.getEmphasis();\r\n        const align = this.getAlign();\r\n        const topSpacing = this.getTopSpacing();\r\n        const bottomSpacing = this.getBottomSpacing();\r\n        const strong = this.getWeight();\r\n        return (\r\n            <TextType\r\n                className={`${classes.text} ${size} ${color ? color : emphasis}${topSpacing}${bottomSpacing}${align ? ` ${align}` : ''}${strong ? ` ${strong}` : ''}${className ? ` ${className}` : ''}`}\r\n                style={style}\r\n                id={id}\r\n            >\r\n                    {children}\r\n            </TextType>\r\n        );\r\n    }\r\n}\r\n\r\nText.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n    /** Hero size style. */\r\n    hero: PropTypes.bool,\r\n    /** Headline size style. */\r\n    headline: PropTypes.bool,\r\n    /** Headline size style. */\r\n    heading: PropTypes.bool,\r\n    /** Subheading size style. */\r\n    subheading: PropTypes.bool,\r\n    /** Large size style. */\r\n    large: PropTypes.bool,\r\n    /** Standard size style. */\r\n    standard: PropTypes.bool,\r\n    /** Small size style. */\r\n    small: PropTypes.bool,\r\n    /** Micro size style. */\r\n    micro: PropTypes.bool,\r\n    /** Strong style. Only applies in large, standard or small sizes. */\r\n    strong: PropTypes.bool,\r\n    /** Medium emphasis color style. */\r\n    mid: PropTypes.bool,\r\n    /** Low emphasis color style. */\r\n    low: PropTypes.bool,\r\n    /** Primary color style. */\r\n    primary: PropTypes.bool,\r\n    /** Secondary color style. */\r\n    secondary: PropTypes.bool,\r\n    /** Success color style. */\r\n    success: PropTypes.bool,\r\n    /** Error color style. */\r\n    error: PropTypes.bool,\r\n    /** Warning color style. */\r\n    warning: PropTypes.bool,\r\n    /** Info color style. */\r\n    info: PropTypes.bool,\r\n    /** Disabled color style. */\r\n    disabled: PropTypes.bool,\r\n    /** White color style. */\r\n    white: PropTypes.bool,\r\n    /** Link color style. */\r\n    link: PropTypes.bool,\r\n    /** Left align style. */\r\n    left: PropTypes.bool,\r\n    /** Center align style. */\r\n    center: PropTypes.bool,\r\n    /** Right align style. */\r\n    right: PropTypes.bool,\r\n    /** X-Tiny top spacing style. */\r\n    topXTiny: PropTypes.bool,\r\n    /** Tiny top spacing style. */\r\n    topTiny: PropTypes.bool,\r\n    /** Small top spacing style. */\r\n    topSmall: PropTypes.bool,\r\n    /** Base top spacing style. */\r\n    topBase: PropTypes.bool,\r\n    /** Medium top spacing style. */\r\n    topMedium: PropTypes.bool,\r\n    /** Large top spacing style. */\r\n    topLarge: PropTypes.bool,\r\n    /** X-Large top spacing style. */\r\n    topXLarge: PropTypes.bool,\r\n    /** X-Tiny bottom spacing style. */\r\n    bottomXTiny: PropTypes.bool,\r\n    /** Tiny bottom spacing style. */\r\n    bottomTiny: PropTypes.bool,\r\n    /** Small bottom spacing style. */\r\n    bottomSmall: PropTypes.bool,\r\n    /** Base bottom spacing style. */\r\n    bottomBase: PropTypes.bool,\r\n    /** Medium bottom spacing style. */\r\n    bottomMedium: PropTypes.bool,\r\n    /** Large bottom spacing style. */\r\n    bottomLarge: PropTypes.bool,\r\n    /** X-Large bottom spacing style. */\r\n    bottomXLarge: PropTypes.bool,\r\n    /** Html tag. */\r\n    tag: PropTypes.string.isRequired,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n    id: PropTypes.string\r\n};\r\n\r\nText.defaultProps = {\r\n    tag: 'p'\r\n};\r\n\r\nexport default Text;\r\n","examples":[{"name":"Example1","description":"","code":"/* Sizes */\r\nimport React from 'react';\r\nimport { Text } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Text hero>Hero text</Text>\r\n            <Text headline>Headline text</Text>\r\n            <Text heading>Heading text</Text>\r\n            <Text subheading>Subheading text</Text>\r\n            <Text large>Large body</Text>\r\n            <Text standard>Standard body</Text>\r\n            <Text small>Small Caption</Text>\r\n            <Text micro>Micro</Text>\r\n        </div>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Colors */\r\nimport React from 'react';\r\nimport { Text, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div>\r\n            <Text>High emphasis</Text>\r\n            <Text mid>Medium emphasis</Text>\r\n            <Text low>Low emphasis</Text>\r\n            <Text primary>Primary</Text>\r\n            <Text secondary>Secondary</Text>\r\n            <Text success>Success</Text>\r\n            <Text error>Error</Text>\r\n            <Text warning>Warning</Text>\r\n            <Text info>Info</Text>\r\n            <Text disabled>Disabled</Text>\r\n            <div style={{background:colors.prim}}><Text white>White</Text></div>\r\n        </div>\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Align */\r\nimport React from 'react';\r\nimport { Text } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <div>\r\n            <Text left>Left</Text>\r\n            <Text center>Center</Text>\r\n            <Text right>Right</Text>\r\n        </div>\r\n    );\r\n}"},{"name":"Example4","description":"","code":"/* Spacing */\r\nimport React from 'react';\r\nimport { Text } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <div>\r\n            <Text topXTiny bottomXTiny>X-Tiny</Text>\r\n            <Text topTiny bottomTiny>Tiny</Text>\r\n            <Text topSmall bottomSmall>Small</Text>\r\n            <Text topBase bottomBase>Base</Text>\r\n            <Text topMedium bottomMedium>Medium</Text>\r\n            <Text topLarge bottomLarge>Large</Text>\r\n            <Text topXLarge bottomXLarge>X-Large</Text>\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example5","description":"","code":"/* Strong */\r\nimport React from 'react';\r\nimport { Text } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <div>\r\n            <Text large strong>Large strong</Text>\r\n            <Text strong>Standard strong</Text>\r\n            <Text small strong>Small strong</Text>\r\n        </div>\r\n    );\r\n}\r\n"}]},{"name":"TextField","description":"TextField component that includes all the markup, functions and behaviors to implement any type of input field.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"type":{"type":{"name":"string"},"required":false,"description":"Type of the input. Use any of the following types: text, email, password, textarea, select, date, number, search, file.","defaultValue":{"value":"'text'","computed":false}},"maxLength":{"type":{"name":"number"},"required":false,"description":"Maximum number of characters to accept in the input."},"label":{"type":{"name":"string"},"required":false,"description":"Label to show right above the input field."},"placeholder":{"type":{"name":"string"},"required":false,"description":"Text to display as the placeholder for the input. If you set a value for placeholder but not for label, the placeholder will behave as a label on focus."},"assistiveText":{"type":{"name":"node"},"required":false,"description":"Text to display below the input field. When TextField has no error the color would be grey. With error the assistiveText becomes red and with an alert icon on the left."},"name":{"type":{"name":"string"},"required":false,"description":"Name of the input field."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable the input. It shows a static markup with the styles of an input.","defaultValue":{"value":"false","computed":false}},"counter":{"type":{"name":"bool"},"required":false,"description":"It displays a counter floating to the right, indicating the number of the remaining characters available. It is related to the maxLength value.","defaultValue":{"value":"false","computed":false}},"autoFocus":{"type":{"name":"bool"},"required":false,"description":"Focus automatically on the field with this property. You can just use one of these per form.","defaultValue":{"value":"false","computed":false}},"clear":{"type":{"name":"bool"},"required":false,"description":"Setting this property will show an 'x' icon on the right side of the input. Clicking it will remove the value of the input field.","defaultValue":{"value":"false","computed":false}},"error":{"type":{"name":"bool"},"required":false,"description":"After doing your validations outside of this component, you can change the state of the TextField to 'error' with this bool property."},"allowError":{"type":{"name":"bool"},"required":false,"description":"It allows the component to display the error messages even if it hasn't been touched."},"lockHeight":{"type":{"name":"bool"},"required":false,"description":"By default the TextField container would be smaller without a label or an assistive text. lockHeight will maintain the same height as if it had both, label and assistive text."},"valueProp":{"type":{"name":"node"},"required":false,"description":"Use as a default value.","defaultValue":{"value":"''","computed":false}},"selectOnFocus":{"type":{"name":"bool"},"required":false,"description":"With this property set to true, the value of the input will be selected on focus.","defaultValue":{"value":"false","computed":false}},"mask":{"type":{"name":"union","value":[{"name":"array"},{"name":"func"}]},"required":false,"description":"Mask array or function to format the value of the TextField. For more information check *react-text-mask*."},"guide":{"type":{"name":"bool"},"required":false,"description":"Boolean to show or hide the full mask while writing."},"disableAutoComplete":{"type":{"name":"bool"},"required":false,"description":"Disables native autoComplete on browsers."},"meta":{"type":{"name":"object"},"required":false,"description":"Metadata sended by react-form."},"input":{"type":{"name":"object"},"required":false,"description":"Object sended by react-form."},"onFocus":{"type":{"name":"func"},"required":false,"description":"Function to call on focus."},"onBlur":{"type":{"name":"func"},"required":false,"description":"Function to call on blur."},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call on change."},"onKeyUp":{"type":{"name":"func"},"required":false,"description":"Function to call on key up."},"onClear":{"type":{"name":"func"},"required":false,"description":"Function to call after clicking the 'x' icon shown by the 'clear' property."},"onRef":{"type":{"name":"func"},"required":false,"description":"Function to call when you need to call the input by a reference."},"options":{"type":{"name":"array"},"required":false,"description":"Array of objects with options in case you set the 'type' property as 'select'. Each option must have a value and a label. You can group the options.","defaultValue":{"value":"[]","computed":false}},"iconName":{"type":{"name":"string"},"required":false,"description":"If you want to display an icon on the left side, use any icon's name available in the library."},"inputClassName":{"type":{"name":"string"},"required":false,"description":"ClassName for the input tag."},"hjWhitelist":{"type":{"name":"bool"},"required":false,"description":"Whitelist the TextField for Hotjar.","defaultValue":{"value":"true","computed":false}},"regex":{"type":{"name":"string"},"required":false,"description":"Regular expression to test the value. If the value doesn't match then is not changed."},"required":{"type":{"name":"bool"},"required":false,"description":"Set the TextField as required."},"alignRight":{"type":{"name":"bool"},"required":false,"description":"Align the input text to the right"},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MaskedInput from 'react-text-mask';\r\n\r\nimport Icon from '../Icon';\r\n\r\nimport colors from '../subatomic/colors';\r\nimport iconSizes from '../subatomic/iconSizes';\r\n\r\n/** TextField component that includes all the markup, functions and behaviors to implement any type of input field. */\r\nclass TextField extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            status: 'default',\r\n            value: props.valueProp ? props.valueProp : '',\r\n            touched: false,\r\n            showPass: false,\r\n            passIconBeingClicked: false\r\n        };\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onKeyUp = this.onKeyUp.bind(this);\r\n        this.onClear = this.onClear.bind(this);\r\n        this.togglePass = this.togglePass.bind(this);\r\n        this.focusInput = this.focusInput.bind(this);\r\n        this.outOfPassIcon = this.outOfPassIcon.bind(this);\r\n        this.setClassName = this.setClassName.bind(this);\r\n        this.setInputClassName = this.setInputClassName.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        let { input, onRef } = this.props;\r\n        if (input && input.value)\r\n            this.setState({ value: input.value });\r\n        if (onRef) onRef(this);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        let { input, valueProp, disabled } = props;\r\n        if (input && input.value)\r\n            this.setState({ value: input.value });\r\n        else if (valueProp != this.state.value)\r\n            this.setState({ value: valueProp });\r\n        if (disabled && !this.props.disabled) {\r\n            this.setState({ status: 'default' });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        let { onRef } = this.props;\r\n        if (onRef) onRef(undefined);\r\n    }\r\n\r\n    onFocus({ target }) {\r\n        const { onFocus, selectOnFocus } = this.props;\r\n        if (selectOnFocus) target.select();\r\n        this.setState({ status:'focus', touched: true });\r\n        if (onFocus) onFocus();\r\n    }\r\n\r\n    onBlur({ target: {value} }) {\r\n        const { input, onBlur } = this.props;\r\n        this.setState({ value:value, status: 'default' });\r\n        if (onBlur) onBlur(value);\r\n        if (input) input.onBlur(value);\r\n    }\r\n\r\n    onChange({ target: {value} }) {\r\n        const { input, onChange, regex } = this.props;\r\n        let valid = true;\r\n        if (regex) valid = new RegExp(regex).test(value);\r\n        if (valid) {\r\n            this.setState({ value:value });\r\n            if (input) input.onBlur(value);\r\n            if (onChange) onChange(value);\r\n        }\r\n    }\r\n\r\n    onKeyUp({ which, keyCode }) {\r\n        const { onKeyUp } = this.props;\r\n        if (onKeyUp) onKeyUp(which || keyCode);\r\n    }\r\n\r\n    onClear() {\r\n        const { input, onClear } = this.props;\r\n        this.setState({ value:'', status: 'default' });\r\n        if (onClear) onClear();\r\n        if (input) input.onBlur(value);\r\n    }\r\n\r\n    togglePass() {\r\n        const { showPass } = this.state;\r\n        this.setState({showPass:!showPass, passIconBeingClicked: true});\r\n    }\r\n\r\n    focusInput() {\r\n        this.setState({passIconBeingClicked: false});\r\n        this.input.focus();\r\n    }\r\n\r\n    outOfPassIcon() {\r\n        this.setState({passIconBeingClicked: false});\r\n    }\r\n\r\n    setClassName(status) {\r\n        const { classes, className } = this.props;\r\n        let containerClassName = classes.container + ' ' + classes[status];\r\n        if (className) containerClassName += ' ' + className;\r\n        return containerClassName;\r\n    }\r\n\r\n    setInputClassName() {\r\n        const { classes, iconName, clear, type, inputClassName, alignRight, hjWhitelist } = this.props;\r\n        let className = classes.input;\r\n        if (iconName) className += ' ' + classes.hasIcon;\r\n        if (clear) className += ' ' + classes.hasClear;\r\n        if (alignRight) className += ' ' + classes.alignRight;\r\n        if (type == \"select\") className += ' ' + classes.select;\r\n        if (type == \"textarea\") className += ' ' + classes.textarea;\r\n        if (type == \"password\") className += ' ' + classes.hasPass;\r\n        if (hjWhitelist) className += ' data-hj-whitelist';\r\n        if (inputClassName) className += ' ' + inputClassName;\r\n        return className;\r\n    }\r\n\r\n    render() {\r\n        const { status, value, touched, showPass, passIconBeingClicked } = this.state;\r\n        const { classes, input, meta, label, placeholder, counter, maxLength, type, name, options, id, style, disabled, autoFocus, error, assistiveText, clear, iconName, allowError, lockHeight, required, mask, guide, disableAutoComplete } = this.props;\r\n        let realStatus = status;\r\n        let InputType = (type == \"select\" ? \"select\" : type == \"textarea\" ? \"textarea\" : \"input\");\r\n        const errorStatus = (meta && meta.error && (meta.touched || allowError)) || (error && (touched || allowError)) && !passIconBeingClicked;\r\n\r\n        if (disabled) realStatus = 'disabled';\r\n        else if (status != 'focus' && errorStatus) realStatus = 'error';\r\n\r\n        let element, passIcon;\r\n        const commonProps = {\r\n            name,\r\n            id,\r\n            className:this.setInputClassName(),\r\n            value:(input && input.value) ? input.value : value,\r\n            autoFocus,\r\n            maxLength,\r\n            onFocus:this.onFocus,\r\n            onBlur:this.onBlur,\r\n            onChange:this.onChange,\r\n            onKeyUp:this.onKeyUp,\r\n            ref:ref => { this.input = ref; },\r\n            required\r\n        };\r\n        if (disabled) {\r\n            if (type == \"select\") {\r\n                let selectedOption = options.filter(option => option.value == value);\r\n                let optionLabel;\r\n                if (selectedOption.length) {\r\n                    optionLabel = selectedOption[0].label;\r\n                }\r\n                element = (\r\n                    <label className={`${classes.input}${iconName ? ` ${classes.hasIcon}` : ''}`}>\r\n                        {(input && input.value) ? input.value : optionLabel ? optionLabel : value ? value : placeholder}\r\n                    </label>\r\n                );\r\n            } else {\r\n                element = (\r\n                    <label className={`${classes.input}${type == 'textarea' ? ` ${classes.textarea}` : ''}${iconName ? ` ${classes.hasIcon}` : ''}`}>\r\n                        {(input && input.value) ? input.value : value ? value : placeholder}\r\n                    </label>\r\n                );\r\n            }\r\n            passIcon = (\r\n                <div className={classes.passIcon}>\r\n                    <Icon iconName=\"eye\" width={iconSizes.small} height={iconSizes.small} colors={[colors.grey100]} />\r\n                </div>\r\n            );\r\n        } else if (type == \"select\") {\r\n            element = (\r\n                <InputType\r\n                    {...commonProps}\r\n                >\r\n                    <option value=\"\" disabled hidden>{placeholder}</option>\r\n                    {options.map(item => {\r\n                        if (item.grouped) {\r\n                            return (\r\n                                <optgroup key={item.key} label={item.label} disabled={item.disabled}>\r\n                                    {item.options.map(option => (\r\n                                        <option key={option.value} value={option.value} disabled={option.disabled}>{option.label}</option>\r\n                                    ))}\r\n                                </optgroup>\r\n                            );\r\n                        } else {\r\n                            return (\r\n                                <option key={item.value} value={item.value} disabled={item.disabled}>{item.label}</option>\r\n                            );\r\n                        }\r\n                    })}\r\n                </InputType>\r\n            );\r\n        } else if (mask) {\r\n            element = (\r\n                <MaskedInput\r\n                    {...commonProps}\r\n                    placeholder={placeholder}\r\n                    type=\"text\"\r\n                    mask={mask}\r\n                    guide={guide}\r\n                />\r\n            );\r\n        } else {\r\n            element = (\r\n                <InputType\r\n                    {...commonProps}\r\n                    placeholder={placeholder}\r\n                    type={(type == 'password' && showPass) ? 'text' : type}\r\n                    {...disableAutoComplete && {autoComplete:'off'}}\r\n                />\r\n            );\r\n            passIcon = (\r\n                <div onMouseDown={this.togglePass} onMouseUp={this.focusInput} onMouseOut={this.outOfPassIcon} className={classes.passIcon}>\r\n                    <Icon iconName=\"eye\" width={iconSizes.small} height={iconSizes.small} colors={showPass ? [colors.grey500] : [colors.grey200]} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className={this.setClassName(realStatus)} style={style}>\r\n                {(label || lockHeight) && (\r\n                    <div className={classes.top}>\r\n                        {label && (\r\n                            <label className={`${classes.label} ${classes.left}`}>\r\n                                {label}\r\n                            </label>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                <div className={classes.inputWrap}>\r\n                    {iconName && (\r\n                        <Icon iconName={iconName} width={iconSizes.base} height={iconSizes.base} className={classes.icon} colors={disabled ? [colors.grey500] : [colors.grey500]} />\r\n                    )}\r\n                    {type == 'select' && (\r\n                        <div className={classes.selectIcon}>\r\n                            <Icon iconName=\"arrowDown\" width={iconSizes.small} height={iconSizes.small} colors={disabled ? [colors.grey200] : [colors.grey900]} />\r\n                        </div>\r\n                    )}\r\n                    {type == 'password' && passIcon}\r\n                    {(value && clear) && (\r\n                        <div onClick={this.onClear} className={classes.clear}>\r\n                            <Icon iconName=\"close\" />\r\n                        </div>\r\n                    )}\r\n                    {element}\r\n                </div>\r\n                {(assistiveText || (counter && maxLength) || lockHeight) && (\r\n                    <div className={classes.bottom}>\r\n                        {assistiveText && (\r\n                            <label className={`${classes.label} ${classes.left} ${realStatus == 'error' ? classes.errorAssistiveText : classes.assistiveText}`}>\r\n                                {realStatus == 'error' ? <Icon iconName=\"warning\" width={iconSizes.tiny} height={iconSizes.tiny} className={classes.errorIcon} /> : null} {assistiveText}\r\n                            </label>\r\n                        )}\r\n                        {(counter && maxLength) && (\r\n                            <label\r\n                                className={`${classes.label} ${classes.right} ${classes.counter}`}>\r\n                                {value.length} / {maxLength}\r\n                            </label>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTextField.defaultProps = {\r\n    type: 'text',\r\n    counter: false,\r\n    disabled: false,\r\n    autoFocus: false,\r\n    clear: false,\r\n    valueProp: '',\r\n    selectOnFocus: false,\r\n    options: [],\r\n    hjWhitelist: true\r\n};\r\n\r\nTextField.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Type of the input. Use any of the following types: text, email, password, textarea, select, date, number, search, file. */\r\n    type: PropTypes.string,\r\n    /** Maximum number of characters to accept in the input. */\r\n    maxLength: PropTypes.number,\r\n    /** Label to show right above the input field. */\r\n    label: PropTypes.string,\r\n    /** Text to display as the placeholder for the input. If you set a value for placeholder but not for label, the placeholder will behave as a label on focus. */\r\n    placeholder: PropTypes.string,\r\n    /** Text to display below the input field. When TextField has no error the color would be grey. With error the assistiveText becomes red and with an alert icon on the left. */\r\n    assistiveText: PropTypes.node,\r\n    /** Name of the input field. */\r\n    name: PropTypes.string,\r\n    /** Disable the input. It shows a static markup with the styles of an input. */\r\n    disabled: PropTypes.bool,\r\n    /** It displays a counter floating to the right, indicating the number of the remaining characters available. It is related to the maxLength value. */\r\n    counter: PropTypes.bool,\r\n    /** Focus automatically on the field with this property. You can just use one of these per form. */\r\n    autoFocus: PropTypes.bool,\r\n    /** Setting this property will show an 'x' icon on the right side of the input. Clicking it will remove the value of the input field.*/\r\n    clear: PropTypes.bool,\r\n    /** After doing your validations outside of this component, you can change the state of the TextField to 'error' with this bool property. */\r\n    error: PropTypes.bool,\r\n    /** It allows the component to display the error messages even if it hasn't been touched. */\r\n    allowError: PropTypes.bool,\r\n    /** By default the TextField container would be smaller without a label or an assistive text. lockHeight will maintain the same height as if it had both, label and assistive text. */\r\n    lockHeight: PropTypes.bool,\r\n    /** Use as a default value. */\r\n    valueProp: PropTypes.node,\r\n    /** With this property set to true, the value of the input will be selected on focus. */\r\n    selectOnFocus: PropTypes.bool,\r\n    /** Mask array or function to format the value of the TextField. For more information check *react-text-mask*. */\r\n    mask: PropTypes.oneOfType([\r\n        PropTypes.array,\r\n        PropTypes.func\r\n    ]),\r\n    /** Boolean to show or hide the full mask while writing. */\r\n    guide: PropTypes.bool,\r\n    /**  Disables native autoComplete on browsers. */\r\n    disableAutoComplete: PropTypes.bool,\r\n    /** Metadata sended by react-form. */\r\n    meta: PropTypes.object,\r\n    /** Object sended by react-form. */\r\n    input: PropTypes.object,\r\n    /** Function to call on focus. */\r\n    onFocus: PropTypes.func,\r\n    /** Function to call on blur. */\r\n    onBlur: PropTypes.func,\r\n    /** Function to call on change. */\r\n    onChange: PropTypes.func,\r\n    /** Function to call on key up. */\r\n    onKeyUp: PropTypes.func,\r\n    /** Function to call after clicking the 'x' icon shown by the 'clear' property. */\r\n    onClear: PropTypes.func,\r\n    /** Function to call when you need to call the input by a reference. */\r\n    onRef: PropTypes.func,\r\n    /** Array of objects with options in case you set the 'type' property as 'select'. Each option must have a value and a label. You can group the options. */\r\n    options: PropTypes.array,\r\n    /** If you want to display an icon on the left side, use any icon's name available in the library. */\r\n    iconName: PropTypes.string,\r\n    /** ClassName for the input tag. */\r\n    inputClassName: PropTypes.string,\r\n    /** Whitelist the TextField for Hotjar. */\r\n    hjWhitelist: PropTypes.bool,\r\n    /** Regular expression to test the value. If the value doesn't match then is not changed. */\r\n    regex: PropTypes.string,\r\n    /** Set the TextField as required. */\r\n    required: PropTypes.bool,\r\n    /** Align the input text to the right */\r\n    alignRight: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default TextField;\r\n","examples":[{"name":"Example1","description":"","code":"/* Simple TextField */\r\nimport React from 'react';\r\nimport { TextField } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <TextField\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            assistiveText=\"Assistive text\"\r\n        />\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Select value on focus and clear TextField */\r\nimport React from 'react';\r\nimport { TextField } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <TextField\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            assistiveText=\"Assistive text\"\r\n            valueProp=\"Click on the TextField to select this text\"\r\n            selectOnFocus\r\n            clear\r\n        />\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* TextField with icon */\r\nimport React from 'react';\r\nimport { TextField } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <TextField\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            assistiveText=\"Assistive text\"\r\n            iconName=\"search\"\r\n        />\r\n    );\r\n}"},{"name":"Example4","description":"","code":"/* TextField for password */\r\nimport React from 'react';\r\nimport { TextField } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <TextField\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            assistiveText=\"Assistive text\"\r\n            type=\"password\"\r\n        />\r\n    );\r\n}"},{"name":"Example5","description":"","code":"/* Validation with regex */\r\nimport React from 'react';\r\nimport { TextField } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example5() {\r\n    return (\r\n        <TextField\r\n            label=\"Label\"\r\n            placeholder=\"Numbers\"\r\n            assistiveText=\"Assistive text\"\r\n            regex=\"^[0-9]*$\"\r\n        />\r\n    );\r\n}"},{"name":"Example6","description":"","code":"/* Display a counter */\r\nimport React from 'react';\r\nimport { TextField } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example6() {\r\n    return (\r\n        <TextField\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            // assistiveText=\"Assistive text\"\r\n            maxLength={30}\r\n            counter\r\n        />\r\n    );\r\n}"},{"name":"Example7","description":"","code":"/* TextField with error */\r\nimport React from 'react';\r\nimport { TextField } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example7() {\r\n    return (\r\n        <TextField\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            assistiveText=\"Assistive text\"\r\n            error\r\n            allowError\r\n        />\r\n    );\r\n}"},{"name":"Example8","description":"","code":"/* TextField disabled */\r\nimport React from 'react';\r\nimport { TextField } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example8() {\r\n    return (\r\n        <TextField\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            assistiveText=\"Assistive text\"\r\n            disabled\r\n        />\r\n    );\r\n}"},{"name":"Example9","description":"","code":"/* TextField with Dropdown */\r\nimport React from 'react';\r\nimport { TextField } from '@occmundial/occ-atomic';\r\n\r\nconst options = [\r\n    {value:1, label:'foo', disabled: false},\r\n    {value:2, label:'bar', disabled: true}\r\n];\r\n\r\nconst options2 = [\r\n    {\r\n        key:1,\r\n        grouped: true,\r\n        label: 'Options',\r\n        disabled: false,\r\n        options: [\r\n            {value:1, label:'foo'},\r\n            {value:2, label:'bar'}\r\n        ]\r\n    },\r\n    {\r\n        key:2,\r\n        grouped: true,\r\n        label: 'More options',\r\n        disabled: true,\r\n        options: [\r\n            {value:1, label:'baz'},\r\n            {value:2, label:'qux'}\r\n        ]\r\n    },\r\n];\r\n\r\nexport default function Example9() {\r\n    return (\r\n        <div>\r\n            <TextField\r\n                label=\"Simple dropdown\"\r\n                placeholder=\"Select an option\"\r\n                type=\"select\"\r\n                options={options}\r\n                required\r\n            />\r\n            <TextField\r\n                label=\"Grouped dropdown\"\r\n                placeholder=\"Select an option\"\r\n                type=\"select\"\r\n                options={options2}\r\n                required\r\n            />\r\n        </div>\r\n    );\r\n}\r\n"}]},{"name":"Tip","description":"Tip component with different themes (info, warning, success & error). You can pass a string or a react element as the children prop, but the bold regex will only work with strings.","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"theme":{"type":{"name":"enum","value":[{"value":"'info'","computed":false},{"value":"'warning'","computed":false},{"value":"'success'","computed":false},{"value":"'error'","computed":false}]},"required":false,"description":"Theme of the Tip.","defaultValue":{"value":"'info'","computed":false}},"children":{"type":{"name":"union","value":[{"name":"string"},{"name":"node"}]},"required":true,"description":"Text of the tip. If you put text between two * characters that text will be displayed as bold."},"icon":{"type":{"name":"string"},"required":false,"description":"Icon name to show on the left."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport isString from 'lodash/isString';\r\nimport flatten from 'lodash/flatten';\r\n\r\nimport Flexbox from '../Flexbox';\r\nimport Text from '../Text';\r\nimport Icon from '../Icon';\r\nimport colors from '../subatomic/colors';\r\n\r\nconst boldRegex = /\\*(.*?)\\*/g;\r\n\r\n/** Tip component with different themes (info, warning, success & error). You can pass a string or a react element as the children prop, but the bold regex will only work with strings. */\r\nconst Tip = ({ id, style, className, classes, icon, theme, children }) => {\r\n    const replaceStringToBold = () => {\r\n        if (children === '') return children;\r\n        const result = children.split(boldRegex);\r\n        if (result.length === 1) return children;\r\n        for (let i = 1, length = result.length; i < length; i += 2) {\r\n            result[i] = boldMatch(result[i], i, theme);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const boldMatch = (match, i) => {\r\n        return <Text key={i} strong tag=\"b\" {...themeObj}>{match}</Text>;\r\n    };\r\n\r\n    const renderText = () => {\r\n        let textArray;\r\n        if (!Array.isArray(children)) textArray = [children];\r\n\r\n        return flatten(textArray.map(x => {\r\n            return isString(x) ? replaceStringToBold(x, theme) : x;\r\n        }));\r\n    };\r\n\r\n    const getTheme = () => {\r\n        return { [theme]: true };\r\n    };\r\n\r\n    const getIconColor = () => {\r\n        return [colors[`${theme}Text`]];\r\n    };\r\n\r\n    const themeObj = getTheme(theme);\r\n\r\n    return (\r\n        <div id={id} className={className} style={style}>\r\n            <Flexbox display=\"flex\" justifyContent=\"start\" className={`${classes.container} ${classes[theme]}`}>\r\n                {icon && <Icon iconName={icon} className={classes.icon} colors={getIconColor(theme)} />}\r\n                <Flexbox flex=\"1\">\r\n                    <Text standard tag=\"div\" {...themeObj}>\r\n                        {renderText()}\r\n                    </Text>\r\n                </Flexbox>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n};\r\n\r\nTip.defaultProps = {\r\n    theme: 'info'\r\n};\r\n\r\nTip.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    /** Theme of the Tip. */\r\n    theme: PropTypes.oneOf([\r\n        'info', 'warning', 'success', 'error'\r\n    ]),\r\n    /** Text of the tip. If you put text between two * characters that text will be displayed as bold. */\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.node\r\n    ]).isRequired,\r\n    /** Icon name to show on the left. */\r\n    icon: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Tip;\r\n","examples":[{"name":"Example1","description":"","code":"/* Themes of Tip */\r\nimport React from 'react';\r\nimport { Tip } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Tip theme=\"info\">Tip with some simple text.</Tip>\r\n            <Tip theme=\"warning\">Tip with some simple text.</Tip>\r\n            <Tip theme=\"success\">Tip with some simple text.</Tip>\r\n            <Tip theme=\"error\">Tip with some simple text.</Tip>\r\n        </div>\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Tip with icon */\r\nimport React from 'react';\r\nimport { Tip } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Tip icon=\"bulb\" theme=\"info\">\r\n            Tip with icon.\r\n        </Tip>\r\n    );\r\n}\r\n"},{"name":"Example3","description":"","code":"/* Tip with bold text */\r\nimport React from 'react';\r\nimport { Tip } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Tip theme=\"info\">\r\n            This tip has some *bold text* and some regular text.\r\n        </Tip>\r\n    );\r\n}\r\n"}]},{"name":"Title","description":"Component to display heading tags with its coresponding style.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"h":{"type":{"name":"number"},"required":true,"description":"A number with the heading level, between 1 and 6."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Component to display heading tags with its coresponding style. */\r\nclass Title extends React.Component {\r\n\r\n    componentDidMount() {\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.warn('DEPRECATED: The Title component will be removed soon. Use the Text component instead.');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes, children, h, id, className, style } = this.props;\r\n        let Heading;\r\n        if (h && h<=6 && h>=1)\r\n            Heading = `h${h}`;\r\n        else\r\n            Heading = 'h1';\r\n        return (\r\n            <Heading id={id} className={`${classes.title} ${classes[Heading]}${className ? ` ${className}` : ''}`} style={style}>\r\n                {children}\r\n            </Heading>\r\n        );\r\n    }\r\n}\r\n\r\nTitle.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** A number with the heading level, between 1 and 6. */\r\n    h: PropTypes.number.isRequired,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n};\r\n\r\nexport default Title;\r\n","examples":[{"name":"Example1","description":"","code":"/* Title with h1 */\r\nimport React from 'react';\r\nimport { Title } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Title h={1}>Title</Title>\r\n    );\r\n}"}]},{"name":"Toaster","description":"The Toaster component allows you to trigger any of the predefined types of alerts. Insert the Toaster component in any part of your site, and handle the alerts with the toaster object's API.\r\nCheck the example to see how to trigger any kind of alert. This component will only show one toast at a time, any new toast will automatically dismiss the current toast.\r\nThe toast object can have the next properties:\r\n• title - string\r\n• description -string\r\n• hasIcon - boolean\r\n• action - object with label and onClick\r\n• timer - one of: 'normal', 'longer'\r\nYou can only mount one Toaster component at a time, since mounting an instance sets the toaster listeners, and unmounting the component nullifies the existing listeners, so having two instances of Toaster and unmounting one will break them.","props":{"classes":{"type":{"name":"object"},"required":true,"description":""},"container":{"type":{"name":"object"},"required":false,"description":"DOM Element to append the Toaster component into it. If you don't specify a container the Toaster will be rendered in the exact same DOM position you used it. This can in some cases generate problems with z-index or position."}},"code":"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport Toast from './Toast';\r\nimport { toaster, Timer } from './functions';\r\n\r\nconst timings = {\r\n\tnormal: 5000,\r\n\tlonger: 8000\r\n};\r\n\r\n/**\r\n* The Toaster component allows you to trigger any of the predefined types of alerts. Insert the Toaster component in any part of your site, and handle the alerts with the toaster object's API.\r\n* Check the example to see how to trigger any kind of alert. This component will only show one toast at a time, any new toast will automatically dismiss the current toast.\r\n* The toast object can have the next properties:\r\n* • title - string\r\n* • description -string\r\n* • hasIcon - boolean\r\n* • action - object with label and onClick\r\n* • timer - one of: 'normal', 'longer'\r\n* You can only mount one Toaster component at a time, since mounting an instance sets the toaster listeners, and unmounting the component nullifies the existing listeners, so having two instances of Toaster and unmounting one will break them.\r\n*/\r\nclass Toaster extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttoast: null,\r\n\t\t\ttoastId: null\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\ttoaster.registerAddListener(this.onAdd);\r\n\t\ttoaster.registerCloseListener(this.onClose);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\ttoaster.registerAddListener(null);\r\n\t\ttoaster.registerCloseListener(null);\r\n\t\tthis.resetTimer();\r\n\t}\r\n\r\n\tonAdd = (toast, toastId) => {\r\n\t\tthis.resetTimer();\r\n\t\ttoast.closing = false;\r\n\t\tthis.setState({ toast, toastId }, () => {\r\n\t\t\tthis.addTimer();\r\n\t\t});\r\n\t}\r\n\r\n\tonClose = toast => {\r\n\t\tthis.resetTimer();\r\n\t\ttoast.closing = true;\r\n\t\tthis.setState({ toast });\r\n\t\tthis.timer = new Timer(() => {\r\n\t\t\ttoaster.removeToast();\r\n\t\t\tthis.setState({ toast: null });\r\n\t\t}, 300);\r\n\t}\r\n\r\n\tpauseTimer = () => this.timer.pause();\r\n\r\n\tresumeTimer = () => this.timer.resume();\r\n\r\n\taddTimer = () => {\r\n\t\tconst { toast } = this.state;\r\n\t\tconst defaultTime = timings.normal;\r\n\t\tconst time = toast.timer ? timings[toast.timer] || defaultTime : defaultTime;\r\n\t\tthis.timer = new Timer(() => {\r\n\t\t\tthis.onClose(toast);\r\n\t\t}, time);\r\n\t}\r\n\r\n\tresetTimer = () => { if (this.timer) this.timer.cancel(); }\r\n\r\n\trender() {\r\n\t\tconst { toast, toastId } = this.state;\r\n\t\tconst { classes, container } = this.props;\r\n\t\tconst ToasterComponent = (\r\n\t\t\t<div className={classes.container}>\r\n\t\t\t\t{!!toast && (\r\n\t\t\t\t\t<Toast\r\n\t\t\t\t\t\tkey={toastId}\r\n\t\t\t\t\t\tdescription={toast.description}\r\n\t\t\t\t\t\ttitle={toast.title}\r\n\t\t\t\t\t\ttheme={toast.type}\r\n\t\t\t\t\t\taction={toast.action}\r\n\t\t\t\t\t\thasIcon={toast.hasIcon}\r\n\t\t\t\t\t\tclosing={toast.closing}\r\n\t\t\t\t\t\tonClose={() => this.onClose(toast)}\r\n\t\t\t\t\t\tpauseTimer={this.pauseTimer}\r\n\t\t\t\t\t\tresumeTimer={this.resumeTimer}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n        return container ? (\r\n\t\t\tReactDOM.createPortal(\r\n                ToasterComponent,\r\n                container\r\n            )\r\n\t\t) : ToasterComponent;\r\n\t}\r\n}\r\n\r\nToaster.propTypes = {\r\n\tclasses: PropTypes.object.isRequired,\r\n\t/** DOM Element to append the Toaster component into it. If you don't specify a container the Toaster will be rendered in the exact same DOM position you used it. This can in some cases generate problems with z-index or position. */\r\n\tcontainer: PropTypes.object\r\n};\r\n\r\nexport default Toaster;\r\n","examples":[{"name":"Example1","description":"","code":"/* Simple toast */\r\nimport React, { Fragment } from 'react';\r\nimport { Toaster, Button, toaster } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const toast = {\r\n        description: 'This toast will be automatically dismissed in 5 seconds'\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <Button onClick={() => toaster.success(toast)}>Launch toast</Button>\r\n            <Toaster container={document.body} />\r\n        </Fragment>\r\n    );\r\n}\r\n"},{"name":"Example2","description":"","code":"/* Toast with a longer timeout */\r\nimport React, { Fragment } from 'react';\r\nimport { Toaster, Button, toaster } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    const toast = {\r\n        description: 'This toast will be automatically dismissed in 8 seconds',\r\n        timer: 'longer'\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <Button onClick={() => toaster.success(toast)}>Launch toast</Button>\r\n            <Toaster container={document.body} />\r\n        </Fragment>\r\n    );\r\n}\r\n"},{"name":"Example3","description":"","code":"/* Toast with an action button */\r\nimport React, { Fragment } from 'react';\r\nimport { Toaster, Button, toaster } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    const toast = {\r\n        description: 'The click on the action button will call a function and dismiss the toast',\r\n        action: {\r\n            label: 'Click me',\r\n            onClick: () => console.log('Action button clicked')\r\n        }\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <Button onClick={() => toaster.success(toast)}>Launch toast</Button>\r\n            <Toaster container={document.body} />\r\n        </Fragment>\r\n    );\r\n}\r\n"},{"name":"Example4","description":"","code":"/* Toast with an icon */\r\nimport React, { Fragment } from 'react';\r\nimport { Toaster, Button, toaster } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    const toast = {\r\n        description: 'The icon depends on the toast type',\r\n        hasIcon: true\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <Button onClick={() => toaster.success(toast)}>Launch toast</Button>\r\n            <Toaster container={document.body} />\r\n        </Fragment>\r\n    );\r\n}\r\n"},{"name":"Example5","description":"","code":"/* Toast with a title */\r\nimport React, { Fragment } from 'react';\r\nimport { Toaster, Button, toaster } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    const toast = {\r\n        title: 'Title of the toast',\r\n        description: 'This toast has a title',\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <Button onClick={() => toaster.success(toast)}>Launch toast</Button>\r\n            <Toaster container={document.body} />\r\n        </Fragment>\r\n    );\r\n}\r\n"},{"name":"Example6","description":"","code":"/* Toast types */\r\nimport React, { Fragment } from 'react';\r\nimport { Toaster, Button, toaster } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example6() {\r\n    const addToast = (type) => {\r\n        const data = {\r\n            description: `This is the ${type} toast`\r\n        };\r\n        if (type === 'success') toaster.success(data);\r\n        else if (type === 'error') toaster.error(data);\r\n        else if (type === 'info') toaster.info(data);\r\n        else toaster.warning(data);\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <Button onClick={() => addToast('success')} id=\"button1\">Success</Button>\r\n            <Button onClick={() => addToast('error')} id=\"button1\">Error</Button>\r\n            <Button onClick={() => addToast('info')} id=\"button1\">Info</Button>\r\n            <Button onClick={() => addToast('warning')} id=\"button1\">Warning</Button>\r\n            <Toaster container={document.body} />\r\n        </Fragment>\r\n    );\r\n}\r\n"},{"name":"Example7","description":"","code":"/* Simple toast */\r\nimport React, { Fragment } from 'react';\r\nimport { Toaster, Button, toaster } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const toast = {\r\n        description: 'Dismiss this toast by clicking the \"Clear\" button'\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <Button onClick={() => toaster.success(toast)}>Launch toast</Button>\r\n            <Button theme=\"tertiary\" onClick={() => toaster.close()}>Clear</Button>\r\n            <Toaster container={document.body} />\r\n        </Fragment>\r\n    );\r\n}\r\n"}]},{"name":"TourTip","description":"This component displays a tooltip in a defined direction and alignment relative to a specified element. To make it work both, the target and the TourTip component, must be wrapped inside a 'relative' container.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"direction":{"type":{"name":"string"},"required":false,"description":"Side of the target where the TourTip will be displayed.","defaultValue":{"value":"\"left\"","computed":false}},"align":{"type":{"name":"string"},"required":false,"description":"Alignment of the TourTip in the specified direction.","defaultValue":{"value":"\"center\"","computed":false}},"target":{"type":{"name":"string"},"required":true,"description":"The id of the target item. The target item must be inside a container with the display property as 'relative'."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDOM from 'react-dom';\r\nimport $ from 'jquery';\r\n\r\n/** This component displays a tooltip in a defined direction and alignment relative to a specified element. To make it work both, the target and the TourTip component, must be wrapped inside a 'relative' container. */\r\nclass TourTip extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            position: {}\r\n        };\r\n        this.attachToTarget = this.attachToTarget.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const setPosition = () => {\r\n            this.setState({\r\n                position: this.attachToTarget()\r\n            });\r\n        };\r\n        $(document).ready(setPosition);\r\n        window.addEventListener(\"resize\", setPosition);\r\n    }\r\n    \r\n    attachToTarget() {\r\n        const { target, direction, align } = this.props;\r\n        const item = document.getElementById(target);\r\n        const itemRect = item.getBoundingClientRect();\r\n        const offsetLeft = item.offsetLeft;\r\n        const offsetTop = item.offsetTop;\r\n        const tip = ReactDOM.findDOMNode(this);\r\n        const tipRect = tip.getBoundingClientRect();\r\n        let position = {};\r\n        if (direction == \"left\") {\r\n            position.left = offsetLeft - tipRect.width - 5;\r\n            if (align == \"top\")\r\n                position.top = offsetTop;\r\n            else if (align == \"bottom\")\r\n                position.top = offsetTop + itemRect.height - tipRect.height;\r\n            else\r\n                position.top = offsetTop + (itemRect.height/2) - (tipRect.height/2);\r\n        } else if (direction == \"right\") {\r\n            position.left = offsetLeft + itemRect.width + 5;\r\n            if (align == \"top\")\r\n                position.top = offsetTop;\r\n            else if (align == \"bottom\")\r\n                position.top = offsetTop + itemRect.height - tipRect.height;\r\n            else\r\n                position.top = offsetTop + (itemRect.height/2) - (tipRect.height/2);\r\n        } else if (direction == \"up\") {\r\n            if (align == \"left\")\r\n                position.left = offsetLeft;\r\n            else if (align == \"right\")\r\n                position.left = offsetLeft + itemRect.width -tipRect.width;\r\n            else\r\n                position.left = offsetLeft + (itemRect.width/2) - (tipRect.width/2);\r\n            position.top = offsetTop - tipRect.height - 5;\r\n        } else if (direction == \"down\") {\r\n            if (align == \"left\")\r\n                position.left = offsetLeft;\r\n            else if (align == \"right\")\r\n                position.left = offsetLeft + itemRect.width -tipRect.width;\r\n            else\r\n                position.left = offsetLeft + (itemRect.width/2) - (tipRect.width/2);\r\n            position.top = offsetTop + itemRect.height + 5;\r\n        }\r\n        return position;\r\n    }\r\n    \r\n    render() {\r\n        const { position } = this.state;\r\n        const { classes, children, direction, id, className } = this.props;\r\n        return (\r\n            <div ref={ref => { this.self = ref; }} className={`${classes.tip} ${classes[direction]}${className ? ` ${className}` : ''}`} id={id} style={position}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nTourTip.defaultProps = {\r\n    direction: \"left\",\r\n    align: \"center\"\r\n};\r\n\r\nTourTip.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Side of the target where the TourTip will be displayed. */\r\n    direction: PropTypes.string.isRequired,\r\n    /** Alignment of the TourTip in the specified direction. */\r\n    align: PropTypes.string.isRequired,\r\n    /** The id of the target item. The target item must be inside a container with the display property as 'relative'. */\r\n    target: PropTypes.string.isRequired,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default TourTip;","examples":[{"name":"Example1","description":"","code":"/* TourTip */\r\nimport React from 'react';\r\nimport { TourTip } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div style={{position:'relative'}}>\r\n            <div id=\"target\" style={{width:100, height:100, background:'#f7f7f7', display:'flex', textAlign:'center', alignItems:'center'}}>Some content</div>\r\n            <TourTip target=\"target\" direction=\"right\" align=\"center\">TourTip</TourTip>\r\n        </div>\r\n    );\r\n}"}]},{"name":"Visible","description":"Shows the content on the specified window size.","props":{"children":{"type":{"name":"node"},"required":false,"description":""},"xs":{"type":{"name":"bool"},"required":false,"description":"Apply in extra small window size."},"sm":{"type":{"name":"bool"},"required":false,"description":"Apply in small window size."},"md":{"type":{"name":"bool"},"required":false,"description":"Apply in medium window size."},"lg":{"type":{"name":"bool"},"required":false,"description":"Apply in large window size."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport grid from '../subatomic/grid';\r\n\r\n/** Shows the content on the specified window size. */\r\nclass Visible extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 0\r\n        };\r\n        this.getDimensions = this.getDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDimensions();\r\n        window.addEventListener(\"resize\", this.getDimensions);\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.warn('DEPRECATED: The Visible component will be removed soon. Use the Hidden component or the WindowSize HOC and the grid library instead.');\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.getDimensions();\r\n        window.removeEventListener(\"resize\", this.getDimensions);\r\n    }\r\n\r\n    getDimensions() {\r\n        const width = window.innerWidth;\r\n        this.setState({\r\n            width\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { width } = this.state;\r\n        const { children, xs, sm, md, lg} = this.props;\r\n        if (\r\n            ((width >= grid.xxs && width < grid.sm) && xs) ||\r\n            ((width >= grid.sm && width < grid.md) && sm) ||\r\n            ((width >= grid.md && width < grid.lg) && md) ||\r\n            ((width >= grid.lg) && lg)\r\n        ) {\r\n            return <span>{children}</span>;\r\n        } else {\r\n            return <span />;\r\n        }\r\n    }\r\n}\r\n\r\nVisible.propTypes = {\r\n    children: PropTypes.node,\r\n    /** Apply in extra small window size. */\r\n    xs: PropTypes.bool,\r\n    /** Apply in small window size. */\r\n    sm: PropTypes.bool,\r\n    /** Apply in medium window size. */\r\n    md: PropTypes.bool,\r\n    /** Apply in large window size. */\r\n    lg: PropTypes.bool\r\n};\r\n\r\nexport default Visible;\r\n","examples":[{"name":"Example1","description":"","code":"/* Show content in medium window size */\r\nimport React from 'react';\r\nimport { Visible } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Visible md>Content</Visible>\r\n    );\r\n}"}]}];