// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SlideDown matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SlideDown
    classes={
      Object {
        "button": "button",
        "content": "content",
        "hide": "hide",
        "icon": "icon",
        "show": "show",
        "tag": "tag",
        "text": "text",
        "wrapper": "wrapper",
      }
    }
    expanded={false}
    strong={false}
    textSize="md"
    theme="default"
    title="Title"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="button"
          onClick={[Function]}
        >
          <Flexbox
            alignItems="start"
            display="flex"
            justifyContent="between"
          >
            <Flexbox
              alignItems="center"
              display="flex"
            >
              <Flexbox
                alignItems="start"
                display="flex"
                wrap="wrap"
              >
                <div>
                  <UNDEFINED
                    className="text"
                    standard={true}
                    strong={false}
                    tag="label"
                  >
                    Title
                  </UNDEFINED>
                </div>
              </Flexbox>
            </Flexbox>
            <Flexbox
              flex="0 0 auto"
            >
              <UNDEFINED
                className="icon"
                colors={
                  Array [
                    "#222222",
                  ]
                }
                iconName="arrowDown"
                style={
                  Object {
                    "transform": "",
                  }
                }
              />
            </Flexbox>
          </Flexbox>
        </div>,
        false,
      ],
      "className": "wrapper",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Flexbox
            alignItems="start"
            display="flex"
            justifyContent="between"
          >
            <Flexbox
              alignItems="center"
              display="flex"
            >
              <Flexbox
                alignItems="start"
                display="flex"
                wrap="wrap"
              >
                <div>
                  <UNDEFINED
                    className="text"
                    standard={true}
                    strong={false}
                    tag="label"
                  >
                    Title
                  </UNDEFINED>
                </div>
              </Flexbox>
            </Flexbox>
            <Flexbox
              flex="0 0 auto"
            >
              <UNDEFINED
                className="icon"
                colors={
                  Array [
                    "#222222",
                  ]
                }
                iconName="arrowDown"
                style={
                  Object {
                    "transform": "",
                  }
                }
              />
            </Flexbox>
          </Flexbox>,
          "className": "button",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "alignItems": "start",
            "children": Array [
              <Flexbox
                alignItems="center"
                display="flex"
              >
                <Flexbox
                  alignItems="start"
                  display="flex"
                  wrap="wrap"
                >
                  <div>
                    <UNDEFINED
                      className="text"
                      standard={true}
                      strong={false}
                      tag="label"
                    >
                      Title
                    </UNDEFINED>
                  </div>
                </Flexbox>
              </Flexbox>,
              <Flexbox
                flex="0 0 auto"
              >
                <UNDEFINED
                  className="icon"
                  colors={
                    Array [
                      "#222222",
                    ]
                  }
                  iconName="arrowDown"
                  style={
                    Object {
                      "transform": "",
                    }
                  }
                />
              </Flexbox>,
            ],
            "display": "flex",
            "justifyContent": "between",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "alignItems": "center",
                "children": <Flexbox
                  alignItems="start"
                  display="flex"
                  wrap="wrap"
                >
                  <div>
                    <UNDEFINED
                      className="text"
                      standard={true}
                      strong={false}
                      tag="label"
                    >
                      Title
                    </UNDEFINED>
                  </div>
                </Flexbox>,
                "display": "flex",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "alignItems": "start",
                  "children": <div>
                    <UNDEFINED
                      className="text"
                      standard={true}
                      strong={false}
                      tag="label"
                    >
                      Title
                    </UNDEFINED>
                  </div>,
                  "display": "flex",
                  "wrap": "wrap",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <UNDEFINED
                        className="text"
                        standard={true}
                        strong={false}
                        tag="label"
                      >
                        Title
                      </UNDEFINED>,
                      undefined,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": "Title",
                        "className": "text",
                        "standard": true,
                        "strong": false,
                        "tag": "label",
                      },
                      "ref": null,
                      "rendered": "Title",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "InnerComponent": [Function],
                        "displayName": "JssContextSubscriber(Text)",
                        "render": [Function],
                        Symbol(Symbol.hasInstance): [Function],
                      },
                    },
                    undefined,
                  ],
                  "type": "div",
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <UNDEFINED
                  className="icon"
                  colors={
                    Array [
                      "#222222",
                    ]
                  }
                  iconName="arrowDown"
                  style={
                    Object {
                      "transform": "",
                    }
                  }
                />,
                "flex": "0 0 auto",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "icon",
                  "colors": Array [
                    "#222222",
                  ],
                  "iconName": "arrowDown",
                  "style": Object {
                    "transform": "",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "InnerComponent": [Function],
                  "displayName": "JssContextSubscriber(Icon)",
                  "propTypes": Object {
                    "alt": [Function],
                    "className": [Function],
                    "colors": [Function],
                    "display": [Function],
                    "height": [Function],
                    "hover": [Function],
                    "iconName": [Function],
                    "id": [Function],
                    "onClick": [Function],
                    "style": [Function],
                    "transition": [Function],
                    "width": [Function],
                  },
                  "render": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": "div",
      },
      false,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="button"
            onClick={[Function]}
          >
            <Flexbox
              alignItems="start"
              display="flex"
              justifyContent="between"
            >
              <Flexbox
                alignItems="center"
                display="flex"
              >
                <Flexbox
                  alignItems="start"
                  display="flex"
                  wrap="wrap"
                >
                  <div>
                    <UNDEFINED
                      className="text"
                      standard={true}
                      strong={false}
                      tag="label"
                    >
                      Title
                    </UNDEFINED>
                  </div>
                </Flexbox>
              </Flexbox>
              <Flexbox
                flex="0 0 auto"
              >
                <UNDEFINED
                  className="icon"
                  colors={
                    Array [
                      "#222222",
                    ]
                  }
                  iconName="arrowDown"
                  style={
                    Object {
                      "transform": "",
                    }
                  }
                />
              </Flexbox>
            </Flexbox>
          </div>,
          false,
        ],
        "className": "wrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Flexbox
              alignItems="start"
              display="flex"
              justifyContent="between"
            >
              <Flexbox
                alignItems="center"
                display="flex"
              >
                <Flexbox
                  alignItems="start"
                  display="flex"
                  wrap="wrap"
                >
                  <div>
                    <UNDEFINED
                      className="text"
                      standard={true}
                      strong={false}
                      tag="label"
                    >
                      Title
                    </UNDEFINED>
                  </div>
                </Flexbox>
              </Flexbox>
              <Flexbox
                flex="0 0 auto"
              >
                <UNDEFINED
                  className="icon"
                  colors={
                    Array [
                      "#222222",
                    ]
                  }
                  iconName="arrowDown"
                  style={
                    Object {
                      "transform": "",
                    }
                  }
                />
              </Flexbox>
            </Flexbox>,
            "className": "button",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "alignItems": "start",
              "children": Array [
                <Flexbox
                  alignItems="center"
                  display="flex"
                >
                  <Flexbox
                    alignItems="start"
                    display="flex"
                    wrap="wrap"
                  >
                    <div>
                      <UNDEFINED
                        className="text"
                        standard={true}
                        strong={false}
                        tag="label"
                      >
                        Title
                      </UNDEFINED>
                    </div>
                  </Flexbox>
                </Flexbox>,
                <Flexbox
                  flex="0 0 auto"
                >
                  <UNDEFINED
                    className="icon"
                    colors={
                      Array [
                        "#222222",
                      ]
                    }
                    iconName="arrowDown"
                    style={
                      Object {
                        "transform": "",
                      }
                    }
                  />
                </Flexbox>,
              ],
              "display": "flex",
              "justifyContent": "between",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "alignItems": "center",
                  "children": <Flexbox
                    alignItems="start"
                    display="flex"
                    wrap="wrap"
                  >
                    <div>
                      <UNDEFINED
                        className="text"
                        standard={true}
                        strong={false}
                        tag="label"
                      >
                        Title
                      </UNDEFINED>
                    </div>
                  </Flexbox>,
                  "display": "flex",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "alignItems": "start",
                    "children": <div>
                      <UNDEFINED
                        className="text"
                        standard={true}
                        strong={false}
                        tag="label"
                      >
                        Title
                      </UNDEFINED>
                    </div>,
                    "display": "flex",
                    "wrap": "wrap",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <UNDEFINED
                          className="text"
                          standard={true}
                          strong={false}
                          tag="label"
                        >
                          Title
                        </UNDEFINED>,
                        undefined,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": "Title",
                          "className": "text",
                          "standard": true,
                          "strong": false,
                          "tag": "label",
                        },
                        "ref": null,
                        "rendered": "Title",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "InnerComponent": [Function],
                          "displayName": "JssContextSubscriber(Text)",
                          "render": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        },
                      },
                      undefined,
                    ],
                    "type": "div",
                  },
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <UNDEFINED
                    className="icon"
                    colors={
                      Array [
                        "#222222",
                      ]
                    }
                    iconName="arrowDown"
                    style={
                      Object {
                        "transform": "",
                      }
                    }
                  />,
                  "flex": "0 0 auto",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "icon",
                    "colors": Array [
                      "#222222",
                    ],
                    "iconName": "arrowDown",
                    "style": Object {
                      "transform": "",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "InnerComponent": [Function],
                    "displayName": "JssContextSubscriber(Icon)",
                    "propTypes": Object {
                      "alt": [Function],
                      "className": [Function],
                      "colors": [Function],
                      "display": [Function],
                      "height": [Function],
                      "hover": [Function],
                      "iconName": [Function],
                      "id": [Function],
                      "onClick": [Function],
                      "style": [Function],
                      "transition": [Function],
                      "width": [Function],
                    },
                    "render": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  },
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
        false,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`SlideDown styles matches the snapshot 1`] = `
Object {
  "button": Object {
    "cursor": "pointer",
  },
  "content": Object {
    "transition": "0.3s all ease-out",
  },
  "hide": Object {
    "marginBottom": 16,
    "marginTop": -16,
    "opacity": 0,
    "pointerEvents": "none",
  },
  "icon": Object {
    "marginLeft": 8,
    "marginTop": 4,
  },
  "show": Object {
    "marginBottom": 0,
    "marginTop": 0,
    "opacity": 1,
  },
  "tag": Object {
    "marginLeft": 8,
    "marginTop": 4,
    "pointerEvents": "none",
  },
  "text": Object {
    "cursor": "pointer",
  },
  "wrapper": Object {
    "marginBottom": 16,
  },
}
`;

exports[`SlideDownJSS matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UNDEFINED />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": [Function],
    },
    "ref": null,
    "rendered": [Function],
    "type": Object {
      "$$typeof": Symbol(react.context),
      "_calculateChangedBits": null,
      "_context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_currentRenderer": null,
        "_currentRenderer2": null,
        "_currentValue": Object {
          "classNamePrefix": "",
          "disableStylesGeneration": false,
        },
        "_currentValue2": Object {
          "classNamePrefix": "",
          "disableStylesGeneration": false,
        },
        "_threadCount": 0,
      },
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": [Function],
      },
      "ref": null,
      "rendered": [Function],
      "type": Object {
        "$$typeof": Symbol(react.context),
        "_calculateChangedBits": null,
        "_context": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": null,
          "_currentRenderer2": null,
          "_currentValue": Object {
            "classNamePrefix": "",
            "disableStylesGeneration": false,
          },
          "_currentValue2": Object {
            "classNamePrefix": "",
            "disableStylesGeneration": false,
          },
          "_threadCount": 0,
        },
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
