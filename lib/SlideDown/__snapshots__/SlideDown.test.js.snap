// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SlideDown matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SlideDown
    classes={
      Object {
        "button": "button",
        "content": "content",
        "hide": "hide",
        "icon": "icon",
        "show": "show",
        "tag": "tag",
        "text": "text",
        "wrapper": "wrapper",
      }
    }
    expanded={false}
    strong={false}
    textSize="md"
    theme="default"
    title="Title"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="button"
          onClick={[Function]}
        >
          <Jss(Flexbox)
            alignItems="start"
            display="flex"
            justifyContent="between"
          >
            <Jss(Flexbox)
              alignItems="center"
              display="flex"
            >
              <Jss(Flexbox)
                alignItems="start"
                display="flex"
                wrap="wrap"
              >
                <div>
                  <Jss(Text)
                    className="text"
                    standard={true}
                    strong={false}
                    tag="label"
                  >
                    Title
                  </Jss(Text)>
                </div>
              </Jss(Flexbox)>
            </Jss(Flexbox)>
            <Jss(Flexbox)
              flex="0 0 auto"
            >
              <Jss(Icon)
                className="icon"
                colors={
                  Array [
                    "#222222",
                  ]
                }
                iconName="arrowDown"
                style={
                  Object {
                    "transform": "",
                  }
                }
                transition="0.3s all"
              />
            </Jss(Flexbox)>
          </Jss(Flexbox)>
        </div>,
        false,
      ],
      "className": "wrapper",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Jss(Flexbox)
            alignItems="start"
            display="flex"
            justifyContent="between"
          >
            <Jss(Flexbox)
              alignItems="center"
              display="flex"
            >
              <Jss(Flexbox)
                alignItems="start"
                display="flex"
                wrap="wrap"
              >
                <div>
                  <Jss(Text)
                    className="text"
                    standard={true}
                    strong={false}
                    tag="label"
                  >
                    Title
                  </Jss(Text)>
                </div>
              </Jss(Flexbox)>
            </Jss(Flexbox)>
            <Jss(Flexbox)
              flex="0 0 auto"
            >
              <Jss(Icon)
                className="icon"
                colors={
                  Array [
                    "#222222",
                  ]
                }
                iconName="arrowDown"
                style={
                  Object {
                    "transform": "",
                  }
                }
                transition="0.3s all"
              />
            </Jss(Flexbox)>
          </Jss(Flexbox)>,
          "className": "button",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "alignItems": "start",
            "children": Array [
              <Jss(Flexbox)
                alignItems="center"
                display="flex"
              >
                <Jss(Flexbox)
                  alignItems="start"
                  display="flex"
                  wrap="wrap"
                >
                  <div>
                    <Jss(Text)
                      className="text"
                      standard={true}
                      strong={false}
                      tag="label"
                    >
                      Title
                    </Jss(Text)>
                  </div>
                </Jss(Flexbox)>
              </Jss(Flexbox)>,
              <Jss(Flexbox)
                flex="0 0 auto"
              >
                <Jss(Icon)
                  className="icon"
                  colors={
                    Array [
                      "#222222",
                    ]
                  }
                  iconName="arrowDown"
                  style={
                    Object {
                      "transform": "",
                    }
                  }
                  transition="0.3s all"
                />
              </Jss(Flexbox)>,
            ],
            "display": "flex",
            "justifyContent": "between",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "alignItems": "center",
                "children": <Jss(Flexbox)
                  alignItems="start"
                  display="flex"
                  wrap="wrap"
                >
                  <div>
                    <Jss(Text)
                      className="text"
                      standard={true}
                      strong={false}
                      tag="label"
                    >
                      Title
                    </Jss(Text)>
                  </div>
                </Jss(Flexbox)>,
                "display": "flex",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "alignItems": "start",
                  "children": <div>
                    <Jss(Text)
                      className="text"
                      standard={true}
                      strong={false}
                      tag="label"
                    >
                      Title
                    </Jss(Text)>
                  </div>,
                  "display": "flex",
                  "wrap": "wrap",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <Jss(Text)
                        className="text"
                        standard={true}
                        strong={false}
                        tag="label"
                      >
                        Title
                      </Jss(Text)>,
                      undefined,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Title",
                        "className": "text",
                        "standard": true,
                        "strong": false,
                        "tag": "label",
                      },
                      "ref": null,
                      "rendered": "Title",
                      "type": [Function],
                    },
                    undefined,
                  ],
                  "type": "div",
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Jss(Icon)
                  className="icon"
                  colors={
                    Array [
                      "#222222",
                    ]
                  }
                  iconName="arrowDown"
                  style={
                    Object {
                      "transform": "",
                    }
                  }
                  transition="0.3s all"
                />,
                "flex": "0 0 auto",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "icon",
                  "colors": Array [
                    "#222222",
                  ],
                  "iconName": "arrowDown",
                  "style": Object {
                    "transform": "",
                  },
                  "transition": "0.3s all",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": "div",
      },
      false,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="button"
            onClick={[Function]}
          >
            <Jss(Flexbox)
              alignItems="start"
              display="flex"
              justifyContent="between"
            >
              <Jss(Flexbox)
                alignItems="center"
                display="flex"
              >
                <Jss(Flexbox)
                  alignItems="start"
                  display="flex"
                  wrap="wrap"
                >
                  <div>
                    <Jss(Text)
                      className="text"
                      standard={true}
                      strong={false}
                      tag="label"
                    >
                      Title
                    </Jss(Text)>
                  </div>
                </Jss(Flexbox)>
              </Jss(Flexbox)>
              <Jss(Flexbox)
                flex="0 0 auto"
              >
                <Jss(Icon)
                  className="icon"
                  colors={
                    Array [
                      "#222222",
                    ]
                  }
                  iconName="arrowDown"
                  style={
                    Object {
                      "transform": "",
                    }
                  }
                  transition="0.3s all"
                />
              </Jss(Flexbox)>
            </Jss(Flexbox)>
          </div>,
          false,
        ],
        "className": "wrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Jss(Flexbox)
              alignItems="start"
              display="flex"
              justifyContent="between"
            >
              <Jss(Flexbox)
                alignItems="center"
                display="flex"
              >
                <Jss(Flexbox)
                  alignItems="start"
                  display="flex"
                  wrap="wrap"
                >
                  <div>
                    <Jss(Text)
                      className="text"
                      standard={true}
                      strong={false}
                      tag="label"
                    >
                      Title
                    </Jss(Text)>
                  </div>
                </Jss(Flexbox)>
              </Jss(Flexbox)>
              <Jss(Flexbox)
                flex="0 0 auto"
              >
                <Jss(Icon)
                  className="icon"
                  colors={
                    Array [
                      "#222222",
                    ]
                  }
                  iconName="arrowDown"
                  style={
                    Object {
                      "transform": "",
                    }
                  }
                  transition="0.3s all"
                />
              </Jss(Flexbox)>
            </Jss(Flexbox)>,
            "className": "button",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "alignItems": "start",
              "children": Array [
                <Jss(Flexbox)
                  alignItems="center"
                  display="flex"
                >
                  <Jss(Flexbox)
                    alignItems="start"
                    display="flex"
                    wrap="wrap"
                  >
                    <div>
                      <Jss(Text)
                        className="text"
                        standard={true}
                        strong={false}
                        tag="label"
                      >
                        Title
                      </Jss(Text)>
                    </div>
                  </Jss(Flexbox)>
                </Jss(Flexbox)>,
                <Jss(Flexbox)
                  flex="0 0 auto"
                >
                  <Jss(Icon)
                    className="icon"
                    colors={
                      Array [
                        "#222222",
                      ]
                    }
                    iconName="arrowDown"
                    style={
                      Object {
                        "transform": "",
                      }
                    }
                    transition="0.3s all"
                  />
                </Jss(Flexbox)>,
              ],
              "display": "flex",
              "justifyContent": "between",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "alignItems": "center",
                  "children": <Jss(Flexbox)
                    alignItems="start"
                    display="flex"
                    wrap="wrap"
                  >
                    <div>
                      <Jss(Text)
                        className="text"
                        standard={true}
                        strong={false}
                        tag="label"
                      >
                        Title
                      </Jss(Text)>
                    </div>
                  </Jss(Flexbox)>,
                  "display": "flex",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "alignItems": "start",
                    "children": <div>
                      <Jss(Text)
                        className="text"
                        standard={true}
                        strong={false}
                        tag="label"
                      >
                        Title
                      </Jss(Text)>
                    </div>,
                    "display": "flex",
                    "wrap": "wrap",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <Jss(Text)
                          className="text"
                          standard={true}
                          strong={false}
                          tag="label"
                        >
                          Title
                        </Jss(Text)>,
                        undefined,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": "Title",
                          "className": "text",
                          "standard": true,
                          "strong": false,
                          "tag": "label",
                        },
                        "ref": null,
                        "rendered": "Title",
                        "type": [Function],
                      },
                      undefined,
                    ],
                    "type": "div",
                  },
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Jss(Icon)
                    className="icon"
                    colors={
                      Array [
                        "#222222",
                      ]
                    }
                    iconName="arrowDown"
                    style={
                      Object {
                        "transform": "",
                      }
                    }
                    transition="0.3s all"
                  />,
                  "flex": "0 0 auto",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "icon",
                    "colors": Array [
                      "#222222",
                    ],
                    "iconName": "arrowDown",
                    "style": Object {
                      "transform": "",
                    },
                    "transition": "0.3s all",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
        false,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`SlideDown styles matches the snapshot 1`] = `
Object {
  "button": Object {
    "cursor": "pointer",
  },
  "content": Object {
    "transition": "0.3s all ease-out",
  },
  "hide": Object {
    "marginBottom": 16,
    "marginTop": -16,
    "opacity": 0,
    "pointerEvents": "none",
  },
  "icon": Object {
    "marginLeft": 8,
    "marginTop": 4,
  },
  "show": Object {
    "marginBottom": 0,
    "marginTop": 0,
    "opacity": 1,
  },
  "tag": Object {
    "marginLeft": 8,
    "marginTop": 4,
    "pointerEvents": "none",
  },
  "text": Object {
    "cursor": "pointer",
  },
  "wrapper": Object {
    "marginBottom": 16,
  },
}
`;

exports[`SlideDownJSS matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Jss(SlideDown)
    expanded={false}
    strong={false}
    textSize="md"
    theme="default"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "classes": Object {
        "button": "SlideDown-button-0-1-111",
        "content": "SlideDown-content-0-1-113",
        "hide": "SlideDown-hide-0-1-114",
        "icon": "SlideDown-icon-0-1-117",
        "show": "SlideDown-show-0-1-115",
        "tag": "SlideDown-tag-0-1-116",
        "text": "SlideDown-text-0-1-112",
        "wrapper": "SlideDown-wrapper-0-1-110",
      },
      "expanded": false,
      "strong": false,
      "textSize": "md",
      "theme": "default",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "classes": Object {
          "button": "SlideDown-button-0-1-111",
          "content": "SlideDown-content-0-1-113",
          "hide": "SlideDown-hide-0-1-114",
          "icon": "SlideDown-icon-0-1-117",
          "show": "SlideDown-show-0-1-115",
          "tag": "SlideDown-tag-0-1-116",
          "text": "SlideDown-text-0-1-112",
          "wrapper": "SlideDown-wrapper-0-1-110",
        },
        "expanded": false,
        "strong": false,
        "textSize": "md",
        "theme": "default",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
