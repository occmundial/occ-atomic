// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Modal matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Modal
    classes={
      Object {
        "@global": "@global",
        "@keyframes modalFadeDown": "@keyframes modalFadeDown",
        "@keyframes modalFadeIn": "@keyframes modalFadeIn",
        "bottom": "bottom",
        "card": "card",
        "cardBlock": "cardBlock",
        "cardHide": "cardHide",
        "cardShow": "cardShow",
        "cardWrapper": "cardWrapper",
        "closeIcon": "closeIcon",
        "closePosition": "closePosition",
        "content": "content",
        "imgLeft": "imgLeft",
        "imgTop": "imgTop",
        "lg": "lg",
        "mainBtn": "mainBtn",
        "md": "md",
        "noClose": "noClose",
        "overlay": "overlay",
        "overlayHide": "overlayHide",
        "overlayShow": "overlayShow",
        "secBtn": "secBtn",
        "sm": "sm",
        "top": "top",
        "xl": "xl",
      }
    }
    onClose={[MockFunction]}
    size="md"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="cardWrapper"
      >
        <div
          className="cardBlock"
          onClick={[Function]}
        >
          <Jss(Card)
            className="card md cardHide"
            shadow={5}
          >
            <Jss(Flexbox)
              direction="col"
              display="flex"
            >
              <Jss(Flexbox)
                flex="1"
              >
                <Jss(Flexbox)
                  alignItems="start"
                  className="top"
                  display="flex"
                  justifyContent="end"
                >
                  <div
                    className="closeIcon"
                  >
                    <Jss(Icon)
                      colors={
                        Array [
                          "#222222",
                        ]
                      }
                      height={24}
                      iconName="close"
                      onClick={[MockFunction]}
                      transition="0.3s all"
                      width={24}
                    />
                  </div>
                </Jss(Flexbox)>
                <div
                  className="content"
                />
              </Jss(Flexbox)>
            </Jss(Flexbox)>
          </Jss(Card)>
        </div>
      </div>,
      "className": "overlay overlayHide",
      "onClick": [MockFunction],
      "onTransitionEnd": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="cardBlock"
          onClick={[Function]}
        >
          <Jss(Card)
            className="card md cardHide"
            shadow={5}
          >
            <Jss(Flexbox)
              direction="col"
              display="flex"
            >
              <Jss(Flexbox)
                flex="1"
              >
                <Jss(Flexbox)
                  alignItems="start"
                  className="top"
                  display="flex"
                  justifyContent="end"
                >
                  <div
                    className="closeIcon"
                  >
                    <Jss(Icon)
                      colors={
                        Array [
                          "#222222",
                        ]
                      }
                      height={24}
                      iconName="close"
                      onClick={[MockFunction]}
                      transition="0.3s all"
                      width={24}
                    />
                  </div>
                </Jss(Flexbox)>
                <div
                  className="content"
                />
              </Jss(Flexbox)>
            </Jss(Flexbox)>
          </Jss(Card)>
        </div>,
        "className": "cardWrapper",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Jss(Card)
            className="card md cardHide"
            shadow={5}
          >
            <Jss(Flexbox)
              direction="col"
              display="flex"
            >
              <Jss(Flexbox)
                flex="1"
              >
                <Jss(Flexbox)
                  alignItems="start"
                  className="top"
                  display="flex"
                  justifyContent="end"
                >
                  <div
                    className="closeIcon"
                  >
                    <Jss(Icon)
                      colors={
                        Array [
                          "#222222",
                        ]
                      }
                      height={24}
                      iconName="close"
                      onClick={[MockFunction]}
                      transition="0.3s all"
                      width={24}
                    />
                  </div>
                </Jss(Flexbox)>
                <div
                  className="content"
                />
              </Jss(Flexbox)>
            </Jss(Flexbox)>
          </Jss(Card)>,
          "className": "cardBlock",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Jss(Flexbox)
              direction="col"
              display="flex"
            >
              <Jss(Flexbox)
                flex="1"
              >
                <Jss(Flexbox)
                  alignItems="start"
                  className="top"
                  display="flex"
                  justifyContent="end"
                >
                  <div
                    className="closeIcon"
                  >
                    <Jss(Icon)
                      colors={
                        Array [
                          "#222222",
                        ]
                      }
                      height={24}
                      iconName="close"
                      onClick={[MockFunction]}
                      transition="0.3s all"
                      width={24}
                    />
                  </div>
                </Jss(Flexbox)>
                <div
                  className="content"
                />
              </Jss(Flexbox)>
            </Jss(Flexbox)>,
            "className": "card md cardHide",
            "shadow": 5,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                undefined,
                <Jss(Flexbox)
                  flex="1"
                >
                  <Jss(Flexbox)
                    alignItems="start"
                    className="top"
                    display="flex"
                    justifyContent="end"
                  >
                    <div
                      className="closeIcon"
                    >
                      <Jss(Icon)
                        colors={
                          Array [
                            "#222222",
                          ]
                        }
                        height={24}
                        iconName="close"
                        onClick={[MockFunction]}
                        transition="0.3s all"
                        width={24}
                      />
                    </div>
                  </Jss(Flexbox)>
                  <div
                    className="content"
                  />
                </Jss(Flexbox)>,
              ],
              "direction": "col",
              "display": "flex",
            },
            "ref": null,
            "rendered": Array [
              undefined,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Jss(Flexbox)
                      alignItems="start"
                      className="top"
                      display="flex"
                      justifyContent="end"
                    >
                      <div
                        className="closeIcon"
                      >
                        <Jss(Icon)
                          colors={
                            Array [
                              "#222222",
                            ]
                          }
                          height={24}
                          iconName="close"
                          onClick={[MockFunction]}
                          transition="0.3s all"
                          width={24}
                        />
                      </div>
                    </Jss(Flexbox)>,
                    <div
                      className="content"
                    />,
                    undefined,
                  ],
                  "flex": "1",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "alignItems": "start",
                      "children": Array [
                        undefined,
                        <div
                          className="closeIcon"
                        >
                          <Jss(Icon)
                            colors={
                              Array [
                                "#222222",
                              ]
                            }
                            height={24}
                            iconName="close"
                            onClick={[MockFunction]}
                            transition="0.3s all"
                            width={24}
                          />
                        </div>,
                      ],
                      "className": "top",
                      "display": "flex",
                      "justifyContent": "end",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <Jss(Icon)
                            colors={
                              Array [
                                "#222222",
                              ]
                            }
                            height={24}
                            iconName="close"
                            onClick={[MockFunction]}
                            transition="0.3s all"
                            width={24}
                          />,
                          "className": "closeIcon",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "colors": Array [
                              "#222222",
                            ],
                            "height": 24,
                            "iconName": "close",
                            "onClick": [MockFunction],
                            "transition": "0.3s all",
                            "width": 24,
                          },
                          "ref": null,
                          "rendered": null,
                          "type": [Function],
                        },
                        "type": "div",
                      },
                    ],
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": undefined,
                      "className": "content",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "div",
                  },
                  undefined,
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        "type": "div",
      },
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="cardWrapper"
        >
          <div
            className="cardBlock"
            onClick={[Function]}
          >
            <Jss(Card)
              className="card md cardHide"
              shadow={5}
            >
              <Jss(Flexbox)
                direction="col"
                display="flex"
              >
                <Jss(Flexbox)
                  flex="1"
                >
                  <Jss(Flexbox)
                    alignItems="start"
                    className="top"
                    display="flex"
                    justifyContent="end"
                  >
                    <div
                      className="closeIcon"
                    >
                      <Jss(Icon)
                        colors={
                          Array [
                            "#222222",
                          ]
                        }
                        height={24}
                        iconName="close"
                        onClick={[MockFunction]}
                        transition="0.3s all"
                        width={24}
                      />
                    </div>
                  </Jss(Flexbox)>
                  <div
                    className="content"
                  />
                </Jss(Flexbox)>
              </Jss(Flexbox)>
            </Jss(Card)>
          </div>
        </div>,
        "className": "overlay overlayHide",
        "onClick": [MockFunction],
        "onTransitionEnd": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="cardBlock"
            onClick={[Function]}
          >
            <Jss(Card)
              className="card md cardHide"
              shadow={5}
            >
              <Jss(Flexbox)
                direction="col"
                display="flex"
              >
                <Jss(Flexbox)
                  flex="1"
                >
                  <Jss(Flexbox)
                    alignItems="start"
                    className="top"
                    display="flex"
                    justifyContent="end"
                  >
                    <div
                      className="closeIcon"
                    >
                      <Jss(Icon)
                        colors={
                          Array [
                            "#222222",
                          ]
                        }
                        height={24}
                        iconName="close"
                        onClick={[MockFunction]}
                        transition="0.3s all"
                        width={24}
                      />
                    </div>
                  </Jss(Flexbox)>
                  <div
                    className="content"
                  />
                </Jss(Flexbox)>
              </Jss(Flexbox)>
            </Jss(Card)>
          </div>,
          "className": "cardWrapper",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Jss(Card)
              className="card md cardHide"
              shadow={5}
            >
              <Jss(Flexbox)
                direction="col"
                display="flex"
              >
                <Jss(Flexbox)
                  flex="1"
                >
                  <Jss(Flexbox)
                    alignItems="start"
                    className="top"
                    display="flex"
                    justifyContent="end"
                  >
                    <div
                      className="closeIcon"
                    >
                      <Jss(Icon)
                        colors={
                          Array [
                            "#222222",
                          ]
                        }
                        height={24}
                        iconName="close"
                        onClick={[MockFunction]}
                        transition="0.3s all"
                        width={24}
                      />
                    </div>
                  </Jss(Flexbox)>
                  <div
                    className="content"
                  />
                </Jss(Flexbox)>
              </Jss(Flexbox)>
            </Jss(Card)>,
            "className": "cardBlock",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Jss(Flexbox)
                direction="col"
                display="flex"
              >
                <Jss(Flexbox)
                  flex="1"
                >
                  <Jss(Flexbox)
                    alignItems="start"
                    className="top"
                    display="flex"
                    justifyContent="end"
                  >
                    <div
                      className="closeIcon"
                    >
                      <Jss(Icon)
                        colors={
                          Array [
                            "#222222",
                          ]
                        }
                        height={24}
                        iconName="close"
                        onClick={[MockFunction]}
                        transition="0.3s all"
                        width={24}
                      />
                    </div>
                  </Jss(Flexbox)>
                  <div
                    className="content"
                  />
                </Jss(Flexbox)>
              </Jss(Flexbox)>,
              "className": "card md cardHide",
              "shadow": 5,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  undefined,
                  <Jss(Flexbox)
                    flex="1"
                  >
                    <Jss(Flexbox)
                      alignItems="start"
                      className="top"
                      display="flex"
                      justifyContent="end"
                    >
                      <div
                        className="closeIcon"
                      >
                        <Jss(Icon)
                          colors={
                            Array [
                              "#222222",
                            ]
                          }
                          height={24}
                          iconName="close"
                          onClick={[MockFunction]}
                          transition="0.3s all"
                          width={24}
                        />
                      </div>
                    </Jss(Flexbox)>
                    <div
                      className="content"
                    />
                  </Jss(Flexbox)>,
                ],
                "direction": "col",
                "display": "flex",
              },
              "ref": null,
              "rendered": Array [
                undefined,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <Jss(Flexbox)
                        alignItems="start"
                        className="top"
                        display="flex"
                        justifyContent="end"
                      >
                        <div
                          className="closeIcon"
                        >
                          <Jss(Icon)
                            colors={
                              Array [
                                "#222222",
                              ]
                            }
                            height={24}
                            iconName="close"
                            onClick={[MockFunction]}
                            transition="0.3s all"
                            width={24}
                          />
                        </div>
                      </Jss(Flexbox)>,
                      <div
                        className="content"
                      />,
                      undefined,
                    ],
                    "flex": "1",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "alignItems": "start",
                        "children": Array [
                          undefined,
                          <div
                            className="closeIcon"
                          >
                            <Jss(Icon)
                              colors={
                                Array [
                                  "#222222",
                                ]
                              }
                              height={24}
                              iconName="close"
                              onClick={[MockFunction]}
                              transition="0.3s all"
                              width={24}
                            />
                          </div>,
                        ],
                        "className": "top",
                        "display": "flex",
                        "justifyContent": "end",
                      },
                      "ref": null,
                      "rendered": Array [
                        undefined,
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": <Jss(Icon)
                              colors={
                                Array [
                                  "#222222",
                                ]
                              }
                              height={24}
                              iconName="close"
                              onClick={[MockFunction]}
                              transition="0.3s all"
                              width={24}
                            />,
                            "className": "closeIcon",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "class",
                            "props": Object {
                              "colors": Array [
                                "#222222",
                              ],
                              "height": 24,
                              "iconName": "close",
                              "onClick": [MockFunction],
                              "transition": "0.3s all",
                              "width": 24,
                            },
                            "ref": null,
                            "rendered": null,
                            "type": [Function],
                          },
                          "type": "div",
                        },
                      ],
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": undefined,
                        "className": "content",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    undefined,
                  ],
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          "type": "div",
        },
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Modal styles matches the snapshot 1`] = `
Object {
  "@global": Object {
    "body": Object {
      "overflow": "hidden",
    },
  },
  "@keyframes modalFadeDown": Object {
    "from": Object {
      "marginTop": -64,
      "opacity": 0,
    },
    "to": Object {
      "marginTop": 0,
      "opacity": 1,
    },
  },
  "@keyframes modalFadeIn": Object {
    "from": Object {
      "opacity": 0,
    },
    "to": Object {
      "opacity": 1,
    },
  },
  "bottom": Object {
    "marginTop": 8,
    "textAlign": "right",
  },
  "card": Object {
    "@media screen and (min-width:768px)": Object {
      "padding": 32,
    },
    "cursor": "auto",
    "maxWidth": "100%",
    "padding": 16,
    "transition": "0.3s opacity, 0.3s margin-top",
  },
  "cardBlock": Object {
    "margin": 12,
  },
  "cardHide": Object {
    "marginTop": -64,
    "opacity": 0,
  },
  "cardShow": Object {
    "animation": "0.3s modalFadeDown ease-out",
  },
  "cardWrapper": Object {
    "maxHeight": "100vh",
    "maxWidth": "100vw",
    "position": "relative",
  },
  "closeIcon": Object {
    "alignItems": "center",
    "display": "flex",
    "height": 32,
  },
  "closePosition": Object {
    "@media screen and (min-width:768px)": Object {
      "right": 32,
      "top": 32,
    },
    "position": "absolute",
    "right": 16,
    "top": 16,
  },
  "content": Object {
    "&::-webkit-scrollbar": Object {
      "width": 6,
    },
    "&::-webkit-scrollbar-thumb": Object {
      "background": "#dddddd",
      "borderRadius": 3,
    },
    "@media screen and (min-width:768px)": Object {
      "marginLeft": -32,
      "marginRight": -32,
      "paddingLeft": 32,
      "paddingRight": 32,
    },
    "marginLeft": -16,
    "marginRight": -16,
    "paddingLeft": 16,
    "paddingRight": 16,
    "transition": "0.1s height",
  },
  "imgLeft": Object {
    "@media screen and (min-width:768px)": Object {
      "marginBottom": -32,
      "marginLeft": -32,
      "marginRight": 32,
      "marginTop": -32,
    },
    "background": [Function],
    "borderRadius": Array [
      6,
      0,
      0,
      6,
    ],
    "marginBottom": -16,
    "marginLeft": -16,
    "marginRight": 16,
    "marginTop": -16,
    "width": 200,
  },
  "imgTop": Object {
    "@media screen and (min-width:768px)": Object {
      "marginBottom": 32,
      "marginLeft": -32,
      "marginRight": -32,
      "marginTop": -32,
    },
    "background": [Function],
    "borderRadius": Array [
      6,
      6,
      0,
      0,
    ],
    "height": 128,
    "marginBottom": 16,
    "marginLeft": -16,
    "marginRight": -16,
    "marginTop": -16,
    "position": "relative",
  },
  "lg": Object {
    "width": 820,
  },
  "mainBtn": Object {
    "marginLeft": 24,
    "marginTop": 16,
  },
  "md": Object {
    "@media screen and (max-width:767px)": Object {
      "maxWidth": "100%",
      "width": 322,
    },
    "width": 520,
  },
  "noClose": Object {
    "cursor": "default",
  },
  "overlay": Object {
    "alignItems": "center",
    "background": "rgba(0, 0, 5, 0.85)",
    "cursor": "pointer",
    "display": "flex",
    "height": "100%",
    "justifyContent": "center",
    "left": 0,
    "overflow": "auto",
    "position": "fixed",
    "top": 0,
    "transition": "0.3s all",
    "width": "100%",
    "zIndex": 1000,
  },
  "overlayHide": Object {
    "opacity": 0,
  },
  "overlayShow": Object {
    "animation": "0.3s modalFadeIn linear",
  },
  "secBtn": Object {
    "marginTop": 16,
  },
  "sm": Object {
    "maxWidth": "100%",
    "width": 322,
  },
  "top": Object {
    "marginBottom": 16,
  },
  "xl": Object {
    "width": 1024,
  },
}
`;

exports[`ModalPortal matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ModalPortal
    container={<div />}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): null,
  Symbol(enzyme.__nodes__): Array [
    null,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
